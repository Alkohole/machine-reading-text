//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.34;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.34] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 *
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags and Troop Name Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Name: Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name: Offset X:
 *   Name: Offset Y:
 *   - Offset the enemy name's position by this much.
 *   - For X: Negative goes left. Positive goes right.
 *   - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Always Visible:
 *   - Determines if the enemy name will always be visible.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type Number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type Number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type Number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\"","DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]"}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"1","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameFontSize:num
 * @text Name: Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 *
 * @param NameOffsetX:num
 * @text Name: Offset X
 * @parent Name
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Name: Offset Y
 * @parent Name
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAlwaysVisible:eval
 * @text Name: Always Visible
 * @parent Name
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * @default false
 *
 * @param NameAttachStateIcon:eval
 * @text Name: Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 1
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x28c1=['JlHTM','_opacityWholeDuration','oxOtL','isBattlerGrounded','addTextToCombatLog','BattleLogRectJS','getEnemyIdWithName','FollowTurn','createShadowSprite','SlotID','_effectsContainer','Index','performMoveToPoint','round','Window_ActorCommand_initialize','setHelpWindowItem','Rate','setupChild','displayTpDamage','executeDamage','result','alive\x20battlers\x20not\x20user','CounterPlayback','iconIndex','invokeAction','start','TtnOL','ActSeq_Mechanics_OtbOrder','ActSeq_Weapon_NextActiveWeapon','Scene_Battle_startActorSelection','drawItemImageXPStyle','CastPhysical','itemTextAlign','forceAction','format','ForceDeath','getSkillIdWithName','EVAL','ChangeOrderBy','bpyjD','missed','requestAnimation','param','WaitForMovement','NwPkb','currentClass','startOpacity','ActSeq_Set_SetupAction','COMBAT\x20LOG','RqrWY','_dragonbonesSpriteContainer','itemCri','tMQlt','damage','mainSpriteHeight','checkTpbInputOpen','_enemy','atbInterrupt','CombatLogIcon','crPvE','ohLPz','yKgZz','updateAttachedSprites','animationWait','jnLcT','tVvla','BattleManager_inputtingAction','battleCamera','ARRAYEVAL','_subject','AnchorY','worldTransform','isAnyoneJumping','_wtypeIDs','_targetOpacity','FaceAway','ActSeq_Target_RandTarget','effect','changeBattlerOpacity','windowAreaHeight','%1EndTurnJS','fBvGp','ActionCenteredName','_flashDuration','XsgxN','setupActionSet','requestDragonbonesAnimation','animationShouldMirror','setActiveWeaponSlot','updateAction','mprUb','floor','onDatabaseLoaded','svBattlerAnchorX','addActor','ActSeq_Zoom_WaitForZoom','Window_BattleLog_performDamage','isForOpponentBattleCore','SkillItemStandardCols','cameraDuration','WaitForAngle','icon','ActSeq_Element_NullElements','applyGlobal','_targetGrowY','lzkcX','ActSeq_BattleLog_PopBaseLine','HzuFM','pages','tIMWD','sideview_ui','dragonbonesData','COMBATLOG','tVmzX','setMoveEasingType','ATTACK','ActSeq_Camera_FocusTarget','Game_BattlerBase_isStateResist','Game_Enemy_setup','Game_Action_applyGlobal','DCQzZ','PostStartActionJS','_angleRevertOnFinish','DisplayAction','damageOffsetX','partyCommandWindowRect','WaitForOpacity','ScaleX','isCharging','missile','displayReflection','BattleManager_startTurn','VisuMZ_3_WeaknessDisplay','delay','visible','AutoBattleBgType','yBYIU','SvMotionIdleMass-%1-%2','linkSprite','lineHeight','Game_Action_evalDamageFormula','retreat','useItem','MMMwz','XACvA','updateStatusWindowPosition','faceWidth','wholeActionSet','AdjustRect','_growEasing','counterAttack','lineRect','%1EndBattleJS','getWtypeIdWithName','requestMotion','canAttackBattleCore','CriticalDuration','attackMotions','ActSeq_Mechanics_FtbAction','changePaintOpacity','RlYNY','bottom','Duration','DksWe','ConvertParams','finishActorInput','PreDamage%1JS','initialize','includes','_jumpDuration','itemHit','BattleManager_isTpbMainPhase','hpDamage','isItemCommandEnabled','Scene_Battle_skillWindowRect','MpGaugeOffsetX','SSboS','FocusX','skill','isMeleeSingleTargetAction','resizeWindowBorderStyle','Width','show','_homeX','isAnyoneSkewing','actorId','rSAso','Zaabc','iSObN','ztmjz','measureTextWidth','drawTextEx','DistanceAdjust','BmkDL','Weapon-%1-%2','isDamagePopupRequested','+%1','displayChangedBuffs','ActSeq_Impact_MotionBlurTarget','UNTITLED','itemEffectAddNormalState','MotionIdle','KhxLv','Game_Actor_setup','PrioritySortActors','CTjOn','_reflectionTarget','lBaER','isBypassDamageCap','_itemWindow','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','onMoveEnd','canAttack','ShowAddedState','CmdIconEscape','BattleCore','refreshActorPortrait','GroupDigits','repositionCancelButtonBorderStyle','Game_Interpreter_command283','setSkill','wcuXH','PSYNi','SkipPartyCmd','max','updateEventMain','iconWidth','VariableDmg','Scene_Map_initializeAfter','innerHeight','kTegY','turnOrderChangeOTB','ePnTj','HIphX','partyCommandWindowRectXPStyle','getBattlePortraitOffsetX','SideviewSelect','isDeathStateAffected','ehQDs','ActSeq_Impact_ShockwavePoint','refresh','jump','createEmptyBitmap','TpbGaugeOffsetY','addFightCommand','isMeleeMultiTargetAction','formula','effects','currentExt','makeHpDamageText','drawSingleSkillCost','ShowAddedBuff','reduce','applyDamageCaps','displayCounter','gPFJa','zdFMX','vqTsh','applyTargetFilters','compareBattlerSprites','makeBattleCommand','itdoR','isMagical','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','StateIconOffsetY','processRandomizedData','maxLines','Scene_Battle_terminate','ActSeq_Horror_NoiseRemove','ActSeq_Movement_FaceTarget','eYMHd','GuardFormulaJS','updateCollapse','arRedRate','needsActorInputCancel','jeUmT','isFightCommandEnabled','Window_BattleLog_displayMpDamage','XbiIB','mpSRY','motionType','hZuIl','ActSeq_Mechanics_VariablePopup','KEhgH','Game_Battler_onBattleStart','_offsetX','wpeOJ','move','Shadow2','iPIML','setupCriticalEffect','evalDamageFormulaBattleCore','ActSeq_Mechanics_RemoveBuffDebuff','isCommandEnabled','commandNameWindowDrawBackground','StatusWindowAttachmentFrontOffsetX','loadSvActor','addNewState','RsztE','custom','PreEndTurnJS','createBattleFieldContainer','parseForcedGameTroopSettingsBattleCore','inBattle','prepareCustomActionSequence','onDisabledPartyCommandSelection','TaKZf','Sprite_Actor_setActorHome','Gvvdj','VisuMZ_0_CoreEngine','rowSpacing','dVEPi','updateOpacity','Post','BattleLog','parameters','ShowAddedDebuff','HomePosJS','_flinched','INnwL','stateMotionIndex','command283','ActSeq_BattleLog_WaitForNewLine','kTBbZ','clearBattleCoreData','bMseg','fIegZ','xoFBu','BHTYr','xUoAr','isUndecided','switchToWeaponType','freezeFrame','onJumpEnd','TpGaugeOffsetY','PortraitScale','popBaseLine','updateShadowVisibility','DefaultSoftScaler','VWoZy','OLWWB','makeAutoBattleActions','getLastPluginCommandInterpreter','battleCommands','_motionSpeed','EscapeFail','clone','CriticalColor','updateFlip','fight','getDamageStyle','AS\x20USER','BattleStartEvent','_targetSkewY','addedBuffs','Scene_Battle_windowAreaHeight','xYdNK','PostEndBattleJS','mainFontSize','qlvSR','GPAev','_callSceneOptions','_back1Sprite','fMrYp','stbGainInstant','SvWeaponMass-%1-%2','WeaponTypeID','critical','random','allowCollapse','iSzqR','occasion','commandAutoBattle','ActSeq_Impact_ShockwaveCenterTargets','isNonSubmenuCancel','StatusWindowAttachmentFrontOffsetY','DRDqe','innerWidth','NameLegacy','moveBattlerToPoint','Sprite_Actor_updateFrame','performAttackSlot','VisuMZ_3_ActSeqProjectiles','power','_forcedBattleLayout','gCDqM','OffsetY','snapForBackground','WaitForZoom','checkAutoCustomActionSequenceNotetagEffect','isConfused','EnableDamageCap','hue','thrust','makeTargetSelectionMoreVisible','helpWindowRect','isBattleRefreshRequested','MANUAL','WaitForSkew','ClearBattleLog','isVisualHpGaugeDisplayed','TieFZ','startTpbTurn','wCgnm','nOSPO','_logWindow','autoBattleUseSkills','changeAtbCastTime','MeleeDistance','SvMotionIdleSolo-%1-%2','VisuMZ_3_ActSeqImpact','OhBHu','HCUDm','drawBackgroundRect','gainHp','createTargetsJS','_commandNameWindow','onAllActionsEnd','ActSeq_Mechanics_HpMpTp','setupZoomBlurImpactFilter','_commonEventIDs','Window_BattleLog_popupDamage','TP_Flat','friendsUnit','_enemyWindow','ZWqGW','battleMove','bitmap','_allTargets','ActSeq_Movement_Spin','Window_Options_statusText','pop','Sprite_Enemy_setHue','removeState','process_VisuMZ_BattleCore_DamageStyles','drawLineText','displayReflectionPlayBack','FaCOg','setupDamagePopup','3abHgng','Destination','performAction','getInputButtonString','UySoA','startSkew','startSpin','GaPhg','addSkillCommands','setBattleSkew','removeHorrorEffect','StateIconOffsetX','isSceneBattle','_emptyBitmap','onAngleEnd','callUpdateHelp','CmdIconAutoBattle','MotionSpeed','Angle','VariableHeal','sort','MIN_SAFE_INTEGER','_activeWeaponSlot','juwnJ','splice','_battlerContainer','CalcActionSpeedJS','Scene_Battle_updateBattleProcess','isBattleFlipped','Targets2','ConvertActionSequenceTarget','displayEvasion','findTargetSprite','_colorType','_actions','BCRaT','ActSeq_Mechanics_DamagePopup','refreshCursor','list','applyData','PostRegenerateJS','_borderPortraitDuration','indexOf','deadMembers','vfqRf','message2','isBusy','OverallFormulaJS','CriticalHitMultiplier','kLLnK','_text','Window_BattleLog_performMiss','CxWGI','DualWield','performFlinch','isCustomBattleScope','TpGaugeOffsetX','Window_SkillList_maxCols','ActSeq_Movement_WaitForJump','updateJump','Game_Action_makeTargets','right','softDamageCap','PostStartBattleJS','waitForMovement','addGuardCommand','_enemyIDs','aMNbu','getAttackWeaponAnimationId','Height','yBQjG','isMagicSkill','HitFlat','thPZH','isAnyoneGrowing','XTRvk','requestMotionRefresh','CxBHw','CmdTextAutoBattle','ActionSkillMsg2','applyHardDamageCap','_battleField','ShowWeapon','Sprite_Battler_damageOffsetY','drawText','ScaleY','clearResult','addOptionsCommand','drawItem','XHDvc','IAItt','attackSkillId','_autoBattleWindow','animationId','maxCommands','_distortionSprite','skillId','ActSeq_Movement_WaitForSpin','PreEndActionJS','Rgsea','_lines','OZjxk','IHnPY','current\x20target','MAT','PwonB','Defeat','commandFight','ActSeq_Target_NextTarget','156129acXoyW','collapseType','SKILLS','Sprite_Enemy_createStateIconSprite','rxRnB','dead\x20friends','callNextMethod','callOkHandler','_inputting','guMTs','performActionStart','VisuMZ_4_BreakShields','zVBdh','displayActionResults','_targetIndex','krGrj','ARRAYNUM','isItem','aOUPn','displayType','Game_Action_isForFriend','_floatWholeDuration','calcWindowHeight','canUseItemCommand','spinBattler','createAnimationContainer','allBattleMembers','PopupOffsetY','uUYxq','_stypeIDs','xmTIE','28LzKslQ','showAnimation','setActionState','CreateActionSequenceTargets','vLJbx','front\x20base','_mainSprite','DamageStyles','XWLya','createString','RAvsE','isEffecting','playCancel','SpvmJ','revealNewWeaknesses','validTargets','performRecovery','DvWnI','freezeMotion','ActSeq_Mechanics_Collapse','_item','notFocusValid','numTargets','alive\x20friends\x20not\x20user','AutoMeleeAoE','CbeuT','onSkewEnd','gMziL','StepDuration','_list','Sprite_Battler_updatePosition','RgHCT','isOpen','RegExp','AsTarget','ShowFailure','createEffectActionSet','cancelActorInput','-%1','_lineHeight','status','selectNextCommand','isAnyProjectilePresent','isFrameVisible','_battlerName','Strength','_effectDuration','selectPreviousCommand','cSYcW','drawItemImage','setImmortal','toUseBoostPoints','_battleCoreForcedElements','bind','UcSXc','_skewDuration','updateSkew','message4','Opacity','HHkLy','CmdIconOptions','vaKjb','Window_BattleEnemy_show','_animationSprites','alive\x20actors\x20not\x20user','PostApplyJS','singleSkill','setVisibleUI','CxHyt','sIscq','optDisplayTp','ShowSubstitute','sliceMax','isAnimationPlaying','StepDistanceY','_indent','damageStyle','alterBreakShield','Armor-%1-%2','_flashColor','JgECp','VisuMZ_4_CombatLog','_targetGrowX','BattleManager_makeActionOrders','CoreEngine','addedStateObjects','displayAction','updateCustomActionSequence','removeAnimationFromContainer','displayItemMessage','ActSeq_Horror_TVCreate','name','eGFuo','visualHpGauge','PreDamageJS','_tpbSceneChangeCacheActor','applyItem','_statusWindow','oLDkS','lcsRB','ActionSequence','updateForceAction','waitForJump','statusWindowRectBorderStyle','process_VisuMZ_BattleCore_CreateRegExp','repositionEnemiesByResolution','Game_Battler_clearMotion','onTurnEnd','CriticalHitRateJS','_checkOn','filter','rFzFH','isOpponent','gaugeLineHeight','needsSelection','forceWeaponAnimation','currentSymbol','XGqlj','Sprite_Battler_setHome','statusWindowRectDefaultStyle','changeWeather','allowRandomSpeed','fnTgR','isChanting','Game_Battler_regenerateAll','drawItemStatusXPStyle','dead\x20actors','WaitForSpin','VwYPw','magicSkills','SwitchMissEvade','Game_Party_addActor','isActiveTpb','CyhWc','portrait','requestFauxAnimation','PopupShiftY','_skewY','isTpb','riJJn','fillRect','PreApply%1JS','isSideButtonLayout','JyDjc','WhQxr','VisuMZ_1_SkillsStatesCore','JKRNY','textWidth','isSpriteVisible','alive\x20friends','addWeaponSwapCommand','startMotion','adjustWeaponSpriteOffset','_jumpMaxHeight','_skewX','Window_ActorCommand_setup','_enemyNameContainer','BattleVictoryJS','ZmZFH','clearBattleRefreshRequest','PostApplyAsUserJS','setActiveWeaponSet','Game_Interpreter_command301','checkShowHideSkillNotetags','stop','updateBattleProcess','setEventCallback','dHcBz','MpGaugeOffsetY','getHardDamageCap','battleSpin','float','ActiveTpbOptionsMessage','AGGoz','isDisplayEmergedEnemies','damageOffsetY','battleLayoutStyle','wpPgn','constructor','command301','hide','Sprite_Battleback_adjustPosition','processBorderActor','finalizeScale','FrontViewSelect','flashColor','getSimilarSTypes','Style','_damagePopupArray','displayMpDamage','setHelpWindow','updateWeather','baBVl','uYKJd','isActor','turn','WaitForAnimation','Spriteset_Battle_createLowerLayer','EFFECT_COMMON_EVENT','ActSeq_Mechanics_StbExtraAction','getNextDamagePopup','ActSeq_Impact_MotionTrailRemove','ParseActorNotetags','ActSeq_BattleLog_PushBaseLine','startAction','setHome','_createClientArea','Scene_Battle_helpWindowRect','ActSeq_Movement_WaitForSkew','makeCommandList','VisuMZ_2_BattleSystemATB','PerformAction','battleSkew','POST-','nvXEJ','_skewWholeDuration','ipKdx','statusWindowRect','DefeatEvent','ActSeq_Camera_WaitForCamera','FlashColor','VisuMZ_2_BattleSystemOTB','attackAnimationId2','sortDamageSprites','_shadowScale','addDebuff','setupTextPopup','drawItemStyleIcon','ActSeq_Mechanics_BreakShieldChange','JS\x20%1APPLY\x20%2','_createEffectsContainer','battleCoreResumeLaunchBattle','updateFrame','processAnimationRequests','animationBaseDelay','setLastPluginCommandInterpreter','_phase','AMeVe','updateGrow','isBattlerFlipped','ShowPortraits','aImVf','PreRegenerateJS','FlinchDuration','evalDamageFormula','updateStart','BaseTroopIDs','StyleName','ActSeq_Angle_WaitForAngle','casting','ugydt','voiLm','isJumping','drawItemImageListStyle','_actorCommandWindow','VisuMZ_2_HorrorEffects','bgType','addAttackCommand','YjqPC','drain','hVzOR','maxCols','swapEnemyIDs','ActSeq_Projectile_Icon','battleCorePreBattleCommonEvent','performJump','ActSeq_Motion_ClearFreezeFrame','makeActions','Window_BattleLog_performSubstitute','close','setupMotionBlurImpactFilter','autoBattleStyle','ActSeq_Zoom_Reset','HelpItem','stypeId','_preemptive','processBattleCoreJS','processForcedAction','Filename','pow','onBattleStartBattleCore','ActSeq_Impact_MotionBlurScreen','ActSeq_Horror_NoiseCreate','ONZEr','RevertAngle','RMyeA','getItemDamageAmountLabelOriginal','_partyCommandWindow','battleSpriteSkew','TextAlign','WUgKZ','nLnYf','RtzxF','resetBreakShield','checkShowHideSwitchNotetags','actorCommandCancelTPB','commandStyleCheck','Game_System_initialize','updateBattlebackBitmap1','Scene_Battle_logWindowRect','hasSkill','VspTW','_autoBattle','Amp','_isBattlerFlipped','fLXPz','XhFhj','QnyZx','startActorCommandSelection','canBattlerMove','ndKoh','ActSeq_Mechanics_AddBuffDebuff','isChangingOpacity','Scene_Battle_itemWindowRect','_angleEasing','registerCommand','autoBattleWindowRect','SceneManager_isSceneChanging','getColor','isSkillItemWindowsMiddle','vOwPB','updateBattlerContainer','sfqDS','getTraitSetKeys','drYiU','isPartyCommandWindowDisabled','%1StartActionJS','1931Wjvedk','ActSeq_Horror_Clear','refreshMotion','Scene_Battle_onEnemyCancel','setBattlePortrait','onGrowEnd','ActSeq_BattleLog_WaitForBattleLog','performSubstitute','alive\x20enemies','_updateFilterArea','loadSvEnemy','battleUIOffsetX','AttackAnimation','AutoBattleCancel','PopupDuration','BattleLayout','OvAyR','selectNextActor','mcrWB','resetFontSettings','BARE\x20HANDS','LwgIK','sLCZd','replace','jumpBattler','Sprite_Battler_startMove','addCustomCommands','yknyf','%1Damage%2JS','shouldPopupDamage','_effectType','placeTimeGauge','isPhysical','ParseSkillNotetags','abnormal','ApplyImmortal','HelpFight','ActSeq_Mechanics_RemoveState','isForOne','kYROE','Window_BattleLog_performActionEnd','displayRemovedStates','XAcvQ','cameraOffsetDuration','Scene_Battle_stop','removeBuff','_hpGaugeSprite','createHelpWindowBattleCore','boxWidth','boxHeight','klkDL','Reveal','Actor','Direction','displayCurrentState','setupIconTextPopup','rWVnK','dOusT','isBattleTest','_back2Sprite','showPortraits','EasingType','MDF','createBattleUIOffsetY','commandNameWindowCenter','Window_BattleLog_displayEvasion','Zzfro','victory','ActSeq_Element_Clear','NPFff','waitForAnimation','invokeMagicReflection','sleep','applyFreezeMotionFrames','Actions','lPzpI','aliveMembers','PostEndActionJS','BattleManager_processDefeat','sangL','xQiTQ','value','setupBattleback','Window_BattleEnemy_initialize','ShowHpDmg','_actionInputIndex','adjustPosition_1for1','IconSet','Game_Action_clear','Item-%1-%2','attachSpritesToDistortionSprite','tvboF','setBattleCameraTargets','_battleCoreNoElement','toUpperCase','ActionStart','HelpEscape','extraHeight','PXoIw','addChild','isTpbMainPhase','ForceRandom','aStkn','Game_Action_isForRandom','battlelog','State-%1-%2','skillTypes','displayStartMessages','Victory','_updateCursorArea','_motion','EnableSoftCap','sortEnemies','clearFreezeMotion','_borderPortraitTargetX','_baseY','TRTbv','criticalHitRate','JumpToLabel','actions','createDamageContainer','createCommandNameWindow','YlrnP','acNyQ','cllZD','currentAction','anchorX','VoALE','VariableID','42753HNEVGx','DefaultHardCap','ConfigManager_applyData','showHelpWindow','applyForcedGameTroopSettingsBattleCore','updateBitmap','PreStartBattleJS','PvAzW','DvYTD','displayHpDamage','Window_BattleLog_performCounter','AutoBattleMsg','canMove','changeInputWindow','isDuringNonLoopingMotion','DistanceX','applyVariance','AttachStateOffsetX','adjustPosition_ScaleUp','isBuffAffected','onRegeneratePlayStateAnimation','VDGvV','SkewX','mEMBh','ngjlB','MotionType','battleCommandName','kCyMw','CalcEscapeRatioJS','CVOXZ','_enemySprites','isDying','okButtonText','PostStartTurnJS','ActSeq_Mechanics_StbExploit','skills','performMiss','startActorSelection','vmqch','buffAdd','_pattern','some','autoBattleStart','sliceMin','addedDebuffs','EscapeFailureJS','command3011','makeTargetsBattleCore','rFbdZ','commandStyle','softDamageCapRate','STYPES','EWEEC','isActionSelectionValid','checkTpbInputClose','Window_BattleLog_clear','isOnCurrentMap','battleEffect','KGLRm','AutoBattleOK','_skewEasing','Scene_Battle_startEnemySelection','helpAreaBottom','currentValue','ActSeq_Mechanics_CtbSpeed','Setting','isOptionsCommandEnabled','performCollapse','addEscapeCommand','performMoveToTargets','hSJhx','itemRect','isAtbCastingState','drawIcon','FocusY','mainSpriteScaleY','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','BattleManager_onEscapeSuccess','performActionEndMembers','isOptionsCommandAdded','processRefresh','eraseState','updateCancel','recoverAll','ParseClassNotetags','Game_BattlerBase_canGuard','StatusWindowSelectableBackHide','commandOptions','ArRedFlat','clearFreezeMotionForWeapons','resizeWindowXPStyle','gainMp','onActorOk','setBattleZoom','concat','VWprz','arRedFlat','ShowMissEvasion','ShowMpDmg','_attackAnimationId','AGI','ActSeq_Camera_Clamp','dead\x20enemies','updateBossCollapse','AlphaFilter','isFloating','text','ZYDEQ','RepositionEnemies','uiInputPosition','\x5cI[%1]%2','QoL','addGeneralOptions','fittingHeight','PUHvD','PreStartActionJS','StyleOFF','playEnemyDamage','height','canGuard','SmoothImage','cancel','ActionCount','jbyLt','_handlers','Game_Action_itemEffectAddAttackState','Scene_Battle_start','applyImmortal','PXfNo','updatePosition','deathStateId','AutoMeleeSolo','_targets','IxQkg','RequiresDefeat','addLoadListener','HrQYx','updateSpin','drawItemStatusListStyle','CastMagical','setBattlerFacePoint','setupWeaponAnimation','GoRES','battleback1Name','BattleManager_onEscapeFailure','CmdTextAlign','isAnyoneFloating','LaPyX','base','ViVQb','revertTpbCachedActor','isSceneChanging','wpSpS','_motionType','setWaitMode','regionId','_regionBattleback1','checkCacheKey','updateStateSprite','Targets1','isForRandom','UVGqN','ScaleToFit','BreakShields','clearDamagePopup','updateBattlebackBitmap2','_cursorSprite','actionBattleCoreJS','updatePhase','startBattle','onEncounterBattleCore','iAsWT','_cacheTextWidth','jAXto','dQsCc','partyCommandWindowRectDefaultStyle','_damageContainer','_weaponSprite','createPartyCommandWindowBattleCore','_multipliers','removeAnimation','DigitGroupingDamageSprites','trueRandomTarget','left','ElementStatusCore','_targetFloatHeight','NameOffsetY','CommandVisible','_padding','Immortal','Game_BattlerBase_eraseState','EWmuw','uIFrW','ARRAYFUNC','maxTp','ESCAPE','attackAnimationIdSlot','JS\x20%1END\x20ACTION','oZbmo','growBattler','XPSpriteYLocation','VisuMZ_3_ActSeqCamera','updateHpGaugePosition','isImmortal','removedStateObjects','push','qaMnd','Parse_Notetags_Action','makeActionListAutoAttack','applySoftDamageCap','DamageDisplay','autoMeleeMultiTargetActionSet','onEscapeFailure','isStateResist','loadPicture','gainCurrentActionsFTB','Game_Action_itemEffectAddNormalState','updateBorderStyle','setText','Game_Action_itemHit','NrFgx','initMembers','enemyId','isClicked','svBattlerData','swing','performActionMotions','updateAngleCalculations','commandSymbol','_stateSprite','actionEffect','Spriteset_Battle_update','die','contents','_tempEquipCheck','nKCmH','clearBattlerMotionTrailData','ShowHide','YarVR','isGrowing','ArPenFlat','_growDuration','CalcEscapeRaiseJS','eYsSQ','isSkipPartyCommandWindow','BattleManager_endBattle','isInputting','needsSelectionBattleCore','pTLFU','ActSeq_Movement_Scale','IIbIX','SBbxF','setSvBattlerSprite','PCDgx','JPUxM','addState','adjustPosition_ScaleToFit','nextActiveWeaponSlot','applyResultSwitches','ActSeq_Weapon_ClearActiveWeapon','mpHealingFmt','TkSeI','ActSeq_Mechanics_TextPopup','ActSeq_Impact_ShockwaveEachTargets','NameAlwaysVisible','endAction','ShowPortraitsBorderStyle','ActSeq_Impact_ZoomBlurTargetCenter','wguMh','BattleDefeatJS','vHeOH','FaceDirection','QrXAT','subject','CommandAddOptions','wPQeW','Afqcc','createBattleField','hitRate','_visualHpGauge_JustDied','isEnemy','map','applyAngleChange','addBattleCoreAutoBattleStyleCommand','anchor','Window_BattleLog_performRecovery','upkgg','PostEndTurnJS','jhSpl','frontviewSpriteY','Window_BattleStatus_drawItemImage','vQoLu','_totalValue','itemHeight','Shadow','ActSeq_Animation_CastAnimation','applyGuard','Sprite_Actor_update','WaitForNewLine','ShowCosts','clearMotion','QnjPt','TPB','wait','ZgLZD','getSkillTypes','LUK','initMembersBattleCore','SIBiJ','moveToStartPositionBattleCore','Mirror','VisuMZ_2_BattleSystemBTB','auto','noise','clearForcedGameTroopSettingsBattleCore','command357','Sprite_Actor_updateBitmap','bossCollapse','imrLn','Exploiter','removeStatesAuto','_floatEasing','skillItemWindowRectMiddle','callOptions','targetActionSet','targetObjects','active','_uiContainer','AutoBattleRect','NUM','apply','waitCount','attack','getCommonEventIdWithName','drawActorFace','turnCount','XruRd','scale','isDead','isEscapeCommandEnabled','NameFontSize','MessageWait','Enemy-%1-%2','processPostBattleCommonEvents','exit','Qmicz','Game_Actor_equips','weatherPower','Sprite_Enemy_initVisibility','updateScale','getItemDamageAmountLabelBattleCore','ETtli','ActSeq_Movement_HomeReset','setValue','WaitForCamera','_windowLayer','applyGlobalCommonEventNotetags','zcAio','AUTO\x20BATTLE','battlerShadowScale','actionSplicePoint','width','getBattlePortrait','ifyrL','process_VisuMZ_BattleCore_Action_Notetags','BattleManager_processVictory','ChantStyle','PreApplyAsTargetJS','Nkspt','YklEB','DoHBT','animation','ShowFacesListStyle','tYHQc','updateVisibility','item','ADBVf','isNextSceneBattleTransitionable','BattleManager_startInput','_jumpWholeDuration','MotionAni','_action','Sprite_Battler_initMembers','startJump','ShowPopup','TpbGaugeOffsetX','remove','_svBattlerData','updateShadowBattleCore','ZRIiw','Scene_Boot_onDatabaseLoaded','SkewY','JS\x20BATTLE\x20VICTORY','_stateIconSprite','hxsWJ','skillWindowRect','qsadx','magicReflection','setupHpGaugeSprite','VSwYh','filters','yVscx','Parse_Notetags_Targets','clearElementChanges','mmp','nCCfA','isQueueOptionsMenu','isPreviousSceneBattleTransitionable','preemptive','isBorderStylePortraitShown','isAutoBattleCommandEnabled','createStateIconSprite','PopupShiftX','DdcMg','setupFont','Skill-%1-%2','adjustPosition_ScaleDown','clear','opacityStart','DZfBm','ActSeq_Element_ForceElements','onBattleStart','hasBeenDefeatedBefore','makeData','getNextSubjectFromPool','StatusWindowAttachmentBackOffsetX','ParseEnemyNotetags','updateBorderSprite','_lastPluginCommandInterpreter','autoMeleeSingleTargetActionSet','canAddSkillCommand','alive\x20opponents\x20not\x20target','createCancelButton','forceMotion','MPtfv','applyEasing','Scene_Battle_onActorOk','length','ParseStateNotetags','border','refreshBattlerMotions','Game_Interpreter_PluginCommand','skew','Fgzwc','addChildToBack','YpYrQ','ActSeq_Camera_Reset','alive\x20enemies\x20not\x20user','performActionEnd','Sprite_Actor_updateShadow','CmHYe','PrioritySortActive','FcTAG','createEnemyNames','Game_Action_needsSelection','isCancelled','lvXQs','feFTi','walk','ARRAYSTRUCT','actorCommandEscape','_updateCursorFilterArea','forceEscapeSprite','split','ActSeq_Mechanics_Multipliers','_commonEventQueue','PopupOffsetX','getAttackMotionSlot','HP_Rate','windowskin','VisuMZ_2_PartySystem','fMlIB','actor','angle','criticalDmgFlat','DamageRate','GkXkx','DamageType%1','BattleManager_selectNextCommand','resetResultSwitches','_helpWindow','dvTYz','popupDamage','Scene_Map_launchBattle','_freezeMotionData','KZncj','PhTuL','open','changeAtbChargeTime','isSideView','fSkZK','Scene_Battle_updateStatusWindowPosition','Window_BattleLog_pushBaseLine','svAnchorY','_growY','onEscapeSuccess','ihnvL','_baseLineStack','ActSeq_Mechanics_AtbGauge','isPreviousScene','SWftM','waitForNewLine','activate','beObP','Game_Temp_requestAnimation','CmdStyle','statusText','autoSelectLastSelected','extraPositionY','ActSeq_Mechanics_AddState','WHjhZ','TPQbJ','createPartyCommandWindow','_skillWindow','StatusWindowAttachmentBack','setupBattlebackBattleCore','_growWholeDuration','_preBattleCommonEvent','children','tone','_branch','BattleManager_cancelActorInput','oadFE','Interrupt','Scene_Battle_partyCommandWindowRect','_offsetY','_iconIndex','battlerSprites','removeDamageSprite','launchBattle','AllowRandomSpeed','startWeaponAnimation','CopyCombatLog','LOjvb','battleOpacity','createJS','Spriteset_Battle_createBattleField','onEnemyOk','makeTargets','_jumpHeight','WRBPD','YicIH','all\x20targets','ShowCritical','_linkedSprite','QMthG','createActors','_immortal','ActSeq_Mechanics_DeathBreak','createKeyJS','ActSeq_Mechanics_BoostPointsStoreData','addSingleSkillCommand','LXtzj','inputtingAction','motionIdle','Game_Map_setupBattleback','ShowCurrentState','Game_Enemy_transform','EscapeSuccessJS','QhGPa','waitForEffect','isMoving','VisuMZ_2_BattleSystemSTB','Debuffs','origin','uXBMt','showEnemyAttackAnimation','isWaiting','createMainSprite','ActSeq_Mechanics_BreakShieldReset','isGuardWaiting','ActSeq_Weapon_SetActiveWeapon','LastSelected','Game_Action_apply','AutoBattle','opacity','_tempActor','createAttachedSprites','MFRbi','endAnimation','ActSeq_Horror_TVRemove','partyCommandWindowRectBorderStyle','Spriteset_Battle_updateActors','loadSystem','Point','_forcing','makeDeepCopy','YRUKY','mainSprite','HJTEG','ShowTpDmg','prototype','uUVow','HitRate','Enemy','isAutoBattle','ActSeq_BattleLog_Clear','StepDistanceX','_opacityEasing','nxZGL','terminate','fiwsn','svBattlerShadowVisible','muXFp','loadBattleback2','LBplY','onOpacityEnd','isForFriendBattleCore','ActSeq_Skew_Reset','JS\x20ESCAPE\x20SUCCESS','setActorHome','getConfigValue','TargetLocation','jsCli','lVZwt','createDistortionSprite','RpQcM','gLzWy','drawEnemyName','getBattlePortraitOffsetY','IsLPU','abs','Scene_Battle_selectPreviousCommand','Sprite_Actor_setBattler','refreshStatusWindow','Sprite_Enemy_setBattler','JSON','autoBattleAtStart','GBdsc','yCtYQ','flashDuration','_battleLayoutStyle','getDualWieldTimes','iterateBattler','Parse_Notetags_TraitObjects','timeScale','createActorCommandWindowBattleCore','resize','createBattleUIOffsetX','_escapeRatio','svAnchorX','battleCoreTpbMainPhase','ActionAnimation','JS\x20ESCAPE\x20FAILURE','Game_Party_removeActor','updateLink','applyArmorModifiers','DfbqM','itemWindowRect','rVGEx','RGNCe','actorCommandAutoBattle','SvWeaponSolo-%1-%2','RLGRj','battleback2Name','ActSeq_Mechanics_AnalyzeWeakness','ChargeRate','setupBattleCore','Sprite_Enemy_updateStateSprite','IWOcr','PortraitScaleBorderStyle','isAlive','TkKUj','CommandWidth','center','itemLineRect','setHandler','Formula','moveToStartPosition','displayFailure','VisuMZ_1_ElementStatusCore','_damages','createLowerLayer','_endBattle','dying','OyCqS','visibilityState','zEcba','KIPlS','startMove','LmECA','gGvlj','UehNQ','VisuMZ_3_BoostAction','isTriggered','alive\x20battlers','statusWindowRectXPStyle','isForFriend','update','Game_Battler_forceAction','Game_Troop_setup','_updateClientArea','hasSvBattler','DEF','Scene_Battle_commandFight','ksHFf','STRUCT','NameAttachStateIcon','anchorY','createAllWindows','trim','ylYQD','gradientFillRect','qMQxp','DPkdM','isPlaytest','isPartyTpbInputtable','becomeSTBExploited','HkHNF','weaponImageId','setBattlerFlip','Scene_Battle_createHelpWindow','StatusWindowAttachmentFront','DamageFlat','removeChild','processDefeat','changeTurnOrderByCTB','PostApplyAsTargetJS','_forcedBattlers','ActionEndUpdate','3922Ijvfxr','_weather','isActing','addAnimationSpriteToContainer','isDTB','_homeY','Sprite_Battler_update','Variable','startGrow','addCommand','Scene_Battle_createCancelButton','Scene_Battle_createPartyCommandWindow','rbGzC','blockWidth','createHpGaugeSprite','RLvTb','BattleManager_initMembers','mQiqB','clearActiveWeaponSlot','Scene_Battle_onActorCancel','damageContainer','Game_Battler_performMiss','_dimmerSprite','startTurn','okTargetSelectionVisibility','addItemCommand','_shadowSprite','slice','PartyCmd','eAQlf','code','addChildAt','updateShadowScale','Game_Actor_makeActionList','DjxWK','Sprite_Battler_damageOffsetX','439lOYAPm','Window_BattleLog_popBaseLine','OTxtK','text\x20target','isMVAnimation','process_VisuMZ_BattleCore_BaseTroops','_animation','createAutoBattleWindow','Sprite_Weapon_loadBitmap','ActSeq_Animation_WaitForAnimation','weapons','OKxMn','match','battleGrow','initBattleCore','Sygwo','WPdHi','isGuard','kJHRe','_executedValue','updateActors','isTurnBased','performMagicEvasion','MP_Rate','CboKp','createContents','command119','ActSeq_Movement_MoveToPoint','description','RZEkk','cancelButtonText','chant','PreStartTurnJS','enemy','_target','stepForward','_animationContainer','ActSeq_Horror_GlitchCreate','ActionSkillMsg1','guardSkillId','YVwBG','BattleEndEvent','registerDefeatedEnemy','_defeatedEnemies','prev\x20target','isForOpponent','equips','parse','drawSkillCost','drawGauge','svBattlerName','createBattleFieldBattleCore','Game_Battler_clearDamagePopup','hYnfr','cancelTargetSelectionVisibility','attackAnimationId1','crKTi','battleCameraData','getItemDamageAmountTextBattleCore','battlerSmoothImage','drawItemImagePortraitStyle','jqZaD','escape','_actionBattlers','opponentsUnit','performDamage','min','JGuCL','gainTp','Game_Map_battleback1Name','setup','battleStatusWindowAnimationContainer','_enemies','updateAttachmentSprites','tZDcG','isFlipped','MOTIONS','ResetFocus','alive\x20enemies\x20not\x20target','PreApplyJS','alive\x20actors\x20not\x20target','statusTextAutoBattleStyle','traitObjects','performCastAnimation','HMfDN','Window_BattleLog_performCollapse','_weaponImageId','compareEnemySprite','VfvOb','call','ytPFQ','clamp','PostDamageJS','FxEJb','playReflection','BattleManager_startBattle','displayBuffs','CCLYH','#%1','motionSpeed','updateWaitMode','BQRJT','evaded','_cache','mSblt','ActSeq_Camera_FocusPoint','WaitForScale','clearActiveWeaponSet','GkJAb','isAnimationShownOnBattlePortrait','Game_Battler_performActionStart','note','Game_BattlerBase_addNewState','spriteId','placeStateIcon','WaitForProjectile','isAutoBattleCommandAdded','setBattleCameraPoint','FJeQy','NameOffsetX','getDefeatedEnemies','hhqWx','startFloat','SvBattlerSolo-%1-%2','onEnemyCancel','makeSpeed','weaponTypes','_opacityDuration','changeBattlebacks','isOkEnabled','IOHsw','processVictory','Exploited','fvVJY','preparePartyRefresh','battleMembers','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','%1Apply%2JS','Elements','QiNaJ','vxfbO','ext','BattleManager_updatePhase','TP_Rate','JRWJV','1879lJqVeS','%1RegenerateJS','_baseX','createEnemyNameContainer','randomInt','actor%1-portrait','textColor','_battler','ayMKs','_floatHeight','Skills','ActSeq_Motion_MotionType','ActorCmd','adjustFlippedBattlefield','uNKAn','_createCursorSprite','setupRgbSplitImpactFilter','_frontAttachmentSprite','xnbNO','TbjqL','adjustPosition','commandEscape','AS\x20TARGET','Targets','iconText','process_VisuMZ_BattleCore_jsFunctions','transform','updateFloat','ActionEnd','setSTBExploited','hsTjH','_animationCount','yfnct','isAtbChargingState','BlXGF','vmPCR','jPdCD','createAnimationSprite','Chhjx','command301_PreBattleEvent','_customDamageFormula','Game_Battler_makeSpeed','Window_BattleLog_displayCurrentState','OffsetX','avEae','randomTargets','vTnqH','nQLvj','battleZoom','pattern','Linear','createSeparateDamagePopups','isSkill','isCertainHit','battleAnimation','JYMve','updateMain','weatherType','Xusmh','_surprise','spell','_angleWholeDuration','sgUPC','clearRect','StartName','isAffectedByBreakShield','RxfRq','XPActorCommandLines','ActSeq_Set_TargetActionSet','blt','AhxCi','head','getAttackMotion','nBCKI','ConfigManager_makeData','Game_Battler_performEvasion','_borderPortraitSprite','_spriteset','finishActionSet','SkillItemBorderCols','kABAm','Name','Damage','toLowerCase','Game_Map_battleback2Name','YSzgS','25oJeajL','VisuMZ_2_DragonbonesUnion','Game_Battler_performDamage','_createCursorArea','Buffs','VisuMZ_2_BattleSystemCTB','updateStateIconSprite','_interpreter','updateInterpreter','updatePadding','index','EAZdc','wtypeId','mXfji','_angleDuration','QvtRT','TxewT','createInnerPortrait','performSTBExploiter','addPartyCommand','ForceExploiter','createHelpWindow','createChildSprite','initVisibility','substitute','Scene_Battle_onEnemyOk','ReflectPlayback','moveBattlerDistance','PreEndBattleJS','useDigitGrouping','getBattlePortraitFilename','emerge','ActSeq_Movement_Jump','AutoNotetag','destroyDamageSprite','Window_BattleLog_update','removeBuffsAuto','createCommandVisibleJS','_cancelButton','siVhf','createWeather','BCMzB','325964MQjswr','PopupPosition','ATK','zoomDuration','startInput','createMiss','XckOg','KPPJp','WaitCount','wqQCU','startPartyCommandSelection','removeImmortal','isAnyoneChangingOpacity','hvNGj','centerFrontViewSprite','STR','addCombatLogCommand','ActSeq_Motion_WaitMotionFrame','drawItemBackground','_tpbState','CmdIconItem','onEncounter','isSkewing','Window_BattleLog_displayCritical','hardDamageCap','parent','_tpbNeedsPartyCommand','ARRAYJSON','getNextSubject','Game_BattlerBase_initMembers','lNTSx','BattleManager_endAction','Sprite_Enemy_updateBossCollapse','ActSeq_Mechanics_WaitForEffect','PreApplyAsUserJS','ParseItemNotetags','process_VisuMZ_BattleCore_Notetags','Actor-%1-%2','isTickBased','setBattlerBattleCore','changeCtbChargeTime','Frame','Huaut','PreDamageAsTargetJS','ShowReflect','_index','JCPIW','battleEnd','_appeared','cMvib','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','PostDamage%1JS','iconHeight','MP_Flat','_currentAngle','NZyVl','CheckMapBattleEventValid','ActSeq_Mechanics_StbRemoveExcessActions','sPvmg','ActSeq_Skew_WaitForSkew','_floatDuration','isBattleSys','GmMQb','cONYb','createDamageSprite','process_VisuMZ_BattleCore_PluginParams','Class-%1-%2','ioFdk','forceSelect','Sprite_StateIcon_updateFrame','SwitchCritical','TiNsa','CriticalDmgRate','StatusWindowSkinFilename','updateShadow','ITEM','WcqrW','_battleCoreBattleResumeAfter','angleDuration','MmSgS','Game_Action_isForOpponent','autoSelect','updateHelp','isHidden','Hxntv','svBattlerAnchorY','ActSeq_Mechanics_BoostPointsChange','setBattler','updateMotionCount','smooth','battleAngle','applyCritical','_lastEnemy','repeatTargets','_enemyID','wNyxn','Window_PartyCommand_initialize','getItemDamageAmountTextOriginal','getChildIndex','displayCritical','RaXCw','isAnyoneSpinning','requestRefresh','ygSDQ','cBiyg','VZlKz','States','ParseWeaponNotetags','process_VisuMZ_BattleCore_Failsafes','<CENTER>%1','isAppeared','_duration','updateShadowPosition','fiezR','autoBattle','ScaleUp','skillItemWindowRectBorderStyle','PkfhA','ScaleDown','checkShowHideBattleNotetags','criticalDmgRate','_scene','icZDl','EAXwd','430345SOekuS','maxItems','YoLwi','Sprite_Actor_initMembers','_waitMode','Scene_ItemBase_applyItem','performCounter','pwSwu','AllowCollapse','alive\x20actors','contentsOpacity','ygGhT','_regionBattleback2','isBattleCoreTargetScope','StartTurnMsg','nKqKv','bTGbu','rIqGP','helpWindowRectBorderStyle','eRHoh','missle','Window_BattleLog_refresh','performAttack','setCustomDamageFormula','_motionCount','speed','_speed','playEnemyAttack','Game_BattlerBase_canAttack','alive\x20battlers\x20not\x20target','qvdxJ','yZOvT','selectNextCommandTpb','charging','isShownOnBattlePortrait','Scene_Battle_selectNextCommand','createActionSequenceProjectile','BgxVm','isLearnedSkill','Settings','qCCYp','ActionEffect','_skillIDs','addSkillTypeCommand','PMQZe','HpGauge','displayMiss','autoSelectPriority','_createDamageContainer','skewDuration','updateCommandNameWindow','process_VisuMZ_BattleCore_TraitObject_Notetags','default','setupMotion','isAttack','setHorrorEffectSettings','battleJump','Window_BattleLog_displayFailure','placeGauge','AsUser','BattleCmdList','Slot','_methods','EMBZU','isRightInputMode','sFfXL','addShowHpGaugeCommand','NqbLt','Sprite_Actor_moveToStartPosition','putActiveBattlerOnTop','initBattlePortrait','commandName','cILBV','jIGQP','attackStates','ActSeq_Movement_WaitForOpacity','_flipScaleX','BattleManager_onEncounter','updateEffectContainers','extraPositionX','hitFlat','RcBxM','vRoNC','dimColor1','damageRate','loadBitmap','battler','siZji','isNextScene','tGLNm','WaitCount1','Game_Interpreter_updateWaitMode','XitFA','hpAffected','_cursorArea','dimColor2','drawItemStatus','actorCommandSingleSkill','krgGK','_forceAction','StartTurnWait','createAttachmentSprites','AhZcs','unshift','guard','canEscape','_battleCoreBattleStartEvent','PcWkt','Sprite_Enemy_loadBitmap','IGhlS','updateStateSpriteBattleCore','_svBattlerSprite','Scene_Battle_startPartyCommandSelection','Scene_Options_maxCommands','HpGaugeOffsetY','uXAZy','_requestRefresh','sjUTV','vfRld','VtVBu','updateStyleOpacity','HWqpi','evade','helpAreaHeight','chantStyle','textSizeEx','battleDisplayText','_waitCount','wSBGX','scope','setBackgroundType','ActSeq_Movement_MoveBy','Sprite_Battler_isMoving','zpgtW','EghVN','mainSpriteWidth','_eventId','MAXMP','create','createUIContainer','VisuMZ_3_SideviewBattleUI','stepFlinch','ActSeq_ChangeSkew','Window_BattleStatus_initialize','rzkOu','AddOption','onSelectAction','WaitForEffect','Zfkgi','usePremadeActionSequence','wwbEn','eVTpt','destroy','updateRefresh','Sprite_Battler_setBattler','_enemyId','gainBravePoints','PcdQd','battleCommandIcon','collapse','XMOee','PostDamageAsTargetJS','addAutoBattleCommand','NextTurn','MotionFrameWait','makeTargetSprites','NewPopupBottom','Wave','OffsetAdjust','makeEscapeRatio','jsXjH','setFrame','hnVrL','setupBattleCoreData','Sprite_Battler_updateMain','getMenuImage','PNQGj','repeats','OcGab','reserveCommonEvent','changeCtbCastTime','bitmapHeight','rzEip','vfgwl','Window_BattleLog_performMagicEvasion','Sprite_Enemy_updateCollapse','_targetSkewX','WaitForJump','Window_BattleLog_displayTpDamage','plBdr','+%1\x20MP','createActorCommandWindow','Game_Action_executeDamage','applyBattleCoreJS','MMuov','_actorSprites','battleUIOffsetY','FQlPi','eZGYy','KLLVc','windowPadding','CheckSkillCommandShowSwitches','_canLose','rDHkU','pushBaseLine','nameY','Window_BattleLog_performReflection','FutSx','createStateSprite','EXDCi','CcQMG','equipSlots','CriticalHitFlat','wvPjL','drawItemStyleIconText','_armorPenetration','canGuardBattleCore','BattleManager_startAction','setHue','padding','FUNC','Game_BattlerBase_refresh','CastAnimation','battleSys','clearWeaponAnimation','_actor','dataId','toString','Game_BattlerBase_die','WaitCount2','isAnyoneMoving','actorCommandWindowRect','bitmapWidth','BackColor','#ffffff','Text','startDamagePopup','DTB','performEvasion','focus','stepBack','fontSize','UjkTn','addAutoBattleCommands','displayAddedStates','_tempBattler','loadBattleback1','CriticalDmgFlat','setBattleAngle','PostApply%1JS','glitch','_shake','Window_Options_addGeneralOptions','SomXx','isCustomActionSequence','WtypeId','_targetAngle','isSpinning','_growX','Mechanics','qWvdq','PRE-','OkYVu','commandNameWindowDrawText','Game_Battler_onTurnEnd','Scene_Battle_startActorCommandSelection','Scale','hAPEr','performWeaponAnimation','Game_Battler_startTpbTurn','addText','isFastForward','setBattleCameraOffset','mainSpriteScaleX','TextColor','VisuMZ_1_MainMenuCore','AddHpGaugeOption','Scene_Battle_createActorCommandWindow','shadow','JS\x20%1END\x20TURN','BHRRJ','txUcw','ActSeq_Motion_RefreshMotion','Window_ItemList_maxCols','arPenRate','JS\x20%1DAMAGE\x20%2','performReflection','startAttackWeaponAnimation','dead','type','_currentActor','PostDamageAsUserJS','filterArea','GsINU','mpDamage','ActSeq_Mechanics_CtbOrder','StartTurnShow','Window_BattleLog_performAction','qoZLj','HP_Flat','xyCoF','Cbcka','removeActor','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','version','MAXHP','ActSeq_Zoom_Scale','Scene_Battle_createAllWindows','lbDQQ','_battlePortrait','onFloatEnd','hpDamageFmt','options','startEnemySelection','members','ALMsa','log','Window_BattleLog_displayMiss','maxBattleMembers','addDamageSprite','_actorWindow','ActSeq_Movement_BattleStep','zQIeP','AnchorX','1vDfwvF','isAlwaysVisible','battleProjectiles','CmdIconFight','createDigits','ceil','CriticalHitRate','message1','ActSeq_Animation_AttackAnimation','%1StartTurnJS','shift','floatBattler','ActSeq_Set_FinishAction','isForRandomBattleCore','HpGaugeOffsetX','alagh','ATCym','ParseArmorNotetags','svShadow','setupShockwaveImpactFilter','JS\x20BATTLE\x20DEFEAT'];const _0x534c3a=_0xdbc5;(function(_0x3e6c63,_0x39535f){const _0x197c5c=_0xdbc5;while(!![]){try{const _0x435d08=-parseInt(_0x197c5c(0x5e1))*-parseInt(_0x197c5c(0x672))+parseInt(_0x197c5c(0xa7e))*parseInt(_0x197c5c(0x2ed))+-parseInt(_0x197c5c(0x6f2))+-parseInt(_0x197c5c(0x5bd))*-parseInt(_0x197c5c(0x125))+-parseInt(_0x197c5c(0x76e))*parseInt(_0x197c5c(0x8b2))+parseInt(_0x197c5c(0x106))+parseInt(_0x197c5c(0x6c8))*parseInt(_0x197c5c(0x26c));if(_0x435d08===_0x39535f)break;else _0x3e6c63['push'](_0x3e6c63['shift']());}catch(_0x3feaa9){_0x3e6c63['push'](_0x3e6c63['shift']());}}}(_0x28c1,0x7cc4b));var label='BattleCore',tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x31e091){const _0x173e18=_0xdbc5;return _0x31e091[_0x173e18(0x14d)]&&_0x31e091[_0x173e18(0x5fd)]['includes']('['+label+']');})[0x0];VisuMZ[label][_0x534c3a(0x795)]=VisuMZ[label][_0x534c3a(0x795)]||{},VisuMZ['ConvertParams']=function(_0x5626ce,_0x44a650){const _0x5c240e=_0x534c3a;for(const _0x35c1b3 in _0x44a650){if(_0x35c1b3[_0x5c240e(0x5ed)](/(.*):(.*)/i)){if(_0x5c240e(0x6b8)===_0x5c240e(0x6b8)){const _0x1238d7=String(RegExp['$1']),_0x326a29=String(RegExp['$2'])[_0x5c240e(0x2ca)]()[_0x5c240e(0x5a9)]();let _0x5c6040,_0xa3082c,_0x84a545;switch(_0x326a29){case _0x5c240e(0x436):_0x5c6040=_0x44a650[_0x35c1b3]!==''?Number(_0x44a650[_0x35c1b3]):0x0;break;case _0x5c240e(0x116):_0xa3082c=_0x44a650[_0x35c1b3]!==''?JSON[_0x5c240e(0x610)](_0x44a650[_0x35c1b3]):[],_0x5c6040=_0xa3082c['map'](_0x130d71=>Number(_0x130d71));break;case _0x5c240e(0x8ec):_0x5c6040=_0x44a650[_0x35c1b3]!==''?eval(_0x44a650[_0x35c1b3]):null;break;case _0x5c240e(0x90b):_0xa3082c=_0x44a650[_0x35c1b3]!==''?JSON[_0x5c240e(0x610)](_0x44a650[_0x35c1b3]):[],_0x5c6040=_0xa3082c['map'](_0x3add9c=>eval(_0x3add9c));break;case _0x5c240e(0x55f):_0x5c6040=_0x44a650[_0x35c1b3]!==''?JSON[_0x5c240e(0x610)](_0x44a650[_0x35c1b3]):'';break;case _0x5c240e(0x70d):_0xa3082c=_0x44a650[_0x35c1b3]!==''?JSON[_0x5c240e(0x610)](_0x44a650[_0x35c1b3]):[],_0x5c6040=_0xa3082c[_0x5c240e(0x406)](_0x2b979c=>JSON[_0x5c240e(0x610)](_0x2b979c));break;case _0x5c240e(0x84a):_0x5c6040=_0x44a650[_0x35c1b3]!==''?new Function(JSON['parse'](_0x44a650[_0x35c1b3])):new Function('return\x200');break;case _0x5c240e(0x3ae):_0xa3082c=_0x44a650[_0x35c1b3]!==''?JSON[_0x5c240e(0x610)](_0x44a650[_0x35c1b3]):[],_0x5c6040=_0xa3082c[_0x5c240e(0x406)](_0x1310a5=>new Function(JSON[_0x5c240e(0x610)](_0x1310a5)));break;case _0x5c240e(0x701):_0x5c6040=_0x44a650[_0x35c1b3]!==''?String(_0x44a650[_0x35c1b3]):'';break;case'ARRAYSTR':_0xa3082c=_0x44a650[_0x35c1b3]!==''?JSON[_0x5c240e(0x610)](_0x44a650[_0x35c1b3]):[],_0x5c6040=_0xa3082c[_0x5c240e(0x406)](_0x5d629e=>String(_0x5d629e));break;case _0x5c240e(0x5a5):_0x84a545=_0x44a650[_0x35c1b3]!==''?JSON[_0x5c240e(0x610)](_0x44a650[_0x35c1b3]):{},_0x5626ce[_0x1238d7]={},VisuMZ[_0x5c240e(0x96b)](_0x5626ce[_0x1238d7],_0x84a545);continue;case _0x5c240e(0x4b8):_0xa3082c=_0x44a650[_0x35c1b3]!==''?JSON['parse'](_0x44a650[_0x35c1b3]):[],_0x5c6040=_0xa3082c['map'](_0x3eef2a=>VisuMZ[_0x5c240e(0x96b)]({},JSON[_0x5c240e(0x610)](_0x3eef2a)));break;default:continue;}_0x5626ce[_0x1238d7]=_0x5c6040;}else{function _0x539b90(){const _0x4fb7fd=_0x5c240e;if(this[_0x4fb7fd(0x5a1)]()){if(this[_0x4fb7fd(0x107)]()>=0x1)return!![];return this['svBattlerData']()[_0x4fb7fd(0x80d)];}else return!![];}}}}return _0x5626ce;},(_0x4ad4cf=>{const _0xbe6b4a=_0x534c3a,_0x42ed40=_0x4ad4cf['name'];for(const _0x46b998 of dependencies){if(!Imported[_0x46b998]){alert(_0xbe6b4a(0x9ce)['format'](_0x42ed40,_0x46b998)),SceneManager[_0xbe6b4a(0x445)]();break;}}const _0x107487=_0x4ad4cf['description'];if(_0x107487[_0xbe6b4a(0x5ed)](/\[Version[ ](.*?)\]/i)){const _0x1f9214=Number(RegExp['$1']);_0x1f9214!==VisuMZ[label][_0xbe6b4a(0x89e)]&&(alert(_0xbe6b4a(0x724)[_0xbe6b4a(0x8e9)](_0x42ed40,_0x1f9214)),SceneManager[_0xbe6b4a(0x445)]());}if(_0x107487[_0xbe6b4a(0x5ed)](/\[Tier[ ](\d+)\]/i)){if('yiUgN'==='yiUgN'){const _0x5070d8=Number(RegExp['$1']);_0x5070d8<tier?(alert(_0xbe6b4a(0x89d)[_0xbe6b4a(0x8e9)](_0x42ed40,_0x5070d8,tier)),SceneManager[_0xbe6b4a(0x445)]()):tier=Math[_0xbe6b4a(0x9a7)](_0x5070d8,tier);}else{function _0x24b2e1(){const _0x3fd94f=_0xbe6b4a;_0x5e3e9f[_0x3fd94f(0x76b)]['_statusWindow'][_0x3fd94f(0x8ad)](_0x4add37,this[_0x3fd94f(0x679)]);}}}VisuMZ[_0xbe6b4a(0x96b)](VisuMZ[label][_0xbe6b4a(0x795)],_0x4ad4cf[_0xbe6b4a(0xa02)]);})(pluginData),VisuMZ[_0x534c3a(0x128)]=function(_0xcd9fb){const _0x404891=_0x534c3a;let _0x311c29=[];for(const _0x2cbbe1 of _0xcd9fb){_0x311c29=_0x311c29[_0x404891(0x34b)](VisuMZ[_0x404891(0xa9c)](_0x2cbbe1));}return _0x311c29[_0x404891(0x193)](_0x40cb79=>_0x40cb79);},VisuMZ['ConvertActionSequenceTarget']=function(_0x1ef154){const _0x11511a=_0x534c3a,_0x194240=BattleManager[_0x11511a(0x120)]()[_0x11511a(0x193)](_0x3e4685=>_0x3e4685&&_0x3e4685['isAppeared']()),_0x4fc7a3=BattleManager[_0x11511a(0x90c)],_0x426765=BattleManager['_target'],_0x4cda6c=BattleManager[_0x11511a(0xa73)]?BattleManager[_0x11511a(0xa73)][_0x11511a(0x5d8)](0x0):_0x194240;_0x1ef154=_0x1ef154[_0x11511a(0x6c5)]()[_0x11511a(0x5a9)]();if(_0x1ef154==='user')return[_0x4fc7a3];else{if(_0x1ef154===_0x11511a(0x100))return[_0x426765];else{if(_0x1ef154===_0x11511a(0x60d)){if(_0x426765){if(_0x11511a(0x830)!=='MMuov'){function _0x31043a(){const _0x10a472=_0x11511a;_0x227df3['prototype']['drawItem'][_0x10a472(0x63a)](this,_0x37f670);}}else{const _0x5e4ab4=_0x4cda6c[_0x11511a(0xaa8)](_0x426765);return _0x5e4ab4>=0x0?[_0x4cda6c[_0x5e4ab4-0x1]||_0x426765]:[_0x426765];}}}else{if(_0x1ef154===_0x11511a(0x5e4)){if(_0x426765){if(_0x11511a(0x77f)!==_0x11511a(0x77f)){function _0x53bc1d(){const _0x2c4f32=_0x11511a;return _0x42aa18['BattleCore'][_0x2c4f32(0x795)]['PartyCmd']['CmdTextAlign'];}}else{const _0x380772=_0x4cda6c[_0x11511a(0xaa8)](_0x426765);return _0x380772>=0x0?[_0x4cda6c[_0x380772+0x1]||_0x426765]:[_0x426765];}}}else{if(_0x1ef154===_0x11511a(0x50b)){if(_0x11511a(0x169)!=='CxHyt'){function _0x61d4a4(){const _0x215675=_0x11511a;if(this['_floatDuration']<=0x0)return;const _0x198bbb=this[_0x215675(0x72e)],_0x506ae9=this[_0x215675(0x11b)],_0x181e3a=this['_floatEasing'];_0x4952b6[_0x215675(0x9fc)]?this['_floatHeight']=this[_0x215675(0x4a0)](this[_0x215675(0x67b)],this[_0x215675(0x3a6)],_0x198bbb,_0x506ae9,_0x181e3a):this['_floatHeight']=(this['_floatHeight']*(_0x198bbb-0x1)+this['_targetFloatHeight'])/_0x198bbb;this[_0x215675(0x72e)]--;if(this[_0x215675(0x72e)]<=0x0)this[_0x215675(0x8a4)]();}}else return _0x4cda6c;}else{if(_0x1ef154===_0x11511a(0x85d))return[_0x4fc7a3][_0x11511a(0x34b)](_0x4cda6c);else{if(_0x1ef154==='not\x20focus')return _0x194240[_0x11511a(0x193)](_0x5370a6=>_0x5370a6!==_0x4fc7a3&&!_0x4cda6c[_0x11511a(0x96f)](_0x5370a6)&&_0x5370a6['notFocusValid']());}}}}}}if(_0x4fc7a3){if('uXAZy'!==_0x11511a(0x7e1)){function _0x1d2d31(){const _0x2886f5=_0x11511a;_0x587f04[_0x2886f5(0x53c)][_0x2886f5(0x4e3)][_0x2886f5(0x63a)](this);const _0x57bb14=this['battleLayoutStyle']();_0x57bb14===_0x2886f5(0x4a4)&&this[_0x2886f5(0x2f0)]();}}else{if(_0x1ef154===_0x11511a(0x1ba))return _0x4fc7a3['friendsUnit']()[_0x11511a(0x2b8)]();else{if(_0x1ef154===_0x11511a(0x13c))return _0x4fc7a3[_0x11511a(0xa6e)]()[_0x11511a(0x2b8)]()[_0x11511a(0x193)](_0x5a938c=>_0x5a938c!==_0x4fc7a3);else{if(_0x1ef154==='alive\x20friends\x20not\x20target')return _0x4fc7a3[_0x11511a(0xa6e)]()[_0x11511a(0x2b8)]()[_0x11511a(0x193)](_0x24af33=>_0x24af33!==_0x426765);else{if(_0x1ef154===_0x11511a(0x10b)){if('YarVR'!==_0x11511a(0x3db)){function _0x7cf1cc(){const _0x23f8fe=_0x11511a;return _0x1d340f[_0x23f8fe(0x210)](this),_0x216bd1['BattleCore'][_0x23f8fe(0x4a6)][_0x23f8fe(0x63a)](this,_0x5c8009);}}else return _0x4fc7a3[_0x11511a(0xa6e)]()[_0x11511a(0xaa9)]();}else{if(_0x1ef154['match'](/FRIEND INDEX (\d+)/i)){const _0x5002bd=Number(RegExp['$1']);return[_0x4fc7a3['friendsUnit']()['members']()[_0x5002bd]];}}}}}if(_0x1ef154==='alive\x20opponents'){if(_0x11511a(0x562)!==_0x11511a(0x562)){function _0x1e6e02(){const _0x7f999f=_0x11511a,_0x4430e5=_0x4452fb(_0x50e7fe['$1'])[_0x7f999f(0x5a9)](),_0x27bedc=_0x15483a(_0x4f6bd8['$2']);_0x47310d[_0x4430e5]=_0x27bedc,_0x5048cf+=_0x27bedc;}}else return _0x4fc7a3['opponentsUnit']()['aliveMembers']();}else{if(_0x1ef154===_0x11511a(0x49c))return _0x4fc7a3[_0x11511a(0x621)]()[_0x11511a(0x2b8)]()[_0x11511a(0x193)](_0x42c6d7=>_0x42c6d7!==_0x426765);else{if(_0x1ef154==='dead\x20opponents'){if(_0x11511a(0x574)===_0x11511a(0x934)){function _0x219dc1(){const _0x18e6bb=_0x11511a;this['_growX']=(this[_0x18e6bb(0x870)]*(_0x12b584-0x1)+this['_targetGrowX'])/_0x305cdd,this['_growY']=(this[_0x18e6bb(0x4db)]*(_0x4e6c24-0x1)+this[_0x18e6bb(0x92f)])/_0x735e3e;}}else return _0x4fc7a3[_0x11511a(0x621)]()[_0x11511a(0xaa9)]();}else{if(_0x1ef154[_0x11511a(0x5ed)](/OPPONENT INDEX (\d+)/i)){if('TaKZf'!==_0x11511a(0x9f9)){function _0x142635(){this['endAction']();}}else{const _0x24bc85=Number(RegExp['$1']);return[_0x4fc7a3[_0x11511a(0x621)]()[_0x11511a(0x8a8)]()[_0x24bc85]];}}}}}}}if(_0x1ef154===_0x11511a(0x777))return $gameParty[_0x11511a(0x2b8)]();else{if(_0x1ef154===_0x11511a(0x165))return $gameParty[_0x11511a(0x2b8)]()['filter'](_0x4a0550=>_0x4a0550!==_0x4fc7a3);else{if(_0x1ef154===_0x11511a(0x631))return $gameParty[_0x11511a(0x2b8)]()[_0x11511a(0x193)](_0x342cc2=>_0x342cc2!==_0x426765);else{if(_0x1ef154===_0x11511a(0x1a3))return $gameParty[_0x11511a(0xaa9)]();else{if(_0x1ef154[_0x11511a(0x5ed)](/ACTOR INDEX (\d+)/i)){if(_0x11511a(0xa3f)===_0x11511a(0xa3f)){const _0x2ace1f=Number(RegExp['$1']);return[$gameParty[_0x11511a(0x8a8)]()[_0x2ace1f]];}else{function _0x5a367b(){const _0x44df78=_0x11511a;this[_0x44df78(0x3ba)]('popBaseLine'),this['push'](_0x44df78(0x83a)),this[_0x44df78(0x3ba)](_0x44df78(0x87c),_0x3887d8['message4'][_0x44df78(0x8e9)](_0xdcf9e['name']())),this[_0x44df78(0x3ba)](_0x44df78(0x41c));}}}else{if(_0x1ef154[_0x11511a(0x5ed)](/ACTOR ID (\d+)/i)){const _0x2c442a=Number(RegExp['$1']);return[$gameActors['actor'](_0x2c442a)];}}}}}}if(_0x1ef154===_0x11511a(0x274)){if('uNKAn'===_0x11511a(0x680))return $gameTroop[_0x11511a(0x2b8)]();else{function _0xfd81da(){const _0x47a8cc=_0x11511a;if(!_0x4d5dc5)return![];return _0x3772db[_0x47a8cc(0xa3a)]===0x0||_0xb0b14b[_0x47a8cc(0xa3a)]===0x1;}}}else{if(_0x1ef154===_0x11511a(0x4ac))return $gameTroop[_0x11511a(0x2b8)]()[_0x11511a(0x193)](_0x3ee15e=>_0x3ee15e!==_0x4fc7a3);else{if(_0x1ef154===_0x11511a(0x62f)){if(_0x11511a(0x39b)===_0x11511a(0xa58)){function _0x352b43(){const _0x61c5a7=_0x11511a;_0x3c7b0f['BattleCore'][_0x61c5a7(0x2f7)]['call'](this,_0x3c04ac),this[_0x61c5a7(0x10c)]();}}else return $gameTroop[_0x11511a(0x2b8)]()[_0x11511a(0x193)](_0x3dc200=>_0x3dc200!==_0x426765);}else{if(_0x1ef154===_0x11511a(0x353))return $gameTroop[_0x11511a(0xaa9)]();else{if(_0x1ef154['match'](/ENEMY INDEX (\d+)/i)){const _0x5715f9=Number(RegExp['$1']);return[$gameTroop[_0x11511a(0x8a8)]()[_0x5715f9]];}else{if(_0x1ef154['match'](/ENEMY ID (\d+)/i)){if(_0x11511a(0x75b)!==_0x11511a(0x75b)){function _0xd89371(){const _0x5e315b=_0x11511a;return this[_0x5e315b(0x6d6)]>0x0;}}else{const _0x24596a=Number(RegExp['$1']);return $gameTroop[_0x11511a(0x2b8)]()['filter'](_0x2fcf6c=>_0x2fcf6c[_0x11511a(0x3cb)]()===_0x24596a);}}}}}}}if(_0x1ef154===_0x11511a(0x59a))return _0x194240[_0x11511a(0x193)](_0x54b3dc=>_0x54b3dc[_0x11511a(0x582)]());else{if(_0x1ef154===_0x11511a(0x8dc)){if(_0x11511a(0x67a)===_0x11511a(0x2a4)){function _0x3ea1ef(){const _0x583e2e=_0x11511a,_0x2dfa6d=this[_0x583e2e(0x1d5)]();['xp',_0x583e2e(0x1ab),_0x583e2e(0x4a4)][_0x583e2e(0x96f)](_0x2dfa6d)&&this[_0x583e2e(0x223)][_0x583e2e(0x4d4)](),this[_0x583e2e(0x5d5)]();}}else return _0x194240[_0x11511a(0x193)](_0x31253d=>_0x31253d[_0x11511a(0x582)]()&&_0x31253d!==_0x4fc7a3);}else{if(_0x1ef154===_0x11511a(0x78b)){if(_0x11511a(0x38e)===_0x11511a(0x80e)){function _0x545736(){const _0x43e340=_0x11511a;this['addBattleCoreAutoBattleStartupCommand'](),this[_0x43e340(0x408)]();}}else return _0x194240[_0x11511a(0x193)](_0x58513b=>_0x58513b[_0x11511a(0x582)]()&&_0x58513b!==_0x426765);}else{if(_0x1ef154==='dead\x20battlers')return _0x194240[_0x11511a(0x193)](_0xdc1ec6=>_0xdc1ec6[_0x11511a(0x43f)]());}}}return[];},PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x8f6),_0x18b47f=>{const _0x5e79ff=_0x534c3a;if(!SceneManager[_0x5e79ff(0xa8a)]())return;VisuMZ[_0x5e79ff(0x96b)](_0x18b47f,_0x18b47f);const _0x2504f0=$gameTemp[_0x5e79ff(0xa1d)](),_0x14846c=BattleManager[_0x5e79ff(0x46a)],_0x2cbf68=BattleManager['_subject'],_0x36923a=BattleManager[_0x5e79ff(0xa73)]?BattleManager[_0x5e79ff(0xa73)]['slice'](0x0):[],_0x21f69e=BattleManager['_logWindow'];if(!_0x2504f0||!_0x14846c||!_0x2cbf68)return;if(!_0x14846c['item']())return;if(_0x18b47f['DisplayAction'])_0x21f69e[_0x5e79ff(0x17b)](_0x2cbf68,_0x14846c[_0x5e79ff(0x464)]());_0x18b47f[_0x5e79ff(0x28f)]&&_0x21f69e['push'](_0x5e79ff(0x36c),_0x2cbf68,_0x36923a,!![]);if(_0x18b47f[_0x5e79ff(0x2cb)])_0x21f69e['push'](_0x5e79ff(0x110),_0x2cbf68,_0x14846c);if(_0x18b47f[_0x5e79ff(0x8f2)])_0x21f69e[_0x5e79ff(0x3ba)](_0x5e79ff(0xd9));if(_0x18b47f[_0x5e79ff(0x84c)])_0x21f69e[_0x5e79ff(0x3ba)](_0x5e79ff(0x634),_0x2cbf68,_0x14846c);if(_0x18b47f[_0x5e79ff(0x1e9)])_0x21f69e['push'](_0x5e79ff(0x2b2));_0x2504f0[_0x5e79ff(0x387)]('battlelog');}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Set_WholeActionSet',_0xa0d7e9=>{const _0x29ca5f=_0x534c3a;if(!SceneManager[_0x29ca5f(0xa8a)]())return;VisuMZ['ConvertParams'](_0xa0d7e9,_0xa0d7e9);const _0x476b75=$gameTemp[_0x29ca5f(0xa1d)](),_0x12e9ad=BattleManager[_0x29ca5f(0x46a)],_0x4d8caf=BattleManager[_0x29ca5f(0x90c)],_0x23faf5=BattleManager[_0x29ca5f(0xa73)]?BattleManager['_allTargets'][_0x29ca5f(0x5d8)](0x0):[],_0x23710d=BattleManager['_logWindow'],_0x143825=_0xa0d7e9[_0x29ca5f(0xce)]??![];if(!_0x476b75||!_0x12e9ad||!_0x4d8caf)return;if(!_0x12e9ad[_0x29ca5f(0x464)]())return;let _0xae346=_0x143825?_0x23710d['getDualWieldTimes'](_0x4d8caf):0x1;for(let _0x1b296a=0x0;_0x1b296a<_0xae346;_0x1b296a++){if('VwYPw'===_0x29ca5f(0x1a5)){if(_0x143825&&_0x4d8caf[_0x29ca5f(0x1e7)]()){if(_0x29ca5f(0x2b1)!==_0x29ca5f(0x2b1)){function _0x396f89(){const _0x18fba0=_0x29ca5f;this[_0x18fba0(0x330)](),this[_0x18fba0(0xe5)]();}}else _0x23710d[_0x29ca5f(0x3ba)](_0x29ca5f(0x1c6),_0x4d8caf,_0x1b296a);}if(_0xa0d7e9[_0x29ca5f(0x1f8)])_0x23710d[_0x29ca5f(0x3ba)](_0x29ca5f(0xa80),_0x4d8caf,_0x12e9ad);if(_0xa0d7e9[_0x29ca5f(0x6fa)]>0x0)_0x23710d[_0x29ca5f(0x3ba)](_0x29ca5f(0x438),_0xa0d7e9[_0x29ca5f(0x6fa)]);if(_0xa0d7e9[_0x29ca5f(0x56f)])_0x23710d[_0x29ca5f(0x3ba)](_0x29ca5f(0x126),_0x4d8caf,_0x23faf5,_0x12e9ad[_0x29ca5f(0x464)]()['animationId']);if(_0xa0d7e9['WaitForAnimation'])_0x23710d[_0x29ca5f(0x3ba)](_0x29ca5f(0x2b2));for(const _0x4fbb93 of _0x23faf5){if(!_0x4fbb93)continue;if(_0xa0d7e9[_0x29ca5f(0x797)])_0x23710d[_0x29ca5f(0x3ba)](_0x29ca5f(0x3d3),_0x4d8caf,_0x4fbb93);}}else{function _0x55e83b(){const _0x4a82ca=_0x29ca5f;if(!_0x21c5a5['_autoBattle'])return;(_0x13dd8c[_0x4a82ca(0x599)]('ok')||_0x4c8794[_0x4a82ca(0x599)](_0x4a82ca(0x366))||_0x51abf2[_0x4a82ca(0x3cc)]()||_0x11f64a[_0x4a82ca(0x4b4)]())&&(_0x363a2f[_0x4a82ca(0x131)](),_0x48111b[_0x4a82ca(0x253)]=![],_0x53f6dc[_0x4a82ca(0x48e)](),_0x428939[_0x4a82ca(0x48e)]());}}}if(_0x143825&&_0x4d8caf[_0x29ca5f(0x1e7)]()){if(_0x29ca5f(0x452)!==_0x29ca5f(0x452)){function _0xe5b1af(){_0xa0c0be['performAttackSlot'](_0x4e6a4f(_0x52c3ff['$1']));}}else _0x23710d[_0x29ca5f(0x3ba)](_0x29ca5f(0x64c),_0x4d8caf);}if(_0xa0d7e9[_0x29ca5f(0x28f)])_0x23710d[_0x29ca5f(0x3ba)](_0x29ca5f(0x36c),_0x4d8caf,_0x23faf5,![]);_0x476b75['setWaitMode'](_0x29ca5f(0x2d4));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x6b6),_0x3747f7=>{const _0x3894c1=_0x534c3a;if(!SceneManager[_0x3894c1(0xa8a)]())return;VisuMZ[_0x3894c1(0x96b)](_0x3747f7,_0x3747f7);const _0x3eda63=$gameTemp[_0x3894c1(0xa1d)](),_0x36dae0=BattleManager['_action'],_0x38dba2=BattleManager['_subject'],_0x535f1e=BattleManager[_0x3894c1(0xa73)]?BattleManager[_0x3894c1(0xa73)][_0x3894c1(0x5d8)](0x0):[],_0x146265=BattleManager[_0x3894c1(0xa5c)],_0x2a4fa2=_0x3747f7[_0x3894c1(0xce)]??![];if(!_0x3eda63||!_0x36dae0||!_0x38dba2)return;if(!_0x36dae0[_0x3894c1(0x464)]())return;let _0x52704a=_0x2a4fa2?_0x146265[_0x3894c1(0x565)](_0x38dba2):0x1;for(let _0x5e759b=0x0;_0x5e759b<_0x52704a;_0x5e759b++){for(const _0x498a9e of _0x535f1e){if(!_0x498a9e)continue;_0x2a4fa2&&_0x38dba2[_0x3894c1(0x1e7)]()&&_0x146265[_0x3894c1(0x3ba)](_0x3894c1(0x1c6),_0x38dba2,_0x5e759b);if(_0x3747f7[_0x3894c1(0x1f8)])_0x146265['push'](_0x3894c1(0xa80),_0x38dba2,_0x36dae0);if(_0x3747f7[_0x3894c1(0x7c8)]>0x0)_0x146265['push'](_0x3894c1(0x438),_0x3747f7[_0x3894c1(0x7c8)]);if(_0x3747f7['ActionAnimation'])_0x146265[_0x3894c1(0x3ba)](_0x3894c1(0x126),_0x38dba2,[_0x498a9e],_0x36dae0[_0x3894c1(0x464)]()[_0x3894c1(0xf6)]);if(_0x3747f7[_0x3894c1(0x853)]>0x0)_0x146265[_0x3894c1(0x3ba)](_0x3894c1(0x438),_0x3747f7[_0x3894c1(0x853)]);if(_0x3747f7['ActionEffect'])_0x146265[_0x3894c1(0x3ba)](_0x3894c1(0x3d3),_0x38dba2,_0x498a9e);}}if(_0x2a4fa2&&_0x38dba2['isActor']()){if(_0x3894c1(0x8c1)===_0x3894c1(0x8c1))_0x146265['push'](_0x3894c1(0x64c),_0x38dba2);else{function _0x4b0807(){const _0x20fbf8=_0x3894c1;this[_0x20fbf8(0x1bc)]('abnormal');}}}if(_0x3747f7[_0x3894c1(0x28f)])_0x146265[_0x3894c1(0x3ba)](_0x3894c1(0x36c),_0x38dba2,_0x535f1e,![]);_0x3eda63[_0x3894c1(0x387)](_0x3894c1(0x2d4));}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0x8be),_0x471d8b=>{const _0x2c1df8=_0x534c3a;if(!SceneManager[_0x2c1df8(0xa8a)]())return;VisuMZ[_0x2c1df8(0x96b)](_0x471d8b,_0x471d8b);const _0x465d52=$gameTemp[_0x2c1df8(0xa1d)](),_0x13cddc=BattleManager[_0x2c1df8(0x46a)],_0x258d05=BattleManager[_0x2c1df8(0x90c)],_0x69d702=BattleManager['_allTargets']?BattleManager[_0x2c1df8(0xa73)][_0x2c1df8(0x5d8)](0x0):[],_0x38c81f=BattleManager[_0x2c1df8(0xa5c)];if(!_0x465d52||!_0x13cddc||!_0x258d05)return;if(!_0x13cddc[_0x2c1df8(0x464)]())return;if(_0x471d8b[_0x2c1df8(0x28f)])_0x38c81f[_0x2c1df8(0x3ba)](_0x2c1df8(0x36c),_0x258d05,_0x69d702,![]);if(_0x471d8b[_0x2c1df8(0x417)])_0x38c81f['push'](_0x2c1df8(0x4e2));if(_0x471d8b[_0x2c1df8(0x801)])_0x38c81f[_0x2c1df8(0x3ba)]('waitForEffect');if(_0x471d8b[_0x2c1df8(0xa56)])_0x38c81f['push']('clear');if(_0x471d8b[_0x2c1df8(0x68e)])_0x38c81f[_0x2c1df8(0x3ba)](_0x2c1df8(0x4ad),_0x258d05);if(_0x471d8b[_0x2c1df8(0x8f2)])_0x38c81f[_0x2c1df8(0x3ba)](_0x2c1df8(0xd9));_0x465d52[_0x2c1df8(0x387)]('battlelog');}),PluginManager[_0x534c3a(0x260)](pluginData['name'],'ActSeq_ChangeAngle',_0x3402ad=>{const _0x2d4a60=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2d4a60(0x3b6)])return;VisuMZ['ConvertParams'](_0x3402ad,_0x3402ad);const _0x40863c=$gameTemp[_0x2d4a60(0xa1d)](),_0x23d971=_0x3402ad['WaitForAngle'];if(!_0x40863c)return;$gameScreen['setBattleAngle'](_0x3402ad['Angle'],_0x3402ad[_0x2d4a60(0x969)],_0x3402ad[_0x2d4a60(0x2a9)]);if(_0x23d971)_0x40863c[_0x2d4a60(0x387)](_0x2d4a60(0x74c));}),PluginManager[_0x534c3a(0x260)](pluginData['name'],'ActSeq_Angle_Reset',_0xf5dd2c=>{const _0x27d099=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x27d099(0x3b6)])return;VisuMZ[_0x27d099(0x96b)](_0xf5dd2c,_0xf5dd2c);const _0x3e605a=$gameTemp[_0x27d099(0xa1d)](),_0x1c77b5=_0xf5dd2c[_0x27d099(0x92b)];if(!_0x3e605a)return;$gameScreen[_0x27d099(0x866)](0x0,_0xf5dd2c[_0x27d099(0x969)],_0xf5dd2c[_0x27d099(0x2a9)]);if(_0x1c77b5)_0x3e605a[_0x27d099(0x387)](_0x27d099(0x74c));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x21d),_0x4ad849=>{const _0x33cc49=_0x534c3a;if(!SceneManager[_0x33cc49(0xa8a)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x593bf3=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x593bf3)return;_0x593bf3[_0x33cc49(0x387)](_0x33cc49(0x74c));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Animation_ActionAnimation',_0x2a00d9=>{const _0x88c87f=_0x534c3a;if(!SceneManager[_0x88c87f(0xa8a)]())return;VisuMZ[_0x88c87f(0x96b)](_0x2a00d9,_0x2a00d9);const _0x68094c=$gameTemp[_0x88c87f(0xa1d)](),_0x54fcdd=BattleManager[_0x88c87f(0x46a)],_0x1bf88a=BattleManager['_subject'],_0x1b5b7f=VisuMZ['CreateActionSequenceTargets'](_0x2a00d9[_0x88c87f(0x689)]),_0x4432dd=_0x2a00d9[_0x88c87f(0x423)],_0x417c03=BattleManager[_0x88c87f(0xa5c)];if(!_0x68094c||!_0x54fcdd||!_0x1bf88a)return;if(!_0x54fcdd['item']())return;let _0x4c349c=_0x54fcdd['item']()[_0x88c87f(0xf6)];if(_0x4c349c<0x0)_0x4c349c=_0x1bf88a[_0x88c87f(0x618)]();$gameTemp['requestAnimation'](_0x1b5b7f,_0x4c349c,_0x4432dd);if(_0x2a00d9['WaitForAnimation']){if(_0x88c87f(0x731)!==_0x88c87f(0x5ec))_0x68094c[_0x88c87f(0x387)](_0x88c87f(0x6a8));else{function _0x5ab131(){const _0xd83ffc=_0x88c87f;this[_0xd83ffc(0x78e)]();}}}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x8ba),_0x14f7fd=>{const _0x4aca86=_0x534c3a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4aca86(0x96b)](_0x14f7fd,_0x14f7fd);const _0x4a0b12=$gameTemp[_0x4aca86(0xa1d)](),_0x2b62d7=BattleManager[_0x4aca86(0x90c)],_0xb7c6f=VisuMZ[_0x4aca86(0x128)](_0x14f7fd[_0x4aca86(0x689)]),_0x4abf96=_0x14f7fd['Mirror'],_0x21db82=BattleManager[_0x4aca86(0xa5c)];if(!_0x4a0b12||!_0x2b62d7)return;const _0x5ba7ca=_0x2b62d7[_0x4aca86(0x618)]();$gameTemp[_0x4aca86(0x8f0)](_0xb7c6f,_0x5ba7ca,_0x4abf96);if(_0x14f7fd['WaitForAnimation']){if('itdoR'!==_0x4aca86(0x9cc)){function _0x29b9dd(){const _0x167e67=_0x4aca86;_0x23e6c6[_0x167e67(0x99e)][_0x167e67(0x70f)]['call'](this),this[_0x167e67(0x420)]();}}else _0x4a0b12[_0x4aca86(0x387)](_0x4aca86(0x6a8));}}),PluginManager[_0x534c3a(0x260)](pluginData['name'],'ActSeq_Animation_AttackAnimation2',_0x34e5eb=>{const _0x23c76c=_0x534c3a;if(!SceneManager[_0x23c76c(0xa8a)]())return;VisuMZ[_0x23c76c(0x96b)](_0x34e5eb,_0x34e5eb);const _0x35c965=_0x485f17[_0x23c76c(0x3b1)](_0x34e5eb[_0x23c76c(0x7ab)]);if(_0x35c965<=0x0)return;const _0x3b5658=$gameTemp['getLastPluginCommandInterpreter'](),_0x485f17=BattleManager['_subject'],_0x2cde91=VisuMZ[_0x23c76c(0x128)](_0x34e5eb['Targets']),_0x36749d=_0x34e5eb[_0x23c76c(0x423)],_0x300caf=BattleManager['_logWindow'];if(!_0x3b5658||!_0x485f17)return;$gameTemp['requestAnimation'](_0x2cde91,_0x35c965,_0x36749d),_0x34e5eb['WaitForAnimation']&&_0x3b5658[_0x23c76c(0x387)](_0x23c76c(0x6a8));}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0x414),_0x46a6cd=>{const _0x91464b=_0x534c3a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x46a6cd,_0x46a6cd);const _0x510c8d=$gameTemp[_0x91464b(0xa1d)](),_0xd2567c=BattleManager[_0x91464b(0x46a)],_0x82db6f=_0x46a6cd['Mirror'],_0x1b5e00=VisuMZ[_0x91464b(0x128)](_0x46a6cd[_0x91464b(0x689)]);if(!_0x510c8d||!_0xd2567c)return;if(!_0xd2567c[_0x91464b(0x464)]())return;for(const _0x1dadb1 of _0x1b5e00){if(_0x91464b(0x5f9)===_0x91464b(0x7c7)){function _0xbfe1fd(){const _0x486937=_0x91464b;_0x2f3cd0&&_0x152e8d[_0x486937(0x1e7)]()&&_0x97dced[_0x486937(0x5cf)](),this[_0x486937(0x10c)]();}}else{if(!_0x1dadb1)continue;_0x1dadb1[_0x91464b(0x634)](_0xd2567c,_0x82db6f);}}if(_0x46a6cd['WaitForAnimation'])_0x510c8d['setWaitMode'](_0x91464b(0x6a8));}),PluginManager[_0x534c3a(0x260)](pluginData['name'],'ActSeq_Animation_ChangeBattlePortrait',_0x38c86e=>{const _0x40b383=_0x534c3a;VisuMZ[_0x40b383(0x96b)](_0x38c86e,_0x38c86e);const _0x455fde=$gameTemp[_0x40b383(0xa1d)](),_0xfb858a=VisuMZ[_0x40b383(0x128)](_0x38c86e[_0x40b383(0x689)]),_0x122608=_0x38c86e[_0x40b383(0x23b)];if(!_0x122608)return;for(const _0x333345 of _0xfb858a){if(!_0x333345)continue;if(!_0x333345[_0x40b383(0x1e7)]())continue;_0x333345[_0x40b383(0x270)](_0x122608);}}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],'ActSeq_Animation_ShowAnimation',_0x4b125e=>{const _0x2e1ac0=_0x534c3a;if(!SceneManager[_0x2e1ac0(0xa8a)]())return;VisuMZ[_0x2e1ac0(0x96b)](_0x4b125e,_0x4b125e);const _0x1f5de8=$gameTemp[_0x2e1ac0(0xa1d)](),_0x5ca716=VisuMZ['CreateActionSequenceTargets'](_0x4b125e['Targets']),_0x5c8363=_0x4b125e['AnimationID'],_0xb841b5=_0x4b125e['Mirror'];if(!_0x1f5de8)return;$gameTemp[_0x2e1ac0(0x8f0)](_0x5ca716,_0x5c8363,_0xb841b5);if(_0x4b125e['WaitForAnimation'])_0x1f5de8[_0x2e1ac0(0x387)]('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0x5ea),_0x4d916e=>{const _0x33f139=_0x534c3a;if(!SceneManager[_0x33f139(0xa8a)]())return;const _0x4d5d33=$gameTemp[_0x33f139(0xa1d)]();if(!_0x4d5d33)return;_0x4d5d33[_0x33f139(0x387)](_0x33f139(0x6a8));}),PluginManager[_0x534c3a(0x260)](pluginData['name'],'ActSeq_BattleLog_AddText',_0x144397=>{const _0x423f77=_0x534c3a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x423f77(0x96b)](_0x144397,_0x144397);const _0x154130=BattleManager[_0x423f77(0xa5c)],_0x113dc7=_0x144397[_0x423f77(0x501)]&&Imported['VisuMZ_4_CombatLog'];_0x154130[_0x423f77(0x87c)](_0x144397['Text']),_0x113dc7&&Imported[_0x423f77(0x176)]&&$gameSystem['addTextToCombatLog'](_0x144397['Text']||'',_0x144397[_0x423f77(0x901)]||0x0);}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x541),_0x492328=>{const _0x29f520=_0x534c3a;if(!SceneManager[_0x29f520(0xa8a)]())return;const _0x295eec=BattleManager[_0x29f520(0xa5c)];_0x295eec[_0x29f520(0x48e)]();}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_BattleLog_DisplayAction',_0x27b656=>{const _0x29f446=_0x534c3a;if(!SceneManager[_0x29f446(0xa8a)]())return;const _0x475a79=$gameTemp[_0x29f446(0xa1d)](),_0x2a2525=BattleManager['_action'],_0x302775=BattleManager[_0x29f446(0x90c)],_0x4ae3a9=BattleManager[_0x29f446(0xa5c)];if(!_0x475a79||!_0x2a2525||!_0x302775)return;if(!_0x2a2525[_0x29f446(0x464)]())return;_0x4ae3a9[_0x29f446(0x17b)](_0x302775,_0x2a2525[_0x29f446(0x464)]()),_0x475a79['setWaitMode'](_0x29f446(0x2d4));}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0x931),_0x43731c=>{const _0x1c312d=_0x534c3a;if(!SceneManager[_0x1c312d(0xa8a)]())return;const _0xaa10a1=BattleManager[_0x1c312d(0xa5c)];_0xaa10a1[_0x1c312d(0xa17)]();}),PluginManager['registerCommand'](pluginData['name'],_0x534c3a(0x1f0),_0x38e7a2=>{const _0x348124=_0x534c3a;if(!SceneManager[_0x348124(0xa8a)]())return;const _0x28a39f=BattleManager['_logWindow'];_0x28a39f[_0x348124(0x83a)]();}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_BattleLog_Refresh',_0x2372f4=>{const _0x231fc4=_0x534c3a;if(!SceneManager['isSceneBattle']())return;const _0x4932b7=BattleManager[_0x231fc4(0xa5c)];_0x4932b7[_0x231fc4(0x9b7)]();}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],'ActSeq_BattleLog_UI',_0x3a3f27=>{const _0x103826=_0x534c3a;if(!SceneManager[_0x103826(0xa8a)]())return;VisuMZ[_0x103826(0x96b)](_0x3a3f27,_0x3a3f27),SceneManager[_0x103826(0x76b)][_0x103826(0x168)](_0x3a3f27[_0x103826(0x3da)]);}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x272),_0x2dd7e3=>{const _0x1f9685=_0x534c3a;if(!SceneManager[_0x1f9685(0xa8a)]())return;const _0x548f17=$gameTemp['getLastPluginCommandInterpreter']();_0x548f17[_0x1f9685(0x387)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0xa09),_0x370f79=>{const _0x42907b=_0x534c3a;if(!SceneManager[_0x42907b(0xa8a)]())return;const _0x292f06=$gameTemp[_0x42907b(0xa1d)](),_0x42686a=BattleManager['_logWindow'];_0x42686a[_0x42907b(0x4e2)](),_0x292f06[_0x42907b(0x387)](_0x42907b(0x2d4));}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0x352),_0x5912d3=>{const _0x172908=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x172908(0x96b)](_0x5912d3,_0x5912d3);const _0x3a9154=$gameScreen[_0x172908(0x61a)]();_0x3a9154['cameraClamp']=_0x5912d3[_0x172908(0x32e)];}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x64a),_0x236d87=>{const _0x405588=_0x534c3a;if(!SceneManager[_0x405588(0xa8a)]())return;if(!Imported[_0x405588(0x3b6)])return;VisuMZ[_0x405588(0x96b)](_0x236d87,_0x236d87);const _0x52d865=$gameTemp['getLastPluginCommandInterpreter'](),_0x136d14=_0x236d87[_0x405588(0x44f)];$gameScreen['setBattleCameraPoint'](_0x236d87[_0x405588(0x978)],_0x236d87['FocusY'],_0x236d87[_0x405588(0x969)],_0x236d87['EasingType']);if(_0x136d14)_0x52d865['setWaitMode'](_0x405588(0x90a));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x93b),_0x21eb96=>{const _0x323c81=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x323c81(0x3b6)])return;VisuMZ[_0x323c81(0x96b)](_0x21eb96,_0x21eb96);const _0x3a2314=$gameTemp['getLastPluginCommandInterpreter'](),_0x156e66=VisuMZ[_0x323c81(0x128)](_0x21eb96[_0x323c81(0x689)]),_0x138217=_0x21eb96[_0x323c81(0x44f)];$gameScreen[_0x323c81(0x2c8)](_0x156e66,_0x21eb96[_0x323c81(0x969)],_0x21eb96['EasingType']);if(_0x138217)_0x3a2314['setWaitMode'](_0x323c81(0x90a));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Camera_Offset',_0x57db2c=>{const _0x330327=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x330327(0x3b6)])return;VisuMZ[_0x330327(0x96b)](_0x57db2c,_0x57db2c);const _0xbb3bc2=$gameTemp[_0x330327(0xa1d)](),_0x1e0395=_0x57db2c[_0x330327(0x44f)];$gameScreen[_0x330327(0x87e)](_0x57db2c[_0x330327(0x69d)],_0x57db2c[_0x330327(0xa49)],_0x57db2c[_0x330327(0x969)],_0x57db2c[_0x330327(0x2a9)]);if(_0x1e0395)_0xbb3bc2[_0x330327(0x387)](_0x330327(0x90a));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x4ab),_0x4a3bd2=>{const _0x204176=_0x534c3a;if(!SceneManager[_0x204176(0xa8a)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x4a3bd2,_0x4a3bd2);const _0x5f04da=$gameTemp['getLastPluginCommandInterpreter'](),_0x459ade=_0x4a3bd2[_0x204176(0x62e)],_0x453d79=_0x4a3bd2['ResetOffset'],_0x3130e2=_0x4a3bd2[_0x204176(0x44f)];if(_0x459ade){const _0x5f50d7=Math[_0x204176(0x8d4)](Graphics[_0x204176(0x456)]/0x2),_0x77cdba=Math[_0x204176(0x8d4)](Graphics[_0x204176(0x363)]/0x2);$gameScreen[_0x204176(0x656)](_0x5f50d7,_0x77cdba,_0x4a3bd2[_0x204176(0x969)],_0x4a3bd2['EasingType']);}_0x453d79&&$gameScreen[_0x204176(0x87e)](0x0,0x0,_0x4a3bd2[_0x204176(0x969)],_0x4a3bd2[_0x204176(0x2a9)]);if(_0x3130e2)_0x5f04da[_0x204176(0x387)](_0x204176(0x90a));}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0x200),_0x2512f0=>{const _0x4b835e=_0x534c3a;if(!SceneManager[_0x4b835e(0xa8a)]())return;if(!Imported[_0x4b835e(0x3b6)])return;const _0x344e20=$gameTemp[_0x4b835e(0xa1d)]();if(!_0x344e20)return;_0x344e20[_0x4b835e(0x387)](_0x4b835e(0x90a));}),PluginManager[_0x534c3a(0x260)](pluginData['name'],'ActSeq_DB_DragonbonesMotionAni',_0x116887=>{const _0x1c477f=_0x534c3a;if(!SceneManager[_0x1c477f(0xa8a)]())return;if(!Imported[_0x1c477f(0x6c9)])return;VisuMZ[_0x1c477f(0x96b)](_0x116887,_0x116887);const _0x3e5b30=VisuMZ[_0x1c477f(0x128)](_0x116887[_0x1c477f(0x689)]),_0x4ae777=_0x116887[_0x1c477f(0x469)][_0x1c477f(0x6c5)]()[_0x1c477f(0x5a9)]();for(const _0x31945d of _0x3e5b30){if(_0x1c477f(0xa0e)==='EDfnQ'){function _0xc49c40(){const _0x50b70e=_0x1c477f;if(this[_0x50b70e(0x679)]&&this[_0x50b70e(0x679)][_0x50b70e(0x4d1)]){const _0x1237b2=this[_0x50b70e(0x679)][_0x50b70e(0x4d1)];this['_motion']=_0x2e6cbe['MOTIONS'][_0x1237b2[_0x50b70e(0x9df)]],this[_0x50b70e(0x315)]=_0x1237b2[_0x50b70e(0x6a3)];const _0x268336=this[_0x50b70e(0x39e)];_0x268336[_0x50b70e(0xa13)](_0x1237b2[_0x50b70e(0x5b2)],_0x1237b2[_0x50b70e(0x6a3)]),this[_0x50b70e(0x1bd)]();}}}else{if(!_0x31945d)continue;_0x31945d[_0x1c477f(0x91d)](_0x4ae777);}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_DB_DragonbonesTimeScale',_0x4f654d=>{const _0x53a8cb=_0x534c3a;if(!SceneManager[_0x53a8cb(0xa8a)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x53a8cb(0x96b)](_0x4f654d,_0x4f654d);const _0x4f3d9e=VisuMZ[_0x53a8cb(0x128)](_0x4f654d[_0x53a8cb(0x689)]),_0x1835dc=_0x4f654d['TimeScale'];for(const _0x57e2a7 of _0x4f3d9e){if(!_0x57e2a7)continue;_0x57e2a7[_0x53a8cb(0x936)]()[_0x53a8cb(0x568)]=_0x1835dc;}}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],'ActSeq_Element_AddElements',_0x4ae9fa=>{const _0x3ba119=_0x534c3a;if(!SceneManager[_0x3ba119(0xa8a)]())return;if(!Imported[_0x3ba119(0x58b)])return;VisuMZ[_0x3ba119(0x96b)](_0x4ae9fa,_0x4ae9fa);const _0x22a2c0=BattleManager[_0x3ba119(0x46a)],_0x4ad238=_0x4ae9fa[_0x3ba119(0x66b)];if(!_0x22a2c0)return;_0x22a2c0['_battleCoreAddedElements']=_0x4ad238;}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x2b0),_0x30b51e=>{const _0x695dd0=_0x534c3a;if(!SceneManager[_0x695dd0(0xa8a)]())return;if(!Imported[_0x695dd0(0x58b)])return;const _0x51a94b=BattleManager['_action'];if(!_0x51a94b)return;_0x51a94b[_0x695dd0(0x480)]();}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x491),_0x2e7c90=>{const _0x17b566=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ['ConvertParams'](_0x2e7c90,_0x2e7c90);const _0x3998d3=BattleManager[_0x17b566(0x46a)],_0x2fd7eb=_0x2e7c90[_0x17b566(0x66b)];if(!_0x3998d3)return;_0x3998d3[_0x17b566(0x159)]=_0x2fd7eb;}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0x92d),_0x426a0e=>{const _0x2de6af=_0x534c3a;if(!SceneManager[_0x2de6af(0xa8a)]())return;if(!Imported[_0x2de6af(0x58b)])return;const _0xe4cfab=BattleManager[_0x2de6af(0x46a)];if(!_0xe4cfab)return;_0xe4cfab[_0x2de6af(0x2c9)]=!![];}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0x26d),_0x2a03c2=>{const _0x3f39e3=_0x534c3a;if(!Imported[_0x3f39e3(0x224)])return;if(!SceneManager[_0x3f39e3(0xa8a)]())return;VisuMZ['ConvertParams'](_0x2a03c2,_0x2a03c2);const _0x32f402=VisuMZ[_0x3f39e3(0x128)](_0x2a03c2[_0x3f39e3(0x689)]);for(const _0x3d9a01 of _0x32f402){if(!_0x3d9a01)continue;_0x3d9a01[_0x3f39e3(0xa88)](_0x3f39e3(0x426)),_0x3d9a01[_0x3f39e3(0xa88)](_0x3f39e3(0x868)),_0x3d9a01[_0x3f39e3(0xa88)]('tv'),_0x3d9a01['clearHorrorEffects']();}$gamePlayer[_0x3f39e3(0x9b7)]();}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x606),_0x1b9d70=>{const _0xac0c06=_0x534c3a;if(!Imported[_0xac0c06(0x224)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1b9d70,_0x1b9d70);const _0x55264b=VisuMZ[_0xac0c06(0x128)](_0x1b9d70[_0xac0c06(0x689)]),_0x3430dc='glitch';_0x1b9d70[_0xac0c06(0x318)]=Math['ceil'](_0x1b9d70['slices']/0x2),_0x1b9d70[_0xac0c06(0x16d)]=_0x1b9d70['slices'],_0x1b9d70['refreshRequest']=!![];for(const _0x316018 of _0x55264b){if(_0xac0c06(0x9b0)===_0xac0c06(0x9b0)){if(!_0x316018)continue;_0x316018[_0xac0c06(0x7a5)](_0x3430dc,_0x1b9d70);}else{function _0x2fb5de(){_0x5ab1db=_0x40bed7(_0x549018['$1']);}}}$gamePlayer[_0xac0c06(0x9b7)]();}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Horror_GlitchRemove',_0x1cd73b=>{const _0x1b1bdd=_0x534c3a;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1b1bdd(0x96b)](_0x1cd73b,_0x1cd73b);const _0x449973=VisuMZ[_0x1b1bdd(0x128)](_0x1cd73b[_0x1b1bdd(0x689)]);for(const _0x57ab37 of _0x449973){if(_0x1b1bdd(0x9e0)===_0x1b1bdd(0x624)){function _0x5cd274(){const _0xa5d959=_0x1b1bdd;this[_0xa5d959(0x393)][_0xa5d959(0x2cf)](new _0x18455a());}}else{if(!_0x57ab37)continue;_0x57ab37['removeHorrorEffect'](_0x1b1bdd(0x868));}}$gamePlayer[_0x1b1bdd(0x9b7)]();}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x23f),_0x54b4ec=>{const _0x5dc6dc=_0x534c3a;if(!Imported[_0x5dc6dc(0x224)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5dc6dc(0x96b)](_0x54b4ec,_0x54b4ec);const _0x1506b8=VisuMZ[_0x5dc6dc(0x128)](_0x54b4ec[_0x5dc6dc(0x689)]),_0x46ab6d=_0x5dc6dc(0x426);for(const _0x566337 of _0x1506b8){if(!_0x566337)continue;_0x566337[_0x5dc6dc(0x7a5)](_0x46ab6d,_0x54b4ec);}$gamePlayer[_0x5dc6dc(0x9b7)]();}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x9d3),_0x35d666=>{const _0x1e5a13=_0x534c3a;if(!Imported[_0x1e5a13(0x224)])return;if(!SceneManager[_0x1e5a13(0xa8a)]())return;VisuMZ[_0x1e5a13(0x96b)](_0x35d666,_0x35d666);const _0x41f4e6=VisuMZ[_0x1e5a13(0x128)](_0x35d666[_0x1e5a13(0x689)]);for(const _0x13fa9c of _0x41f4e6){if(!_0x13fa9c)continue;_0x13fa9c['removeHorrorEffect'](_0x1e5a13(0x426));}$gamePlayer[_0x1e5a13(0x9b7)]();}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x17f),_0x13525a=>{const _0x1dce06=_0x534c3a;if(!Imported[_0x1dce06(0x224)])return;if(!SceneManager[_0x1dce06(0xa8a)]())return;VisuMZ['ConvertParams'](_0x13525a,_0x13525a);const _0x2fbd72=VisuMZ[_0x1dce06(0x128)](_0x13525a[_0x1dce06(0x689)]),_0x2bceda='tv';for(const _0xfe3487 of _0x2fbd72){if(_0x1dce06(0x756)!==_0x1dce06(0x690)){if(!_0xfe3487)continue;_0xfe3487[_0x1dce06(0x7a5)](_0x2bceda,_0x13525a);}else{function _0x3841a8(){const _0x12fee8=_0x1dce06;_0x39c1b4[_0x12fee8(0x99e)][_0x12fee8(0x449)][_0x12fee8(0x63a)](this);}}}$gamePlayer['refresh']();}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0x531),_0x21845f=>{const _0x32fc87=_0x534c3a;if(!Imported[_0x32fc87(0x224)])return;if(!SceneManager[_0x32fc87(0xa8a)]())return;VisuMZ[_0x32fc87(0x96b)](_0x21845f,_0x21845f);const _0x4aeee3=VisuMZ[_0x32fc87(0x128)](_0x21845f[_0x32fc87(0x689)]);for(const _0x21fe77 of _0x4aeee3){if(_0x32fc87(0xa1b)!==_0x32fc87(0x904)){if(!_0x21fe77)continue;_0x21fe77['removeHorrorEffect']('tv');}else{function _0x3ee7a7(){const _0x490bdd=_0x32fc87;return _0x4db7bf[_0x490bdd(0x99e)]['Game_Action_isForOpponent'][_0x490bdd(0x63a)](this);}}}$gamePlayer[_0x32fc87(0x9b7)]();}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Impact_ColorBreak',_0x4fc029=>{const _0x4c8cf7=_0x534c3a;if(!SceneManager[_0x4c8cf7(0xa8a)]())return;if(!Imported[_0x4c8cf7(0xa61)])return;const _0x1cde93=SceneManager[_0x4c8cf7(0x76b)]['_spriteset'];if(!_0x1cde93)return;VisuMZ[_0x4c8cf7(0x96b)](_0x4fc029,_0x4fc029);const _0x945de3=_0x4fc029['Intensity']||0x1,_0x3aabb2=_0x4fc029['Duration']||0x1,_0x307127=_0x4fc029[_0x4c8cf7(0x2a9)]||'Linear';_0x1cde93[_0x4c8cf7(0x682)](_0x945de3,_0x3aabb2,_0x307127);}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x23e),_0x246047=>{const _0x437904=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x437904(0xa61)])return;const _0x42477d=SceneManager[_0x437904(0x76b)][_0x437904(0x6bf)];if(!_0x42477d)return;VisuMZ[_0x437904(0x96b)](_0x246047,_0x246047);const _0x3e9d66=Number(_0x246047[_0x437904(0xa90)])||0x0,_0x59a3d0=Number(_0x246047[_0x437904(0x8d7)]),_0x4e6269=_0x246047[_0x437904(0x969)]||0x1,_0x181fad=_0x246047[_0x437904(0x2a9)]||_0x437904(0x6a4);_0x42477d[_0x437904(0x233)](_0x3e9d66,_0x59a3d0,_0x4e6269,_0x181fad);}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0x98d),_0x62fbea=>{const _0x144b82=_0x534c3a;if(!SceneManager[_0x144b82(0xa8a)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1f1cf3=SceneManager[_0x144b82(0x76b)][_0x144b82(0x6bf)];if(!_0x1f1cf3)return;VisuMZ[_0x144b82(0x96b)](_0x62fbea,_0x62fbea);const _0x74bf50=Number(_0x62fbea['Angle'])||0x0,_0x2be87e=Number(_0x62fbea[_0x144b82(0x8d7)]),_0x57bbc6=_0x62fbea[_0x144b82(0x969)]||0x1,_0x111716=_0x62fbea['EasingType']||'Linear',_0xf90e46=VisuMZ[_0x144b82(0x128)](_0x62fbea[_0x144b82(0x689)]);for(const _0x30ffac of _0xf90e46){if(!_0x30ffac)continue;if(!_0x30ffac['battler']())continue;_0x30ffac['battler']()[_0x144b82(0x233)](_0x74bf50,_0x2be87e,_0x57bbc6,_0x111716);}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Impact_MotionTrailCreate',_0x5af51c=>{const _0x4bb4c7=_0x534c3a;if(!SceneManager[_0x4bb4c7(0xa8a)]())return;if(!Imported[_0x4bb4c7(0xa61)])return;VisuMZ[_0x4bb4c7(0x96b)](_0x5af51c,_0x5af51c);const _0x23aa3d={'delay':_0x5af51c[_0x4bb4c7(0x94c)],'duration':_0x5af51c['duration'],'hue':_0x5af51c[_0x4bb4c7(0xa4f)],'opacityStart':_0x5af51c[_0x4bb4c7(0x48f)],'tone':_0x5af51c[_0x4bb4c7(0x4f4)],'visible':!![]},_0x19f6b4=VisuMZ[_0x4bb4c7(0x128)](_0x5af51c['Targets']);for(const _0x29881f of _0x19f6b4){if(_0x4bb4c7(0xfe)===_0x4bb4c7(0x9a4)){function _0x28e964(){const _0x5dde3b=_0x4bb4c7,_0x28f487=_0x2cb64a[_0x5dde3b(0x317)],_0x573b8d=_0x5dde3b(0x560);this[_0x5dde3b(0x5c6)](_0x28f487,_0x573b8d);}}else{if(!_0x29881f)continue;_0x29881f['setBattlerMotionTrailData'](_0x23aa3d);}}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x1ee),_0x35c09d=>{const _0x3a283f=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ['ConvertParams'](_0x35c09d,_0x35c09d);const _0xfce7f1=VisuMZ['CreateActionSequenceTargets'](_0x35c09d[_0x3a283f(0x689)]);for(const _0x8149e3 of _0xfce7f1){if(!_0x8149e3)continue;_0x8149e3[_0x3a283f(0x3d9)]();}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x9b6),_0x37fb41=>{const _0x5e4fc7=_0x534c3a;if(!Imported[_0x5e4fc7(0xa61)])return;const _0x53429a=SceneManager['_scene'][_0x5e4fc7(0x6bf)];if(!_0x53429a)return;VisuMZ[_0x5e4fc7(0x96b)](_0x37fb41,_0x37fb41);const _0x5e9e60=_0x37fb41['X']||0x0,_0x14dd5d=_0x37fb41['Y']||0x0,_0x28dc36=_0x37fb41[_0x5e4fc7(0x254)]||0x0,_0x1d198b=_0x37fb41[_0x5e4fc7(0x815)]||0x0,_0x36aac0=_0x37fb41[_0x5e4fc7(0x969)]||0x1;_0x53429a[_0x5e4fc7(0x8c5)](_0x5e9e60,_0x14dd5d,_0x28dc36,_0x1d198b,_0x36aac0);}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0x3f4),_0x225f27=>{const _0xfca80=_0x534c3a;if(!SceneManager[_0xfca80(0xa8a)]())return;if(!Imported[_0xfca80(0xa61)])return;const _0x2043ff=SceneManager[_0xfca80(0x76b)][_0xfca80(0x6bf)];if(!_0x2043ff)return;VisuMZ[_0xfca80(0x96b)](_0x225f27,_0x225f27);const _0x1beff9=VisuMZ[_0xfca80(0x128)](_0x225f27[_0xfca80(0x689)]),_0x372af0=_0x225f27[_0xfca80(0x551)],_0x49ca2d=_0x225f27[_0xfca80(0x69d)]||0x0,_0x16d2aa=_0x225f27[_0xfca80(0xa49)]||0x0,_0xad6bbd=_0x225f27[_0xfca80(0x254)]||0x0,_0x345b38=_0x225f27['Wave']||0x0,_0x3a5e33=_0x225f27[_0xfca80(0x969)]||0x1;for(const _0x5bf1fb of _0x1beff9){if(_0xfca80(0x5ce)===_0xfca80(0x5ce)){if(!_0x5bf1fb)continue;if(!_0x5bf1fb[_0xfca80(0x7c4)]())continue;const _0x16fa4c=_0x5bf1fb[_0xfca80(0x7c4)]();let _0x351610=_0x16fa4c[_0xfca80(0x674)],_0x2507fe=_0x16fa4c[_0xfca80(0x2df)];_0x351610+=(Graphics[_0xfca80(0x456)]-Graphics[_0xfca80(0x29c)])/0x2,_0x2507fe+=(Graphics[_0xfca80(0x363)]-Graphics[_0xfca80(0x29d)])/0x2;if(_0x372af0[_0xfca80(0x5ed)](/front/i)){if(_0xfca80(0x7c0)===_0xfca80(0x7c0))_0x351610+=(_0x5bf1fb[_0xfca80(0x405)]()?0x1:-0x1)*_0x16fa4c[_0xfca80(0x7f5)]()/0x2;else{function _0x5f5392(){const _0x25a2e9=_0xfca80;this[_0x25a2e9(0x52c)]=this[_0x25a2e9(0x4a0)](this[_0x25a2e9(0x52c)],this[_0x25a2e9(0x911)],_0x2ae5af,_0x42e72e,_0x1a8ec4);}}}else{if(_0x372af0['match'](/back/i)){if('eZIRh'!==_0xfca80(0x71c))_0x351610+=(_0x5bf1fb['isEnemy']()?-0x1:0x1)*_0x16fa4c[_0xfca80(0x7f5)]()/0x2;else{function _0x46ec64(){const _0x7d3415=_0xfca80;this[_0x7d3415(0x182)]=!![];}}}}if(_0x372af0[_0xfca80(0x5ed)](/head/i))_0x2507fe-=_0x16fa4c[_0xfca80(0x8fd)]();else{if(_0x372af0[_0xfca80(0x5ed)](/center/i)){if(_0xfca80(0x770)===_0xfca80(0x69e)){function _0x307a54(){const _0x5b08cd=_0xfca80;this[_0x5b08cd(0x648)]['svShadow']=_0x2024f0[_0x5b08cd(0x53c)][_0x5b08cd(0x547)]['call'](this);}}else _0x2507fe-=_0x16fa4c[_0xfca80(0x8fd)]()/0x2;}}_0x351610+=_0x49ca2d,_0x2507fe+=_0x16d2aa,_0x2043ff[_0xfca80(0x8c5)](_0x351610,_0x2507fe,_0xad6bbd,_0x345b38,_0x3a5e33);}else{function _0x19970f(){const _0x16df55=_0xfca80;if(_0x4b66e0[_0x16df55(0x61a)]()[_0x16df55(0x79f)]>0x0)return!![];this[_0x16df55(0x772)]='';}}}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0xa3c),_0x52faaa=>{const _0x4348c7=_0x534c3a;if(!SceneManager[_0x4348c7(0xa8a)]())return;if(!Imported[_0x4348c7(0xa61)])return;const _0xa97fc9=SceneManager[_0x4348c7(0x76b)][_0x4348c7(0x6bf)];if(!_0xa97fc9)return;VisuMZ[_0x4348c7(0x96b)](_0x52faaa,_0x52faaa);const _0x25ce77=VisuMZ['CreateActionSequenceTargets'](_0x52faaa[_0x4348c7(0x689)]),_0x41ed17=_0x52faaa[_0x4348c7(0x551)],_0x3ca0a4=_0x52faaa[_0x4348c7(0x69d)]||0x0,_0x1c9603=_0x52faaa[_0x4348c7(0xa49)]||0x0,_0x5e168f=_0x52faaa[_0x4348c7(0x254)]||0x0,_0x344260=_0x52faaa[_0x4348c7(0x815)]||0x0,_0x41e64b=_0x52faaa[_0x4348c7(0x969)]||0x1,_0x3ef453=Math['min'](..._0x25ce77[_0x4348c7(0x406)](_0x351154=>_0x351154[_0x4348c7(0x7c4)]()['_baseX']-_0x351154[_0x4348c7(0x7c4)]()['mainSpriteWidth']()/0x2)),_0x48f86b=Math[_0x4348c7(0x9a7)](..._0x25ce77[_0x4348c7(0x406)](_0x1bf228=>_0x1bf228[_0x4348c7(0x7c4)]()['_baseX']+_0x1bf228[_0x4348c7(0x7c4)]()[_0x4348c7(0x7f5)]()/0x2)),_0x54bf3b=Math[_0x4348c7(0x623)](..._0x25ce77['map'](_0x9af156=>_0x9af156[_0x4348c7(0x7c4)]()[_0x4348c7(0x2df)]-_0x9af156[_0x4348c7(0x7c4)]()['mainSpriteHeight']())),_0x4f33ea=Math[_0x4348c7(0x9a7)](..._0x25ce77[_0x4348c7(0x406)](_0x47a701=>_0x47a701[_0x4348c7(0x7c4)]()[_0x4348c7(0x2df)])),_0x305c6e=_0x25ce77[_0x4348c7(0x193)](_0x3e3859=>_0x3e3859[_0x4348c7(0x1e7)]())[_0x4348c7(0x4a2)],_0x218040=_0x25ce77['filter'](_0x1bed35=>_0x1bed35['isEnemy']())[_0x4348c7(0x4a2)];let _0x43e0a9=0x0,_0x52b15f=0x0;if(_0x41ed17[_0x4348c7(0x5ed)](/front/i))_0x43e0a9=_0x305c6e>=_0x218040?_0x3ef453:_0x48f86b;else{if(_0x41ed17[_0x4348c7(0x5ed)](/middle/i))_0x43e0a9=(_0x3ef453+_0x48f86b)/0x2,melee=-0x1;else _0x41ed17[_0x4348c7(0x5ed)](/back/i)&&(_0x43e0a9=_0x305c6e>=_0x218040?_0x48f86b:_0x3ef453);}if(_0x41ed17['match'](/head/i))_0x52b15f=_0x54bf3b;else{if(_0x41ed17[_0x4348c7(0x5ed)](/center/i))_0x52b15f=(_0x54bf3b+_0x4f33ea)/0x2;else{if(_0x41ed17[_0x4348c7(0x5ed)](/base/i)){if(_0x4348c7(0x597)==='UehNQ')_0x52b15f=_0x4f33ea;else{function _0x1ede81(){const _0x14f278=_0x4348c7;return this[_0x14f278(0x464)]()[_0x14f278(0x650)][_0x14f278(0x5ed)](/<DAMAGE CAP:[ ](\d+)>/i)?_0x4ec1f3(_0x88951c['$1']):this[_0x14f278(0x3fe)]()[_0x14f278(0x70a)]();}}}}}_0x43e0a9+=(Graphics[_0x4348c7(0x456)]-Graphics[_0x4348c7(0x29c)])/0x2,_0x52b15f+=(Graphics[_0x4348c7(0x363)]-Graphics[_0x4348c7(0x29d)])/0x2,_0x43e0a9+=_0x3ca0a4,_0x52b15f+=_0x1c9603,_0xa97fc9[_0x4348c7(0x8c5)](_0x43e0a9,_0x52b15f,_0x5e168f,_0x344260,_0x41e64b);}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Impact_ZoomBlurPoint',_0x15dd72=>{const _0x1d6542=_0x534c3a;if(!Imported[_0x1d6542(0xa61)])return;const _0x2272c3=SceneManager[_0x1d6542(0x76b)][_0x1d6542(0x6bf)];if(!_0x2272c3)return;VisuMZ[_0x1d6542(0x96b)](_0x15dd72,_0x15dd72);const _0xa2d995=_0x15dd72['X']||0x0,_0x350b1d=_0x15dd72['Y']||0x0,_0x230d65=_0x15dd72[_0x1d6542(0x152)]||0x0,_0x35b242=_0x15dd72['Radius']||0x0,_0x54ee5b=_0x15dd72[_0x1d6542(0x969)]||0x1,_0x3bf843=_0x15dd72[_0x1d6542(0x2a9)]||'Linear';_0x2272c3[_0x1d6542(0xa6a)](_0x230d65,_0xa2d995,_0x350b1d,_0x35b242,_0x54ee5b,_0x3bf843);}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0x3f8),_0x5ede03=>{const _0x10ff76=_0x534c3a;if(!Imported[_0x10ff76(0xa61)])return;const _0x230942=SceneManager[_0x10ff76(0x76b)]['_spriteset'];if(!_0x230942)return;VisuMZ[_0x10ff76(0x96b)](_0x5ede03,_0x5ede03);const _0x5cea0b=VisuMZ['CreateActionSequenceTargets'](_0x5ede03['Targets']),_0xef0413=_0x5ede03[_0x10ff76(0x551)],_0x47503d=_0x5ede03['OffsetX']||0x0,_0x1ec2ee=_0x5ede03[_0x10ff76(0xa49)]||0x0,_0x323f=_0x5ede03[_0x10ff76(0x152)]||0x0,_0x37e58a=_0x5ede03['Radius']||0x0,_0x39ff58=_0x5ede03[_0x10ff76(0x969)]||0x1,_0x381517=_0x5ede03[_0x10ff76(0x2a9)]||'Linear',_0x47090c=Math[_0x10ff76(0x623)](..._0x5cea0b[_0x10ff76(0x406)](_0x2832b2=>_0x2832b2[_0x10ff76(0x7c4)]()[_0x10ff76(0x674)]-_0x2832b2['battler']()['mainSpriteWidth']()/0x2)),_0x571ad9=Math[_0x10ff76(0x9a7)](..._0x5cea0b[_0x10ff76(0x406)](_0x3496f2=>_0x3496f2['battler']()[_0x10ff76(0x674)]+_0x3496f2[_0x10ff76(0x7c4)]()[_0x10ff76(0x7f5)]()/0x2)),_0x53f0e9=Math['min'](..._0x5cea0b[_0x10ff76(0x406)](_0x17fee5=>_0x17fee5[_0x10ff76(0x7c4)]()[_0x10ff76(0x2df)]-_0x17fee5['battler']()[_0x10ff76(0x8fd)]())),_0x4dbb0e=Math[_0x10ff76(0x9a7)](..._0x5cea0b['map'](_0x1d101a=>_0x1d101a[_0x10ff76(0x7c4)]()[_0x10ff76(0x2df)])),_0x4ea017=_0x5cea0b[_0x10ff76(0x193)](_0x36633c=>_0x36633c[_0x10ff76(0x1e7)]())[_0x10ff76(0x4a2)],_0x283f53=_0x5cea0b[_0x10ff76(0x193)](_0x27230f=>_0x27230f['isEnemy']())[_0x10ff76(0x4a2)];let _0x2b1208=0x0,_0x22927a=0x0;if(_0xef0413[_0x10ff76(0x5ed)](/front/i)){if('YVwBG'===_0x10ff76(0x609))_0x2b1208=_0x4ea017>=_0x283f53?_0x47090c:_0x571ad9;else{function _0x40ce51(){const _0x5b8da2=_0x10ff76;_0x801b09[_0x5b8da2(0x5fb)]([_0xc10eaf]);}}}else{if(_0xef0413[_0x10ff76(0x5ed)](/middle/i))_0x2b1208=(_0x47090c+_0x571ad9)/0x2,melee=-0x1;else{if(_0xef0413['match'](/back/i)){if(_0x10ff76(0x122)===_0x10ff76(0x162)){function _0x7221a4(){const _0x572e84=_0x10ff76;this[_0x572e84(0x9f4)](),this['createAnimationContainer'](),this[_0x572e84(0x2e4)](),this['adjustFlippedBattlefield']();}}else _0x2b1208=_0x4ea017>=_0x283f53?_0x571ad9:_0x47090c;}}}if(_0xef0413[_0x10ff76(0x5ed)](/head/i))_0x22927a=_0x53f0e9;else{if(_0xef0413['match'](/center/i))_0x22927a=(_0x53f0e9+_0x4dbb0e)/0x2;else _0xef0413[_0x10ff76(0x5ed)](/base/i)&&(_0x22927a=_0x4dbb0e);}_0x2b1208+=(Graphics[_0x10ff76(0x456)]-Graphics['boxWidth'])/0x2,_0x22927a+=(Graphics[_0x10ff76(0x363)]-Graphics['boxHeight'])/0x2,_0x2b1208+=_0x47503d,_0x22927a+=_0x1ec2ee,_0x230942[_0x10ff76(0xa6a)](_0x323f,_0x2b1208,_0x22927a,_0x37e58a,_0x39ff58,_0x381517);}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Mechanics_ActionEffect',_0x266bff=>{const _0x56d3b1=_0x534c3a;if(!SceneManager[_0x56d3b1(0xa8a)]())return;VisuMZ['ConvertParams'](_0x266bff,_0x266bff);const _0x10db36=$gameTemp['getLastPluginCommandInterpreter'](),_0x599250=BattleManager[_0x56d3b1(0x46a)],_0x12ecfe=BattleManager[_0x56d3b1(0x90c)],_0x2a2786=BattleManager[_0x56d3b1(0xa5c)];if(!_0x10db36||!_0x599250||!_0x12ecfe)return;if(!_0x599250[_0x56d3b1(0x464)]())return;const _0x1b82d6=VisuMZ[_0x56d3b1(0x128)](_0x266bff[_0x56d3b1(0x689)]);for(const _0x42b34d of _0x1b82d6){if('jczCG'==='jczCG'){if(!_0x42b34d)continue;_0x2a2786[_0x56d3b1(0x3ba)]('actionEffect',_0x12ecfe,_0x42b34d);}else{function _0x53c86d(){const _0x145397=_0x56d3b1;_0xce47fd[_0x145397(0x5fb)]([_0x2adbc6]);}}}_0x10db36['setWaitMode'](_0x56d3b1(0x2d4));}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0x25c),_0x22a06b=>{const _0xe2c658=_0x534c3a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xe2c658(0x96b)](_0x22a06b,_0x22a06b);const _0x14a28b=['MAXHP',_0xe2c658(0x7f7),'ATK',_0xe2c658(0x5a2),_0xe2c658(0x101),_0xe2c658(0x2aa),_0xe2c658(0x351),_0xe2c658(0x41f)],_0x16f719=_0x22a06b[_0xe2c658(0x6cc)],_0x56315a=_0x22a06b['Debuffs'],_0x309dd0=_0x22a06b['Turns'],_0x4fdc11=VisuMZ[_0xe2c658(0x128)](_0x22a06b['Targets']);for(const _0x5a022c of _0x4fdc11){if(_0xe2c658(0xaa1)!==_0xe2c658(0x1b4)){if(!_0x5a022c)continue;for(const _0x3ff0eb of _0x16f719){const _0x3829da=_0x14a28b['indexOf'](_0x3ff0eb[_0xe2c658(0x2ca)]()['trim']());if(_0x3829da>=0x0&&_0x3829da<=0x7){if(_0xe2c658(0x7b1)!==_0xe2c658(0x7b1)){function _0x19b4a3(){const _0x40fd77=_0xe2c658,_0x492f17=this[_0x40fd77(0xa67)];_0x492f17[_0x40fd77(0x3d6)][_0x40fd77(0x48e)]();const _0xd23128=this['commandStyleCheck'](this[_0x40fd77(0x6d2)]());if(_0xd23128===_0x40fd77(0x92c)&&this[_0x40fd77(0x76f)]()>0x0){const _0x462cfe=this[_0x40fd77(0x586)](this['index']());let _0x2d1355=this[_0x40fd77(0x7b5)](this[_0x40fd77(0x6d2)]());_0x2d1355=_0x2d1355[_0x40fd77(0x283)](/\\I\[(\d+)\]/gi,''),_0x492f17[_0x40fd77(0x27f)](),this[_0x40fd77(0x9ed)](_0x2d1355,_0x462cfe),this[_0x40fd77(0x875)](_0x2d1355,_0x462cfe),this['commandNameWindowCenter'](_0x2d1355,_0x462cfe);}}}else _0x5a022c['addBuff'](_0x3829da,_0x309dd0);}}for(const _0x35ecc4 of _0x56315a){const _0x2d540d=_0x14a28b['indexOf'](_0x35ecc4[_0xe2c658(0x2ca)]()[_0xe2c658(0x5a9)]());if(_0x2d540d>=0x0&&_0x2d540d<=0x7){if(_0xe2c658(0x321)!==_0xe2c658(0x321)){function _0x2f907d(){const _0x3ad896=_0xe2c658;!this[_0x3ad896(0xa5c)][_0x3ad896(0xaac)]()&&this[_0x3ad896(0x3f6)]();}}else _0x5a022c[_0xe2c658(0x206)](_0x2d540d,_0x309dd0);}}}else{function _0x4ed62f(){const _0x46822d=_0xe2c658;_0x2cbec1['BattleCore']['Game_Action_applyGlobal'][_0x46822d(0x63a)](this),this['applyGlobalCommonEventNotetags'](),this['resetResultSwitches']();}}}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x4ea),_0x37b83c=>{const _0x34b021=_0x534c3a;if(!SceneManager[_0x34b021(0xa8a)]())return;VisuMZ[_0x34b021(0x96b)](_0x37b83c,_0x37b83c);const _0x3b5346=_0x37b83c[_0x34b021(0x75c)],_0x52753c=VisuMZ[_0x34b021(0x128)](_0x37b83c['Targets']);for(const _0x1711dd of _0x52753c){if('hSJhx'!==_0x34b021(0x333)){function _0x136bd9(){this['startInput']();}}else{if(!_0x1711dd)continue;for(const _0x5c568a of _0x3b5346){if(_0x34b021(0x4ce)!==_0x34b021(0x8e1))_0x1711dd[_0x34b021(0x3ec)](_0x5c568a);else{function _0x8e5f1e(){const _0x571ca0=_0x34b021;return _0x43d96f[_0x571ca0(0x53c)][_0x571ca0(0x1d4)]['call'](this);}}}}}}),PluginManager[_0x534c3a(0x260)](pluginData['name'],'ActSeq_Mechanics_ArmorPenetration',_0x3ee083=>{const _0x1d0478=_0x534c3a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1d0478(0x96b)](_0x3ee083,_0x3ee083);const _0x480f22=BattleManager[_0x1d0478(0x46a)],_0x57bc9f={'arPenRate':_0x3ee083['ArPenRate'],'arPenFlat':_0x3ee083[_0x1d0478(0x3dd)],'arRedRate':_0x3ee083['ArRedRate'],'arRedFlat':_0x3ee083[_0x1d0478(0x345)]};_0x480f22[_0x1d0478(0x845)]=_0x57bc9f;}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0x57c),_0x178d26=>{const _0x28c37e=_0x534c3a;if(!SceneManager[_0x28c37e(0xa8a)]())return;if(!Imported[_0x28c37e(0x94b)])return;VisuMZ[_0x28c37e(0x96b)](_0x178d26,_0x178d26);const _0x10f0d9=VisuMZ['CreateActionSequenceTargets'](_0x178d26[_0x28c37e(0x689)]),_0x1d8385=_0x178d26[_0x28c37e(0x29f)]||0x1;for(const _0x3d9113 of _0x10f0d9){if(_0x28c37e(0x401)!==_0x28c37e(0x136)){if(!_0x3d9113)continue;if(!_0x3d9113['isEnemy']())continue;_0x3d9113[_0x28c37e(0x133)](_0x1d8385);}else{function _0x58273f(){const _0x2efc5c=_0x28c37e;_0x59a362[_0x2efc5c(0x99e)]['Spriteset_Battle_createBattleField'][_0x2efc5c(0x63a)](this),this[_0x2efc5c(0x614)]();}}}}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0x4df),_0x1187e8=>{const _0x6927f7=_0x534c3a;if(!SceneManager[_0x6927f7(0xa8a)]())return;if(!Imported[_0x6927f7(0x1f7)])return;VisuMZ[_0x6927f7(0x96b)](_0x1187e8,_0x1187e8);const _0x3f41bb=VisuMZ[_0x6927f7(0x128)](_0x1187e8[_0x6927f7(0x689)]),_0x274c87=_0x1187e8['ChargeRate'],_0x1fd830=_0x1187e8[_0x6927f7(0x57d)],_0x254bab=_0x1187e8[_0x6927f7(0x4f8)];for(const _0xe724a0 of _0x3f41bb){if(_0x6927f7(0x3bb)!==_0x6927f7(0x3bb)){function _0x973942(){const _0x2ada92=_0x6927f7;this[_0x2ada92(0x404)]=![];}}else{if(!_0xe724a0)continue;if(_0xe724a0[_0x6927f7(0x693)]())_0xe724a0[_0x6927f7(0x4d5)](_0x274c87);else{if(_0xe724a0[_0x6927f7(0x335)]()){if(_0x6927f7(0xa85)==='GaPhg'){_0xe724a0[_0x6927f7(0xa5e)](_0x1fd830);if(_0x254bab)_0xe724a0[_0x6927f7(0x900)]();}else{function _0xe29da0(){const _0x27e020=_0x6927f7;if(!_0x594e46['isSideView']())return;const _0x39c171=this[_0x27e020(0x7c4)]();if(!_0x39c171)return;this[_0x27e020(0x1e7)]()&&(_0xaa3d29*=-0x1,_0x437542*=-0x1),_0x39c171[_0x27e020(0xa83)](_0xf95992,_0x1f246f,_0x43487f,_0xa928ce);}}}}}}}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0x748),_0x2a6e12=>{const _0xe8f87a=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xe8f87a(0x598)])return;VisuMZ[_0xe8f87a(0x96b)](_0x2a6e12,_0x2a6e12);const _0xb620b2=VisuMZ[_0xe8f87a(0x128)](_0x2a6e12['Targets']),_0x388c53=_0x2a6e12['BoostPoints'];for(const _0x53fb90 of _0xb620b2){if(_0xe8f87a(0x9dd)!==_0xe8f87a(0x10f)){if(!_0x53fb90)continue;_0x53fb90['gainStoredBoostPoints'](_0x388c53);}else{function _0x30379e(){const _0x15f04c=_0xe8f87a;_0x55bfdd=_0x3b258e[_0x15f04c(0x99e)]['JS'][_0x54575c]['call'](this,this['subject'](),_0x23c62c,_0x400f45,_0x5943b6);if(_0x485134)_0x301c62=_0x3dcb87;}}}}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0x513),_0xa3a4fa=>{const _0x1aad6d=_0x534c3a;if(!SceneManager[_0x1aad6d(0xa8a)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager['_subject'])return;VisuMZ[_0x1aad6d(0x96b)](_0xa3a4fa,_0xa3a4fa);const _0xe9f1c2=_0xa3a4fa[_0x1aad6d(0x2ec)];$gameVariables['setValue'](_0xe9f1c2,BattleManager[_0x1aad6d(0x90c)][_0x1aad6d(0x158)]());}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x209),_0x38ba5e=>{const _0x5625ec=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5625ec(0x111)])return;VisuMZ[_0x5625ec(0x96b)](_0x38ba5e,_0x38ba5e);const _0xe2c116=VisuMZ[_0x5625ec(0x128)](_0x38ba5e[_0x5625ec(0x689)]),_0x2df47a=_0x38ba5e[_0x5625ec(0x390)];for(const _0x207191 of _0xe2c116){if(!_0x207191)continue;if(_0x207191['isBreakStunned']())continue;if(!_0x207191[_0x5625ec(0x6b3)]())continue;_0x207191[_0x5625ec(0x172)](_0x2df47a);}}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0x526),_0x2afc4d=>{const _0x29179d=_0x534c3a;if(!SceneManager[_0x29179d(0xa8a)]())return;if(!Imported[_0x29179d(0x111)])return;VisuMZ[_0x29179d(0x96b)](_0x2afc4d,_0x2afc4d);const _0x205b84=VisuMZ['CreateActionSequenceTargets'](_0x2afc4d[_0x29179d(0x689)]);for(const _0x64693d of _0x205b84){if(!_0x64693d)continue;if(_0x64693d['isBreakStunned']())continue;if(!_0x64693d[_0x29179d(0x6b3)]())continue;_0x64693d[_0x29179d(0x24a)]();}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_BtbGain',_0xb67084=>{const _0x1c9071=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1c9071(0x424)])return;VisuMZ[_0x1c9071(0x96b)](_0xb67084,_0xb67084);const _0x3766f1=VisuMZ[_0x1c9071(0x128)](_0xb67084[_0x1c9071(0x689)]),_0x4ec692=_0xb67084['BravePoints'];for(const _0x416946 of _0x3766f1){if(_0x1c9071(0x2f4)==='PvAzW'){if(!_0x416946)continue;_0x416946[_0x1c9071(0x80a)](_0x4ec692);}else{function _0x5db87f(){const _0x68bc3e=_0x1c9071;let _0x580450='';if(_0x3f9a32[_0x68bc3e(0x96f)](_0x12451f))_0x580450=_0x68bc3e(0x717)[_0x68bc3e(0x8e9)](_0x42fce7['id'],_0x29aa96);if(_0x5eb73e['includes'](_0x2bc84f))_0x580450=_0x68bc3e(0x734)[_0x68bc3e(0x8e9)](_0xf0b730['id'],_0x450f86);if(_0x4901eb['includes'](_0x594efd))_0x580450='Skill-%1-%2'[_0x68bc3e(0x8e9)](_0x2d1bc9['id'],_0x864003);if(_0x5c92ce[_0x68bc3e(0x96f)](_0x55f2dc))_0x580450=_0x68bc3e(0x2c5)[_0x68bc3e(0x8e9)](_0x366ae8['id'],_0x5f0e09);if(_0x37bcb1[_0x68bc3e(0x96f)](_0x51da05))_0x580450=_0x68bc3e(0x989)[_0x68bc3e(0x8e9)](_0x42f634['id'],_0x209558);if(_0x176ec1[_0x68bc3e(0x96f)](_0x386fe1))_0x580450=_0x68bc3e(0x173)[_0x68bc3e(0x8e9)](_0x54292d['id'],_0x30ee01);if(_0xee2dbc[_0x68bc3e(0x96f)](_0x526f58))_0x580450=_0x68bc3e(0x443)['format'](_0x153639['id'],_0x1c0f39);if(_0x54737b[_0x68bc3e(0x96f)](_0x343600))_0x580450=_0x68bc3e(0x2d5)[_0x68bc3e(0x8e9)](_0x14f276['id'],_0x2461ff);return _0x580450;}}}}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0x138),_0x5993cb=>{const _0x1e361e=_0x534c3a;if(!SceneManager[_0x1e361e(0xa8a)]())return;VisuMZ[_0x1e361e(0x96b)](_0x5993cb,_0x5993cb);const _0x33c2d8=$gameTemp['getLastPluginCommandInterpreter'](),_0x24f979=BattleManager[_0x1e361e(0x46a)],_0x498588=BattleManager[_0x1e361e(0x90c)];if(!_0x33c2d8||!_0x24f979||!_0x498588)return;if(!_0x24f979[_0x1e361e(0x464)]())return;const _0x48d594=VisuMZ[_0x1e361e(0x128)](_0x5993cb[_0x1e361e(0x689)]);for(const _0x2975a5 of _0x48d594){if(_0x1e361e(0x7bf)!==_0x1e361e(0x7bf)){function _0x4b002b(){const _0x5c1653=_0x1e361e;this[_0x5c1653(0x728)]=_0x48e842,this[_0x5c1653(0x941)]&&(this['_targetAngle']=0x0,this[_0x5c1653(0x728)]=0x0);}}else{if(!_0x2975a5)continue;_0x5993cb[_0x1e361e(0x8ea)]&&(_0x2975a5['removeImmortal'](),_0x2975a5[_0x1e361e(0x3ec)](_0x2975a5[_0x1e361e(0x36f)]())),_0x2975a5[_0x1e361e(0x9b4)]()&&_0x2975a5['performCollapse']();}}_0x33c2d8[_0x1e361e(0x387)](_0x1e361e(0x326));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x895),_0x6696c2=>{const _0x19077a=_0x534c3a;if(!SceneManager[_0x19077a(0xa8a)]())return;if(!Imported[_0x19077a(0x6cd)])return;VisuMZ['ConvertParams'](_0x6696c2,_0x6696c2);const _0x587ac9=VisuMZ[_0x19077a(0x128)](_0x6696c2[_0x19077a(0x689)]),_0x13d2b1=_0x6696c2[_0x19077a(0x8ed)];for(const _0xf7c550 of _0x587ac9){if(!_0xf7c550)continue;_0xf7c550[_0x19077a(0x5b9)](_0x13d2b1);}}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0x32d),_0x1daa5a=>{const _0x545592=_0x534c3a;if(!SceneManager[_0x545592(0xa8a)]())return;if(!Imported[_0x545592(0x6cd)])return;VisuMZ[_0x545592(0x96b)](_0x1daa5a,_0x1daa5a);const _0x5496f9=VisuMZ[_0x545592(0x128)](_0x1daa5a[_0x545592(0x689)]),_0x32f4b5=_0x1daa5a[_0x545592(0x57d)],_0x327eb0=_0x1daa5a[_0x545592(0x57d)];for(const _0x3be6ce of _0x5496f9){if(!_0x3be6ce)continue;if(_0x3be6ce['_tpbState']===_0x545592(0x78f))_0x3be6ce[_0x545592(0x71a)](_0x32f4b5);else _0x3be6ce['_tpbState']===_0x545592(0x21e)&&_0x3be6ce[_0x545592(0x822)](_0x327eb0);}}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],'ActSeq_Mechanics_CustomDmgFormula',_0x1d9f99=>{const _0x321079=_0x534c3a;if(!SceneManager[_0x321079(0xa8a)]())return;VisuMZ[_0x321079(0x96b)](_0x1d9f99,_0x1d9f99);const _0x3555b4=BattleManager[_0x321079(0x46a)];if(!_0x3555b4)return;let _0x3e8afd=_0x1d9f99[_0x321079(0x588)];_0x3555b4[_0x321079(0x785)](_0x3e8afd);}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0xaa2),_0x3bb982=>{const _0x592df7=_0x534c3a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x592df7(0x96b)](_0x3bb982,_0x3bb982);const _0x12e4d8=VisuMZ['CreateActionSequenceTargets'](_0x3bb982[_0x592df7(0x689)]);for(const _0xfa614b of _0x12e4d8){if(!_0xfa614b)continue;if(_0xfa614b[_0x592df7(0x289)]())_0xfa614b[_0x592df7(0x85a)]();}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x511),_0x4e2f64=>{const _0x347147=_0x534c3a;if(!SceneManager[_0x347147(0xa8a)]())return;VisuMZ['ConvertParams'](_0x4e2f64,_0x4e2f64);const _0x3e300f=$gameTemp['getLastPluginCommandInterpreter'](),_0x5601b1=BattleManager[_0x347147(0x90c)],_0x37ca83=_0x4e2f64[_0x347147(0x2e2)];if(!_0x3e300f)return;if(!_0x5601b1)return;if(_0x5601b1&&_0x5601b1[_0x347147(0x43f)]()&&_0x37ca83['toUpperCase']()[_0x347147(0x5a9)]()!==_0x347147(0x98e)){if(_0x347147(0x9a5)!==_0x347147(0x9a5)){function _0x37c929(){const _0x569f26=_0x347147;_0x22557b[_0x569f26(0x53c)][_0x569f26(0x20d)][_0x569f26(0x63a)](this);const _0x131369=this[_0x569f26(0x539)]()||this;if(!_0x131369)return;!_0x131369[_0x569f26(0xa72)]&&(_0x131369['bitmap']=new _0x3f6a90(this[_0x569f26(0x456)],this[_0x569f26(0x363)])),this[_0x569f26(0x28a)]==='bossCollapse'?this[_0x569f26(0x12b)][_0x569f26(0x819)](0x0,0x0,this[_0x569f26(0x12b)][_0x569f26(0x456)],this[_0x569f26(0x153)]):_0x131369[_0x569f26(0x819)](0x0,0x0,_0x131369[_0x569f26(0xa72)][_0x569f26(0x456)],this[_0x569f26(0xa72)]['height']);}}else _0x3e300f[_0x347147(0x5fb)]([_0x37ca83]);}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x965),_0x5d3441=>{const _0x1ddebc=_0x534c3a;if(!SceneManager[_0x1ddebc(0xa8a)]())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;VisuMZ[_0x1ddebc(0x96b)](_0x5d3441,_0x5d3441);const _0x57c74f=_0x5d3441[_0x1ddebc(0x367)];BattleManager[_0x1ddebc(0x90c)]&&BattleManager[_0x1ddebc(0x90c)][_0x1ddebc(0xa6e)]()[_0x1ddebc(0x3c4)](_0x57c74f);}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0xa69),_0x392fd1=>{const _0x50dcdf=_0x534c3a;if(!SceneManager[_0x50dcdf(0xa8a)]())return;VisuMZ[_0x50dcdf(0x96b)](_0x392fd1,_0x392fd1);const _0x5e8ef4=VisuMZ[_0x50dcdf(0x128)](_0x392fd1['Targets']),_0x49cdc6=_0x392fd1[_0x50dcdf(0x4c1)],_0x380fcd=_0x392fd1[_0x50dcdf(0x899)],_0x41fd4a=_0x392fd1[_0x50dcdf(0x5f8)],_0x408cb0=_0x392fd1[_0x50dcdf(0x727)],_0x3c5bf9=_0x392fd1[_0x50dcdf(0x670)],_0x558e36=_0x392fd1[_0x50dcdf(0xa6d)],_0x84caa0=_0x392fd1[_0x50dcdf(0x46d)];for(const _0xf1462b of _0x5e8ef4){if(_0x50dcdf(0x9e8)!==_0x50dcdf(0x54a)){if(!_0xf1462b)continue;const _0x3de0f9=_0xf1462b[_0x50dcdf(0x582)](),_0x36c0dc=Math[_0x50dcdf(0x8d4)](_0x49cdc6*_0xf1462b['mhp']+_0x380fcd),_0x16cfd6=Math[_0x50dcdf(0x8d4)](_0x41fd4a*_0xf1462b[_0x50dcdf(0x481)]+_0x408cb0),_0x12551d=Math[_0x50dcdf(0x8d4)](_0x3c5bf9*_0xf1462b[_0x50dcdf(0x3af)]()+_0x558e36);if(_0x36c0dc!==0x0)_0xf1462b[_0x50dcdf(0xa65)](_0x36c0dc);if(_0x16cfd6!==0x0)_0xf1462b[_0x50dcdf(0x348)](_0x16cfd6);if(_0x12551d!==0x0)_0xf1462b[_0x50dcdf(0x625)](_0x12551d);if(_0x84caa0)_0xf1462b[_0x50dcdf(0x85a)]();_0x3de0f9&&_0xf1462b[_0x50dcdf(0x43f)]()&&_0xf1462b[_0x50dcdf(0x330)]();}else{function _0x31e323(){const _0x15140f=_0x50dcdf,_0x3ea615=_0x241461(_0x15f15f['$1']);this[_0x15140f(0x799)](_0x3ea615);}}}}),PluginManager[_0x534c3a(0x260)](pluginData['name'],'ActSeq_Mechanics_Immortal',_0x18b771=>{const _0x3816cc=_0x534c3a;if(!SceneManager[_0x3816cc(0xa8a)]())return;VisuMZ[_0x3816cc(0x96b)](_0x18b771,_0x18b771);const _0x5225a1=VisuMZ[_0x3816cc(0x128)](_0x18b771['Targets']);for(const _0x4f1091 of _0x5225a1){if(_0x3816cc(0x775)!==_0x3816cc(0x775)){function _0x3b1d1d(){const _0x846201=_0x3816cc;if(!this['_actor'])return;const _0x5f1a3b=this[_0x846201(0x84f)][_0x846201(0xa1e)]();for(const _0x315d36 of _0x5f1a3b){this[_0x846201(0x9cb)](_0x315d36[_0x846201(0x2ca)]()['trim']());}}}else{if(!_0x4f1091)continue;_0x4f1091[_0x3816cc(0x157)](_0x18b771[_0x3816cc(0x3aa)]);}}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x4bd),_0x4e7a43=>{const _0x1ca68f=_0x534c3a;if(!SceneManager[_0x1ca68f(0xa8a)]())return;VisuMZ[_0x1ca68f(0x96b)](_0x4e7a43,_0x4e7a43);const _0x1af2fa=BattleManager['_action'],_0x3a551b={'criticalHitRate':_0x4e7a43[_0x1ca68f(0x8b8)],'criticalHitFlat':_0x4e7a43[_0x1ca68f(0x842)],'criticalDmgRate':_0x4e7a43[_0x1ca68f(0x73a)],'criticalDmgFlat':_0x4e7a43[_0x1ca68f(0x865)],'damageRate':_0x4e7a43[_0x1ca68f(0x4c8)],'damageFlat':_0x4e7a43[_0x1ca68f(0x5b6)],'hitRate':_0x4e7a43[_0x1ca68f(0x53e)],'hitFlat':_0x4e7a43[_0x1ca68f(0xe1)]};_0x1af2fa[_0x1ca68f(0x3a0)]=_0x3a551b;}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0x8e2),_0x5cb792=>{const _0x2b2d3b=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2b2d3b(0x202)])return;VisuMZ[_0x2b2d3b(0x96b)](_0x5cb792,_0x5cb792);const _0x5432e2=VisuMZ[_0x2b2d3b(0x128)](_0x5cb792['Targets']);for(const _0x11f6b2 of _0x5432e2){if(!_0x11f6b2)continue;let _0x525f3e=_0x5cb792['CurrentTurn'],_0xa7f764=_0x5cb792[_0x2b2d3b(0x811)],_0x507c26=_0x5cb792[_0x2b2d3b(0x8ce)];BattleManager[_0x2b2d3b(0x620)][_0x2b2d3b(0x96f)](_0x11f6b2)?_0x525f3e+=_0x507c26:_0xa7f764+=_0x507c26,BattleManager[_0x2b2d3b(0x9ae)](_0x11f6b2,-_0x525f3e,![]),BattleManager[_0x2b2d3b(0x9ae)](_0x11f6b2,-_0xa7f764,!![]);}}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0x9eb),_0x508c35=>{const _0x3278b3=_0x534c3a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3278b3(0x96b)](_0x508c35,_0x508c35);const _0x468c72=[_0x3278b3(0x89f),'MAXMP',_0x3278b3(0x6f4),_0x3278b3(0x5a2),_0x3278b3(0x101),_0x3278b3(0x2aa),'AGI','LUK'],_0x35a60b=_0x508c35[_0x3278b3(0x6cc)],_0x40cb55=_0x508c35[_0x3278b3(0x520)],_0x50f4d9=VisuMZ['CreateActionSequenceTargets'](_0x508c35[_0x3278b3(0x689)]);for(const _0x487b2a of _0x50f4d9){if(!_0x487b2a)continue;for(const _0x746f3d of _0x35a60b){const _0x21a77b=_0x468c72[_0x3278b3(0xaa8)](_0x746f3d[_0x3278b3(0x2ca)]()[_0x3278b3(0x5a9)]());_0x21a77b>=0x0&&_0x21a77b<=0x7&&_0x487b2a[_0x3278b3(0x300)](_0x21a77b)&&_0x487b2a['removeBuff'](_0x21a77b);}for(const _0x23b2da of _0x40cb55){if(_0x3278b3(0xa0c)===_0x3278b3(0xf2)){function _0x372833(){const _0x298822=_0x3278b3;if(this['hasSvBattler']())this['_svBattlerSprite'][_0x298822(0x49e)](_0x1a005b);}}else{const _0x7b9ee9=_0x468c72[_0x3278b3(0xaa8)](_0x23b2da['toUpperCase']()[_0x3278b3(0x5a9)]());_0x7b9ee9>=0x0&&_0x7b9ee9<=0x7&&_0x487b2a['isDebuffAffected'](_0x7b9ee9)&&_0x487b2a[_0x3278b3(0x299)](_0x7b9ee9);}}}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x291),_0x3f9438=>{const _0x2b7397=_0x534c3a;if(!SceneManager[_0x2b7397(0xa8a)]())return;VisuMZ[_0x2b7397(0x96b)](_0x3f9438,_0x3f9438);const _0x1ca4a3=_0x3f9438['States'],_0x4ab566=VisuMZ[_0x2b7397(0x128)](_0x3f9438[_0x2b7397(0x689)]);for(const _0xf8356d of _0x4ab566){if(!_0xf8356d)continue;for(const _0x3b0345 of _0x1ca4a3){if(_0x2b7397(0x61e)!=='jqZaD'){function _0x3afcfc(){const _0x3e35a1=_0x2b7397;return this[_0x3e35a1(0xf8)]||this[_0x3e35a1(0x12b)]||this;}}else _0xf8356d[_0x2b7397(0xa78)](_0x3b0345);}}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x30f),_0x5813dc=>{const _0x2c1ff2=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;VisuMZ[_0x2c1ff2(0x96b)](_0x5813dc,_0x5813dc);const _0x450364=_0x5813dc[_0x2c1ff2(0x665)],_0x5a2b27=VisuMZ[_0x2c1ff2(0x128)](_0x5813dc[_0x2c1ff2(0x689)]),_0x3ba73f=_0x5813dc['ForceExploited'],_0xfc9933=_0x5813dc[_0x2c1ff2(0x42c)],_0x53ee1d=_0x5813dc[_0x2c1ff2(0x6dc)],_0x45356e=BattleManager[_0x2c1ff2(0x46a)];if(_0x450364){if('Trhqc'!==_0x2c1ff2(0x380))for(const _0x313aa9 of _0x5a2b27){if(!_0x313aa9)continue;if(_0x313aa9===user)continue;if(_0x3ba73f)_0x313aa9[_0x2c1ff2(0x68f)](![]);_0x313aa9[_0x2c1ff2(0x5b0)](BattleManager[_0x2c1ff2(0x90c)],_0x45356e);}else{function _0x36876f(){const _0x3eb51f=_0x2c1ff2;return _0xa458ba[_0x3eb51f(0x99e)][_0x3eb51f(0x1c7)][_0x3eb51f(0x63a)](this,_0x570360);}}}if(_0xfc9933&&BattleManager['_subject']){if(_0x53ee1d)BattleManager[_0x2c1ff2(0x90c)][_0x2c1ff2(0x68f)](![]);const _0x203a45=_0x5a2b27[0x0];BattleManager[_0x2c1ff2(0x6da)](_0x203a45,_0x45356e);}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x1ec),_0x53c692=>{const _0x3fed54=_0x534c3a;if(!SceneManager[_0x3fed54(0xa8a)]())return;if(!Imported[_0x3fed54(0x51f)])return;VisuMZ['ConvertParams'](_0x53c692,_0x53c692);const _0x41baeb=_0x53c692[_0x3fed54(0x2b6)];BattleManager[_0x3fed54(0x90c)]&&BattleManager[_0x3fed54(0x90c)][_0x3fed54(0xa33)](_0x41baeb);}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x72b),_0x4f44d6=>{const _0x4e5fbe=_0x534c3a;if(!SceneManager[_0x4e5fbe(0xa8a)]())return;if(!Imported[_0x4e5fbe(0x51f)])return;VisuMZ[_0x4e5fbe(0x96b)](_0x4f44d6,_0x4f44d6);let _0x2800ce=_0x4f44d6[_0x4e5fbe(0x2b6)];if(BattleManager[_0x4e5fbe(0x90c)]){if('CapFL'!==_0x4e5fbe(0x76d)){BattleManager[_0x4e5fbe(0x90c)][_0x4e5fbe(0xaa0)]=BattleManager['_subject'][_0x4e5fbe(0xaa0)]||[];while(_0x2800ce--){if(BattleManager['_subject'][_0x4e5fbe(0xaa0)][_0x4e5fbe(0x4a2)]<=0x0)break;BattleManager[_0x4e5fbe(0x90c)][_0x4e5fbe(0xaa0)][_0x4e5fbe(0x8bc)]();}}else{function _0x1c9514(){_0xae36d5=_0x2004f2>=_0x43af32?_0x3f03c1:_0x28e082;}}}}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],'ActSeq_Mechanics_SwapWeapon',_0x206d69=>{const _0x2e7f61=_0x534c3a;if(!SceneManager[_0x2e7f61(0xa8a)]())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ[_0x2e7f61(0x96b)](_0x206d69,_0x206d69);const _0x475fde=VisuMZ[_0x2e7f61(0x128)](_0x206d69[_0x2e7f61(0x689)]),_0x5cef3d=_0x206d69[_0x2e7f61(0xa35)];for(const _0x4128a2 of _0x475fde){if(_0x2e7f61(0x240)===_0x2e7f61(0x522)){function _0x3e1379(){_0x2f240b=!_0x59da8a;}}else{if(!_0x4128a2)continue;if(!_0x4128a2[_0x2e7f61(0x1e7)]())continue;_0x4128a2[_0x2e7f61(0xa12)](_0x5cef3d);}}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x3f3),_0x33a25f=>{const _0x463a5f=_0x534c3a;if(!SceneManager[_0x463a5f(0xa8a)]())return;VisuMZ[_0x463a5f(0x96b)](_0x33a25f,_0x33a25f);const _0x63beab=VisuMZ['CreateActionSequenceTargets'](_0x33a25f['Targets']),_0x4e05e7=_0x33a25f[_0x463a5f(0x859)],_0x32815b={'textColor':ColorManager['getColor'](_0x33a25f[_0x463a5f(0x880)]),'flashColor':_0x33a25f[_0x463a5f(0x201)],'flashDuration':_0x33a25f['FlashDuration']};for(const _0x2e663b of _0x63beab){if(!_0x2e663b)continue;_0x2e663b[_0x463a5f(0x207)](_0x4e05e7,_0x32815b);}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x9e1),_0x106115=>{const _0x3a0ba7=_0x534c3a;if(!SceneManager[_0x3a0ba7(0xa8a)]())return;VisuMZ[_0x3a0ba7(0x96b)](_0x106115,_0x106115);const _0x1cf647=VisuMZ[_0x3a0ba7(0x128)](_0x106115[_0x3a0ba7(0x689)]);let _0x16bade=$gameVariables['value'](_0x106115[_0x3a0ba7(0x5c4)]);Imported[_0x3a0ba7(0x9fc)]&&_0x106115['DigitGrouping']&&(_0x16bade=VisuMZ[_0x3a0ba7(0x9a0)](_0x16bade));const _0x3a92f4=String(_0x16bade),_0xfcbdb9={'textColor':ColorManager[_0x3a0ba7(0x263)](_0x106115['TextColor']),'flashColor':_0x106115[_0x3a0ba7(0x201)],'flashDuration':_0x106115['FlashDuration']};for(const _0x373732 of _0x1cf647){if(_0x3a0ba7(0x5f3)!==_0x3a0ba7(0x7c5)){if(!_0x373732)continue;_0x373732[_0x3a0ba7(0x207)](_0x3a92f4,_0xfcbdb9);}else{function _0x1f0422(){const _0xcb9ab6=_0x3a0ba7;if(_0x3380a1===_0x5225df[_0xcb9ab6(0x4c5)]())return![];}}}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x713),_0x2d956b=>{const _0x527985=_0x534c3a;if(!SceneManager['isSceneBattle']())return;const _0x7c978a=$gameTemp[_0x527985(0xa1d)]();if(!_0x7c978a)return;_0x7c978a[_0x527985(0x387)]('battleEffect');}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x22f),_0x2298cf=>{const _0x1b72a4=_0x534c3a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1b72a4(0x96b)](_0x2298cf,_0x2298cf);const _0xe43402=VisuMZ[_0x1b72a4(0x128)](_0x2298cf[_0x1b72a4(0x689)]);for(const _0x512f23 of _0xe43402){if(!_0x512f23)continue;_0x512f23[_0x1b72a4(0x2dd)]();}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Motion_FreezeMotionFrame',_0x567a7b=>{const _0x1fa961=_0x534c3a;if(!SceneManager[_0x1fa961(0xa8a)]())return;VisuMZ[_0x1fa961(0x96b)](_0x567a7b,_0x567a7b);const _0x32a306=VisuMZ[_0x1fa961(0x128)](_0x567a7b[_0x1fa961(0x689)]),_0x5e570=_0x567a7b['MotionType'][_0x1fa961(0x6c5)]()['trim'](),_0x5ffbc1=_0x567a7b[_0x1fa961(0xeb)],_0x3d8c27=_0x567a7b[_0x1fa961(0x71b)];for(const _0x1b7d44 of _0x32a306){if(!_0x1b7d44)continue;_0x1b7d44['freezeMotion'](_0x5e570,_0x5ffbc1,_0x3d8c27);}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x67d),_0x261178=>{const _0x17f093=_0x534c3a;if(!SceneManager[_0x17f093(0xa8a)]())return;VisuMZ['ConvertParams'](_0x261178,_0x261178);const _0x40d69e=VisuMZ[_0x17f093(0x128)](_0x261178[_0x17f093(0x689)]),_0xf3b480=_0x261178[_0x17f093(0x306)][_0x17f093(0x6c5)]()[_0x17f093(0x5a9)](),_0x10a6e2=_0x261178['ShowWeapon'];for(const _0x882f00 of _0x40d69e){if(!_0x882f00)continue;if(_0xf3b480[_0x17f093(0x5ed)](/ATTACK[ ](\d+)/i))_0x882f00[_0x17f093(0xa44)](Number(RegExp['$1']));else{if(_0xf3b480==='attack')_0x882f00[_0x17f093(0x784)]();else{if(_0x17f093(0x9da)===_0x17f093(0x7b6)){function _0x558b05(){const _0x29a040=_0x17f093;return _0xef2545[_0x29a040(0x650)][_0x29a040(0x5ed)](/<COMMAND TEXT: (.*)>/i)?_0x4f0bd9(_0x1058f5['$1']):_0x57e24d['name'];}}else _0x882f00[_0x17f093(0x961)](_0xf3b480);}}if(!_0x10a6e2){if('YAUjY'!==_0x17f093(0x6fb))_0x882f00[_0x17f093(0x500)](0x0);else{function _0x594f20(){const _0x5315b8=_0x17f093,_0x564e84=this['commandName'](_0x821a1a);if(_0x564e84['match'](/\\I\[(\d+)\]/i)){const _0x1efcf7=this[_0x5315b8(0x586)](_0x500c29),_0xf09585=this['textSizeEx'](_0x564e84)[_0x5315b8(0x456)];return _0xf09585<=_0x1efcf7['width']?_0x5315b8(0x68a):_0x5315b8(0x92c);}}}}else{if(_0x10a6e2&&['thrust','swing',_0x17f093(0x782)][_0x17f093(0x96f)](_0xf3b480)){}}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Motion_PerformAction',_0x4fbe89=>{const _0x228192=_0x534c3a;if(!SceneManager[_0x228192(0xa8a)]())return;VisuMZ['ConvertParams'](_0x4fbe89,_0x4fbe89);const _0x294094=BattleManager[_0x228192(0x46a)];if(!_0x294094)return;if(!_0x294094['item']())return;const _0x1f61a2=VisuMZ[_0x228192(0x128)](_0x4fbe89[_0x228192(0x689)]);for(const _0x1cedb5 of _0x1f61a2){if('eYsSQ'===_0x228192(0x3e0)){if(!_0x1cedb5)continue;_0x1cedb5[_0x228192(0xa80)](_0x294094);}else{function _0x29c06b(){const _0x5aff54=_0x228192;this[_0x5aff54(0x12b)]['bitmap'][_0x5aff54(0x74b)]!==this[_0x5aff54(0x679)][_0x5aff54(0x61c)]()&&(this[_0x5aff54(0x12b)][_0x5aff54(0xa72)][_0x5aff54(0x74b)]=this['_battler'][_0x5aff54(0x61c)]());}}}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x888),_0x5860a4=>{const _0x4040b5=_0x534c3a;if(!SceneManager[_0x4040b5(0xa8a)]())return;VisuMZ['ConvertParams'](_0x5860a4,_0x5860a4);const _0x516570=VisuMZ[_0x4040b5(0x128)](_0x5860a4[_0x4040b5(0x689)]);for(const _0x56018b of _0x516570){if(!_0x56018b)continue;if(!_0x56018b[_0x4040b5(0x7c4)]())continue;_0x56018b['battler']()[_0x4040b5(0x26e)]();}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x703),_0x4f0e6e=>{const _0x3cd253=_0x534c3a;if(!SceneManager[_0x3cd253(0xa8a)]())return;VisuMZ[_0x3cd253(0x96b)](_0x4f0e6e,_0x4f0e6e);const _0xf6511=$gameTemp[_0x3cd253(0xa1d)](),_0x30c47d=_0x4f0e6e[_0x3cd253(0x812)]*Sprite_Battler[_0x3cd253(0xa1f)];_0xf6511[_0x3cd253(0x41c)](_0x30c47d);}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x8af),_0x45bfb6=>{const _0x54af82=_0x534c3a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x54af82(0x96b)](_0x45bfb6,_0x45bfb6);const _0x2ca4ca=$gameTemp[_0x54af82(0xa1d)](),_0x4cf0c9=BattleManager[_0x54af82(0x46a)];if(!_0x2ca4ca||!_0x4cf0c9)return;if(!_0x4cf0c9['item']())return;const _0x4392e4=VisuMZ['CreateActionSequenceTargets'](_0x45bfb6[_0x54af82(0x689)]);for(const _0x4658c0 of _0x4392e4){if(!_0x4658c0)continue;_0x4658c0[_0x54af82(0x110)](_0x4cf0c9);}if(_0x45bfb6[_0x54af82(0x8f2)])_0x2ca4ca['setWaitMode'](_0x54af82(0xa71));}),PluginManager[_0x534c3a(0x260)](pluginData['name'],'ActSeq_Movement_FaceDirection',_0x54a5e4=>{const _0x3c6ae7=_0x534c3a;if(!SceneManager[_0x3c6ae7(0xa8a)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x54a5e4,_0x54a5e4);const _0x4aba5d=VisuMZ[_0x3c6ae7(0x128)](_0x54a5e4[_0x3c6ae7(0x689)]);let _0x49e3b9=_0x54a5e4[_0x3c6ae7(0x2a1)][_0x3c6ae7(0x5ed)](/back/i);for(const _0x51c5e9 of _0x4aba5d){if('QAOOH'!==_0x3c6ae7(0x4ec)){if(!_0x51c5e9)continue;if(_0x54a5e4[_0x3c6ae7(0x2a1)][_0x3c6ae7(0x5ed)](/rand/i))_0x49e3b9=Math[_0x3c6ae7(0x676)](0x2);_0x51c5e9[_0x3c6ae7(0x5b3)](!!_0x49e3b9);}else{function _0x14fb5d(){const _0x1e84fd=_0x3c6ae7,_0x436276=this[_0x1e84fd(0x7c4)]();_0x436276&&(_0x436276['forceMotion'](_0x218792),[_0x1e84fd(0x3ce),'thrust',_0x1e84fd(0x948)][_0x1e84fd(0x96f)](_0x56d836)&&this[_0x1e84fd(0x87a)]());}}}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Movement_FacePoint',_0x2770f7=>{const _0x22bb2f=_0x534c3a;if(!SceneManager[_0x22bb2f(0xa8a)]())return;if(!$gameSystem[_0x22bb2f(0x4d6)]())return;VisuMZ[_0x22bb2f(0x96b)](_0x2770f7,_0x2770f7);const _0xecd892=VisuMZ[_0x22bb2f(0x128)](_0x2770f7[_0x22bb2f(0x689)]);let _0x295e81=_0x2770f7[_0x22bb2f(0x535)];const _0x41e73d=_0x2770f7[_0x22bb2f(0x912)];for(const _0x2d3905 of _0xecd892){if(!_0x2d3905)continue;let _0x24b7a7=_0x2d3905['battler']()[_0x22bb2f(0x674)],_0x3ab4f4=_0x2d3905[_0x22bb2f(0x7c4)]()[_0x22bb2f(0x2df)];if(_0x295e81['match'](/home/i))_0x24b7a7=_0x2d3905['battler']()[_0x22bb2f(0x97e)],_0x3ab4f4=_0x2d3905[_0x22bb2f(0x7c4)]()[_0x22bb2f(0x5c2)];else{if(_0x295e81[_0x22bb2f(0x5ed)](/center/i))_0x24b7a7=Graphics[_0x22bb2f(0x29c)]/0x2,_0x3ab4f4=Graphics[_0x22bb2f(0x29d)]/0x2;else{if(_0x295e81[_0x22bb2f(0x5ed)](/point (\d+), (\d+)/i)){if('wCrbV'!==_0x22bb2f(0x2e8))_0x24b7a7=Number(RegExp['$1']),_0x3ab4f4=Number(RegExp['$2']);else{function _0x33ebe9(){const _0xfa61fb=_0x22bb2f;this[_0xfa61fb(0xa86)]();}}}}}_0x2d3905['setBattlerFacePoint'](Math[_0x22bb2f(0x8d4)](_0x24b7a7),Math['round'](_0x3ab4f4),!!_0x41e73d);}}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0x9d4),_0x41d056=>{const _0x5f0daa=_0x534c3a;if(!SceneManager[_0x5f0daa(0xa8a)]())return;if(!$gameSystem[_0x5f0daa(0x4d6)]())return;VisuMZ[_0x5f0daa(0x96b)](_0x41d056,_0x41d056);const _0x4b07aa=VisuMZ[_0x5f0daa(0x128)](_0x41d056['Targets1']),_0x3fa9b3=VisuMZ[_0x5f0daa(0x128)](_0x41d056['Targets2']),_0x44bf1a=_0x3fa9b3[_0x5f0daa(0x406)](_0x1ba2f3=>_0x1ba2f3&&_0x1ba2f3[_0x5f0daa(0x7c4)]()?_0x1ba2f3[_0x5f0daa(0x7c4)]()[_0x5f0daa(0x674)]:0x0)/(_0x3fa9b3['length']||0x1),_0x3f3975=_0x3fa9b3[_0x5f0daa(0x406)](_0x2c8489=>_0x2c8489&&_0x2c8489[_0x5f0daa(0x7c4)]()?_0x2c8489[_0x5f0daa(0x7c4)]()['_baseY']:0x0)/(_0x3fa9b3[_0x5f0daa(0x4a2)]||0x1),_0x2f197c=_0x41d056[_0x5f0daa(0x912)];for(const _0x4c042c of _0x4b07aa){if(_0x5f0daa(0x583)===_0x5f0daa(0x583)){if(!_0x4c042c)continue;_0x4c042c['setBattlerFacePoint'](Math['round'](_0x44bf1a),Math[_0x5f0daa(0x8d4)](_0x3f3975),!!_0x2f197c);}else{function _0x5d4bf6(){const _0x58d1f6=_0x5f0daa;return this[_0x58d1f6(0x944)]();}}}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Movement_Float',_0x3537b4=>{const _0xcbab7e=_0x534c3a;if(!SceneManager[_0xcbab7e(0xa8a)]())return;VisuMZ[_0xcbab7e(0x96b)](_0x3537b4,_0x3537b4);const _0x513c30=$gameTemp['getLastPluginCommandInterpreter'](),_0x4a5e3b=VisuMZ['CreateActionSequenceTargets'](_0x3537b4[_0xcbab7e(0x689)]),_0x2490d0=_0x3537b4['Height'],_0x560289=_0x3537b4[_0xcbab7e(0x969)],_0x4fab96=_0x3537b4[_0xcbab7e(0x2a9)],_0x5e9cc6=_0x3537b4['WaitForFloat'];if(!_0x513c30)return;for(const _0x3d3fa1 of _0x4a5e3b){if(!_0x3d3fa1)continue;_0x3d3fa1[_0xcbab7e(0x8bd)](_0x2490d0,_0x560289,_0x4fab96);}if(_0x5e9cc6)_0x513c30[_0xcbab7e(0x387)]('battleFloat');}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x44d),_0xde6f7a=>{const _0x4077d9=_0x534c3a;if(!SceneManager[_0x4077d9(0xa8a)]())return;VisuMZ['ConvertParams'](_0xde6f7a,_0xde6f7a);const _0x5b2878=$gameTemp[_0x4077d9(0xa1d)]();if(!_0x5b2878)return;const _0x3e1839=VisuMZ['CreateActionSequenceTargets'](_0xde6f7a[_0x4077d9(0x689)]);for(const _0x156948 of _0x3e1839){if(!_0x156948)continue;_0x156948[_0x4077d9(0x4ad)](),_0x156948[_0x4077d9(0x33b)]();}if(_0xde6f7a[_0x4077d9(0x8f2)])_0x5b2878[_0x4077d9(0x387)](_0x4077d9(0xa71));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x6e8),_0x572686=>{const _0x126e1a=_0x534c3a;if(!SceneManager[_0x126e1a(0xa8a)]())return;VisuMZ[_0x126e1a(0x96b)](_0x572686,_0x572686);const _0x587e23=$gameTemp[_0x126e1a(0xa1d)](),_0xf3f419=VisuMZ[_0x126e1a(0x128)](_0x572686[_0x126e1a(0x689)]),_0x2afee8=_0x572686[_0x126e1a(0xde)],_0x505d8a=_0x572686[_0x126e1a(0x969)],_0x3760e6=_0x572686[_0x126e1a(0x829)];if(!_0x587e23)return;for(const _0x56b261 of _0xf3f419){if(_0x126e1a(0x907)===_0x126e1a(0x83f)){function _0x4bf6e7(){const _0x4e9cb3=_0x126e1a;_0x38e05f['x']=_0x507067['x']+_0x2c49ce[_0x4e9cb3(0x489)]*_0x385670,_0x54a3ad['y']=_0x16be40['y']+_0x21bbeb['PopupShiftY'];}}else{if(!_0x56b261)continue;_0x56b261['jumpBattler'](_0x2afee8,_0x505d8a);}}if(_0x3760e6)_0x587e23[_0x126e1a(0x387)](_0x126e1a(0x7a6));}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0x7f1),_0x9b7fc3=>{const _0x43866e=_0x534c3a;if(!SceneManager[_0x43866e(0xa8a)]())return;if(!$gameSystem[_0x43866e(0x4d6)]())return;VisuMZ[_0x43866e(0x96b)](_0x9b7fc3,_0x9b7fc3);const _0x2d88a1=$gameTemp[_0x43866e(0xa1d)](),_0x18b718=VisuMZ[_0x43866e(0x128)](_0x9b7fc3[_0x43866e(0x689)]),_0xbfa6e1=_0x9b7fc3[_0x43866e(0x987)],_0x58bd57=_0x9b7fc3[_0x43866e(0x2fc)],_0x5951b9=_0x9b7fc3['DistanceY'],_0x1e5ea1=_0x9b7fc3[_0x43866e(0x969)],_0x360f7c=_0x9b7fc3[_0x43866e(0x3fc)],_0x26d3f9=_0x9b7fc3[_0x43866e(0x2a9)],_0x473033=_0x9b7fc3[_0x43866e(0x306)],_0x3752e5=_0x9b7fc3[_0x43866e(0x8f2)];if(!_0x2d88a1)return;for(const _0x6ab7f7 of _0x18b718){if(_0x43866e(0x293)!==_0x43866e(0x293)){function _0x1efee4(){const _0x277c21=_0x43866e,_0x48d0c2=this[_0x277c21(0x591)]();if(_0x48d0c2&&this[_0x277c21(0x52c)]<0xff)this[_0x277c21(0x52c)]+=0x10;else!_0x48d0c2&&this['opacity']>0x0&&(this[_0x277c21(0x52c)]-=0x10);}}else{if(!_0x6ab7f7)continue;let _0x5abaa3=_0x58bd57,_0x4b40c7=_0x5951b9;if(_0xbfa6e1[_0x43866e(0x5ed)](/horz/i))_0x5abaa3*=_0x6ab7f7['isActor']()?-0x1:0x1;if(_0xbfa6e1['match'](/vert/i))_0x4b40c7*=_0x6ab7f7[_0x43866e(0x1e7)]()?-0x1:0x1;_0x6ab7f7[_0x43866e(0x6e3)](_0x5abaa3,_0x4b40c7,_0x1e5ea1,_0x360f7c,_0x26d3f9),_0x6ab7f7[_0x43866e(0x961)](_0x473033);}}if(_0x3752e5)_0x2d88a1['setWaitMode'](_0x43866e(0xa71));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x5fc),_0x153765=>{const _0x5ef914=_0x534c3a;if(!SceneManager[_0x5ef914(0xa8a)]())return;if(!$gameSystem[_0x5ef914(0x4d6)]())return;VisuMZ[_0x5ef914(0x96b)](_0x153765,_0x153765);const _0x36e455=$gameTemp[_0x5ef914(0xa1d)](),_0x4c79aa=VisuMZ['CreateActionSequenceTargets'](_0x153765[_0x5ef914(0x689)]),_0xfd7afc=_0x153765[_0x5ef914(0xa7f)],_0x1cefae=_0x153765[_0x5ef914(0x816)],_0x2bb531=_0x153765[_0x5ef914(0x69d)],_0x5b8421=_0x153765[_0x5ef914(0xa49)],_0x3678fd=_0x153765[_0x5ef914(0x969)],_0x46573a=_0x153765[_0x5ef914(0x3fc)],_0x5c19e5=_0x153765[_0x5ef914(0x2a9)],_0x1baf1d=_0x153765[_0x5ef914(0x306)],_0x54f6e7=_0x153765[_0x5ef914(0x8f2)];if(!_0x36e455)return;for(const _0x2a1e87 of _0x4c79aa){if(!_0x2a1e87)continue;let _0x203b89=_0x2a1e87['battler']()[_0x5ef914(0x674)],_0x56afee=_0x2a1e87[_0x5ef914(0x7c4)]()[_0x5ef914(0x2df)];if(_0xfd7afc['match'](/home/i)){if(_0x5ef914(0xe4)!=='XTRvk'){function _0x58d4da(){const _0xd4f022=_0x5ef914;if(_0x993ebc[_0xd4f022(0xa8a)]()){const _0x531cc3=this[_0xd4f022(0xdd)]();this[_0xd4f022(0x500)](_0x531cc3);}}}else _0x203b89=_0x2a1e87[_0x5ef914(0x7c4)]()[_0x5ef914(0x97e)],_0x56afee=_0x2a1e87['battler']()[_0x5ef914(0x5c2)];}else{if(_0xfd7afc[_0x5ef914(0x5ed)](/center/i)){if(_0x5ef914(0x835)!=='RfeuA')_0x203b89=Graphics[_0x5ef914(0x29c)]/0x2,_0x56afee=Graphics[_0x5ef914(0x29d)]/0x2;else{function _0x59c3fa(){const _0x33f9ae=_0x5ef914;if(!this[_0x33f9ae(0x12b)])return;if(!this[_0x33f9ae(0x5d7)])return;this[_0x33f9ae(0xa18)](),this[_0x33f9ae(0x762)]();}}}else{if(_0xfd7afc[_0x5ef914(0x5ed)](/point (\d+), (\d+)/i)){if(_0x5ef914(0x53a)===_0x5ef914(0x1d6)){function _0x2583b7(){const _0xd864b6=_0x5ef914;return this[_0xd864b6(0x678)](_0x5a5757(_0x33ca61));}}else _0x203b89=Number(RegExp['$1']),_0x56afee=Number(RegExp['$2']);}}}if(_0x1cefae[_0x5ef914(0x5ed)](/none/i))_0x203b89+=_0x2bb531,_0x56afee+=_0x5b8421;else{if(_0x1cefae[_0x5ef914(0x5ed)](/horz/i)&&_0x1cefae[_0x5ef914(0x5ed)](/vert/i))_0x203b89+=_0x2a1e87[_0x5ef914(0x1e7)]()?-_0x2bb531:_0x2bb531,_0x56afee+=_0x2a1e87[_0x5ef914(0x1e7)]()?-_0x5b8421:_0x5b8421;else{if(_0x1cefae[_0x5ef914(0x5ed)](/horz/i))_0x203b89+=_0x2a1e87[_0x5ef914(0x1e7)]()?-_0x2bb531:_0x2bb531,_0x56afee+=_0x5b8421;else{if(_0x1cefae[_0x5ef914(0x5ed)](/vert/i)){if(_0x5ef914(0x825)!=='APNhM')_0x203b89+=_0x2bb531,_0x56afee+=_0x2a1e87[_0x5ef914(0x1e7)]()?-_0x5b8421:_0x5b8421;else{function _0x1549ae(){const _0x3f68a3=_0x5ef914;if(this[_0x3f68a3(0x5d3)]){const _0x144355=this['_dimmerSprite']['bitmap'],_0x301845=this[_0x3f68a3(0x456)]-0x8,_0x39330b=this[_0x3f68a3(0x363)],_0x35387=this['padding'],_0x58d0f1=_0x3f99c0[_0x3f68a3(0x7c1)](),_0x599449=_0x8aa42f[_0x3f68a3(0x7cd)]();this[_0x3f68a3(0x5d3)]['x']=0x4,_0x144355[_0x3f68a3(0x56a)](_0x301845,_0x39330b),_0x144355[_0x3f68a3(0x5ab)](0x0,0x0,_0x301845,_0x35387,_0x599449,_0x58d0f1,!![]),_0x144355[_0x3f68a3(0x1b1)](0x0,_0x35387,_0x301845,_0x39330b-_0x35387*0x2,_0x58d0f1),_0x144355[_0x3f68a3(0x5ab)](0x0,_0x39330b-_0x35387,_0x301845,_0x35387,_0x58d0f1,_0x599449,!![]),this[_0x3f68a3(0x5d3)][_0x3f68a3(0x819)](0x0,0x0,_0x301845,_0x39330b);}}}}}}}_0x2a1e87[_0x5ef914(0xa42)](_0x203b89,_0x56afee,_0x3678fd,_0x46573a,_0x5c19e5,-0x1),_0x2a1e87['requestMotion'](_0x1baf1d);}if(_0x54f6e7)_0x36e455['setWaitMode'](_0x5ef914(0xa71));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_MoveToTarget',_0x9add=>{const _0x7cfa73=_0x534c3a;if(!SceneManager[_0x7cfa73(0xa8a)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x7cfa73(0x96b)](_0x9add,_0x9add);const _0xec0da9=$gameTemp[_0x7cfa73(0xa1d)](),_0x14872a=VisuMZ['CreateActionSequenceTargets'](_0x9add[_0x7cfa73(0x38c)]),_0x103637=VisuMZ[_0x7cfa73(0x128)](_0x9add[_0x7cfa73(0xa9b)]),_0x1a3f7c=_0x9add['TargetLocation'];let _0x40d2e6=_0x9add[_0x7cfa73(0xa5f)];const _0x20991f=_0x9add['OffsetAdjust'],_0x5df4ec=_0x9add[_0x7cfa73(0x69d)],_0x31a344=_0x9add['OffsetY'],_0x1b5139=_0x9add[_0x7cfa73(0x969)],_0x1d3e22=_0x9add['FaceDirection'],_0x325e85=_0x9add[_0x7cfa73(0x2a9)],_0xac3641=_0x9add[_0x7cfa73(0x306)],_0x584885=_0x9add['WaitForMovement'],_0x4342f6=Math[_0x7cfa73(0x623)](..._0x103637[_0x7cfa73(0x406)](_0x533834=>_0x533834[_0x7cfa73(0x7c4)]()['_baseX']-_0x533834[_0x7cfa73(0x7c4)]()[_0x7cfa73(0x7f5)]()/0x2)),_0x518f18=Math[_0x7cfa73(0x9a7)](..._0x103637['map'](_0x3be223=>_0x3be223[_0x7cfa73(0x7c4)]()[_0x7cfa73(0x674)]+_0x3be223[_0x7cfa73(0x7c4)]()[_0x7cfa73(0x7f5)]()/0x2)),_0x4ed710=Math[_0x7cfa73(0x623)](..._0x103637['map'](_0x38a0e0=>_0x38a0e0[_0x7cfa73(0x7c4)]()[_0x7cfa73(0x2df)]-_0x38a0e0[_0x7cfa73(0x7c4)]()[_0x7cfa73(0x8fd)]())),_0x516b78=Math[_0x7cfa73(0x9a7)](..._0x103637[_0x7cfa73(0x406)](_0xe7a9a1=>_0xe7a9a1[_0x7cfa73(0x7c4)]()['_baseY'])),_0x3b86a0=_0x103637['filter'](_0x32aeed=>_0x32aeed[_0x7cfa73(0x1e7)]())['length'],_0x38361c=_0x103637[_0x7cfa73(0x193)](_0x51e065=>_0x51e065['isEnemy']())[_0x7cfa73(0x4a2)];let _0x46b5a5=0x0,_0x101acf=0x0;if(_0x1a3f7c[_0x7cfa73(0x5ed)](/front/i))_0x46b5a5=_0x3b86a0>=_0x38361c?_0x4342f6:_0x518f18;else{if(_0x1a3f7c[_0x7cfa73(0x5ed)](/middle/i)){if('SslAf'===_0x7cfa73(0x739)){function _0xfeaf59(){const _0x1c09a8=_0x7cfa73;this[_0x1c09a8(0x14e)]();}}else _0x46b5a5=(_0x4342f6+_0x518f18)/0x2,_0x40d2e6=-0x1;}else _0x1a3f7c[_0x7cfa73(0x5ed)](/back/i)&&(_0x46b5a5=_0x3b86a0>=_0x38361c?_0x518f18:_0x4342f6);}if(_0x1a3f7c[_0x7cfa73(0x5ed)](/head/i))_0x101acf=_0x4ed710;else{if(_0x1a3f7c[_0x7cfa73(0x5ed)](/center/i)){if(_0x7cfa73(0x730)===_0x7cfa73(0x546)){function _0x482d9f(){_0x2b5b5e['setActiveWeaponSlot'](_0x4d8e96);}}else _0x101acf=(_0x4ed710+_0x516b78)/0x2;}else _0x1a3f7c[_0x7cfa73(0x5ed)](/base/i)&&(_0x101acf=_0x516b78);}if(!_0xec0da9)return;for(const _0x546880 of _0x14872a){if(!_0x546880)continue;let _0x248e9a=_0x46b5a5,_0x229294=_0x101acf;if(_0x20991f[_0x7cfa73(0x5ed)](/none/i))_0x248e9a+=_0x5df4ec,_0x229294+=_0x31a344;else{if(_0x20991f[_0x7cfa73(0x5ed)](/horz/i)&&_0x20991f[_0x7cfa73(0x5ed)](/vert/i)){if('PNQGj'!==_0x7cfa73(0x81e)){function _0x236c11(){const _0x2b9e4b=_0x7cfa73,_0x35cba0=_0x4cd5ef[_0x2b9e4b(0x99e)][_0x2b9e4b(0x795)]['Enemy'];if(_0x35cba0[_0x2b9e4b(0x5a6)]&&!_0x35cba0['NameLegacy']){this[_0x2b9e4b(0x476)][_0x2b9e4b(0x52c)]=0x0;return;}this[_0x2b9e4b(0x476)]['x']=0x0,this[_0x2b9e4b(0x476)]['x']+=this[_0x2b9e4b(0x679)]['battleUIOffsetX'](),this['_stateIconSprite']['y']=-this[_0x2b9e4b(0xa72)]['height']-this[_0x2b9e4b(0x476)]['height'],this[_0x2b9e4b(0x476)]['y']+=this[_0x2b9e4b(0x679)][_0x2b9e4b(0x832)](),this[_0x2b9e4b(0x476)]['scale']['x']=0x1/(this[_0x2b9e4b(0x43e)]['x']||0.001),this[_0x2b9e4b(0x476)]['scale']['y']=0x1/(this[_0x2b9e4b(0x43e)]['y']||0.001),this[_0x2b9e4b(0x5a1)]()&&(this[_0x2b9e4b(0x7dd)][_0x2b9e4b(0x3d2)][_0x2b9e4b(0x43e)]['x']=-0x1/(this[_0x2b9e4b(0x43e)]['x']||0.001),this[_0x2b9e4b(0x7dd)][_0x2b9e4b(0x3d2)]['scale']['y']=0x1/(this[_0x2b9e4b(0x43e)]['y']||0.001));}}else _0x248e9a+=_0x546880[_0x7cfa73(0x1e7)]()?-_0x5df4ec:_0x5df4ec,_0x229294+=_0x546880[_0x7cfa73(0x1e7)]()?-_0x31a344:_0x31a344;}else{if(_0x20991f[_0x7cfa73(0x5ed)](/horz/i))_0x248e9a+=_0x546880[_0x7cfa73(0x1e7)]()?-_0x5df4ec:_0x5df4ec,_0x229294+=_0x31a344;else{if(_0x20991f['match'](/vert/i)){if(_0x7cfa73(0x957)!==_0x7cfa73(0x957)){function _0x1486b1(){const _0x4968de=_0x7cfa73;_0x412b50[_0x4968de(0x383)]();}}else _0x248e9a+=_0x5df4ec,_0x229294+=_0x546880[_0x7cfa73(0x1e7)]()?-_0x31a344:_0x31a344;}}}}_0x546880['moveBattlerToPoint'](_0x248e9a,_0x229294,_0x1b5139,_0x1d3e22,_0x325e85,_0x40d2e6),_0x546880[_0x7cfa73(0x961)](_0xac3641);}if(_0x584885)_0xec0da9[_0x7cfa73(0x387)](_0x7cfa73(0xa71));}),PluginManager[_0x534c3a(0x260)](pluginData['name'],'ActSeq_Movement_Opacity',_0x22198=>{const _0x26a36f=_0x534c3a;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x22198,_0x22198);const _0x303aa2=$gameTemp[_0x26a36f(0xa1d)](),_0x577546=VisuMZ[_0x26a36f(0x128)](_0x22198['Targets']),_0x4487c9=_0x22198[_0x26a36f(0x15f)],_0x121e1f=_0x22198[_0x26a36f(0x969)],_0x7af435=_0x22198[_0x26a36f(0x2a9)],_0x3e1967=_0x22198[_0x26a36f(0x945)];if(!_0x303aa2)return;for(const _0x416ee3 of _0x577546){if(!_0x416ee3)continue;_0x416ee3['changeBattlerOpacity'](_0x4487c9,_0x121e1f,_0x7af435);}if(_0x3e1967)_0x303aa2['setWaitMode'](_0x26a36f(0x503));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x3e6),_0x1666f1=>{const _0x53c5c7=_0x534c3a;if(!SceneManager[_0x53c5c7(0xa8a)]())return;VisuMZ[_0x53c5c7(0x96b)](_0x1666f1,_0x1666f1);const _0x5bb7e3=$gameTemp[_0x53c5c7(0xa1d)](),_0x9c5ed1=VisuMZ[_0x53c5c7(0x128)](_0x1666f1[_0x53c5c7(0x689)]),_0x19de78=_0x1666f1[_0x53c5c7(0x946)],_0x4a9310=_0x1666f1[_0x53c5c7(0xee)],_0x159ef7=_0x1666f1['Duration'],_0x2e5c5e=_0x1666f1[_0x53c5c7(0x2a9)],_0x97e83a=_0x1666f1[_0x53c5c7(0x64b)];if(!_0x5bb7e3)return;for(const _0x55f688 of _0x9c5ed1){if(_0x53c5c7(0x477)!==_0x53c5c7(0x5da)){if(!_0x55f688)continue;_0x55f688[_0x53c5c7(0x3b4)](_0x19de78,_0x4a9310,_0x159ef7,_0x2e5c5e);}else{function _0x2c4a93(){const _0x4f9018=_0x53c5c7;if(_0x326db0)_0x1b0870['_subject']['setSTBExploited'](![]);const _0x349afc=_0x4cfdb9[0x0];_0x1539ea[_0x4f9018(0x6da)](_0x349afc,_0x14f3f2);}}}if(_0x97e83a)_0x5bb7e3[_0x53c5c7(0x387)]('battleGrow');}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Movement_Skew',_0x4abc68=>{const _0x3c802b=_0x534c3a;if(!SceneManager[_0x3c802b(0xa8a)]())return;VisuMZ[_0x3c802b(0x96b)](_0x4abc68,_0x4abc68);const _0x4a2da3=$gameTemp[_0x3c802b(0xa1d)](),_0x15aae6=VisuMZ[_0x3c802b(0x128)](_0x4abc68['Targets']),_0x28bc31=_0x4abc68[_0x3c802b(0x303)],_0x208b84=_0x4abc68['SkewY'],_0x3ae5cf=_0x4abc68[_0x3c802b(0x969)],_0x2c303b=_0x4abc68[_0x3c802b(0x2a9)],_0x59bde0=_0x4abc68[_0x3c802b(0xa55)];if(!_0x4a2da3)return;for(const _0x403c3e of _0x15aae6){if(_0x3c802b(0x79a)===_0x3c802b(0x77e)){function _0x4118b8(){const _0xb8cff=_0x3c802b;return _0x13ef33[_0xb8cff(0x99e)][_0xb8cff(0x5de)][_0xb8cff(0x63a)](this);;}}else{if(!_0x403c3e)continue;_0x403c3e['skewBattler'](_0x28bc31,_0x208b84,_0x3ae5cf,_0x2c303b);}}if(_0x59bde0)_0x4a2da3[_0x3c802b(0x387)](_0x3c802b(0x245));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0xa74),_0x2da820=>{const _0x520378=_0x534c3a;if(!SceneManager[_0x520378(0xa8a)]())return;VisuMZ[_0x520378(0x96b)](_0x2da820,_0x2da820);const _0x1e291b=$gameTemp[_0x520378(0xa1d)](),_0xd186e5=VisuMZ[_0x520378(0x128)](_0x2da820[_0x520378(0x689)]),_0x4619dd=_0x2da820['Angle'],_0x3413e6=_0x2da820['Duration'],_0x4031ab=_0x2da820[_0x520378(0x2a9)],_0x5a514c=_0x2da820[_0x520378(0x241)],_0x34568e=_0x2da820[_0x520378(0x1a4)];if(!_0x1e291b)return;for(const _0x38d8b6 of _0xd186e5){if(!_0x38d8b6)continue;_0x38d8b6[_0x520378(0x11e)](_0x4619dd,_0x3413e6,_0x4031ab,_0x5a514c);}if(_0x34568e)_0x1e291b[_0x520378(0x387)]('battleSpin');}),PluginManager[_0x534c3a(0x260)](pluginData['name'],'ActSeq_Movement_WaitForFloat',_0x1cc229=>{const _0x55b7bb=_0x534c3a;if(!SceneManager[_0x55b7bb(0xa8a)]())return;const _0x16af1e=$gameTemp[_0x55b7bb(0xa1d)]();if(!_0x16af1e)return;_0x16af1e[_0x55b7bb(0x387)]('battleFloat');}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0xd3),_0x45a750=>{const _0x56c14b=_0x534c3a;if(!SceneManager[_0x56c14b(0xa8a)]())return;const _0xf780b4=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xf780b4)return;_0xf780b4[_0x56c14b(0x387)](_0x56c14b(0x7a6));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Movement_WaitForMovement',_0x592565=>{const _0x383f55=_0x534c3a;if(!SceneManager[_0x383f55(0xa8a)]())return;const _0x3c6382=$gameTemp[_0x383f55(0xa1d)]();if(!_0x3c6382)return;_0x3c6382[_0x383f55(0x387)](_0x383f55(0xa71));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x7b9),_0x39c668=>{const _0xccb803=_0x534c3a;if(!SceneManager[_0xccb803(0xa8a)]())return;const _0x26ba1e=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x26ba1e)return;_0x26ba1e[_0xccb803(0x387)](_0xccb803(0x503));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Movement_WaitForScale',_0x317d18=>{const _0x39bbad=_0x534c3a;if(!SceneManager[_0x39bbad(0xa8a)]())return;const _0x2b48d0=$gameTemp[_0x39bbad(0xa1d)]();if(!_0x2b48d0)return;_0x2b48d0[_0x39bbad(0x387)]('battleGrow');}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x1f5),_0x21c80f=>{const _0x573c2c=_0x534c3a;if(!SceneManager['isSceneBattle']())return;const _0xffb9e7=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xffb9e7)return;_0xffb9e7[_0x573c2c(0x387)](_0x573c2c(0x245));}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0xfa),_0x11da59=>{const _0x3f8cf4=_0x534c3a;if(!SceneManager['isSceneBattle']())return;const _0x117aca=$gameTemp[_0x3f8cf4(0xa1d)]();if(!_0x117aca)return;_0x117aca[_0x3f8cf4(0x387)](_0x3f8cf4(0x1cf));}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],'ActSeq_Projectile_Animation',_0x5b38a3=>{const _0x163506=_0x534c3a;if(!SceneManager[_0x163506(0xa8a)]())return;if(!Imported[_0x163506(0xa45)])return;VisuMZ[_0x163506(0x96b)](_0x5b38a3,_0x5b38a3);const _0x59c775=$gameTemp['getLastPluginCommandInterpreter'](),_0x30bb8f=_0x5b38a3[_0x163506(0x654)];if(!_0x59c775)return;const _0x3ef512=BattleManager[_0x163506(0x6bf)];if(!_0x3ef512)return;_0x3ef512[_0x163506(0x792)](_0x5b38a3);if(_0x30bb8f)_0x59c775[_0x163506(0x387)](_0x163506(0x8b4));}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0x22c),_0x2c86b9=>{const _0x2e7389=_0x534c3a;if(!SceneManager[_0x2e7389(0xa8a)]())return;if(!Imported[_0x2e7389(0xa45)])return;VisuMZ['ConvertParams'](_0x2c86b9,_0x2c86b9);const _0x46d4e0=$gameTemp['getLastPluginCommandInterpreter'](),_0x8e2618=_0x2c86b9[_0x2e7389(0x654)];if(!_0x46d4e0)return;const _0x5088d4=BattleManager[_0x2e7389(0x6bf)];if(!_0x5088d4)return;_0x5088d4[_0x2e7389(0x792)](_0x2c86b9);if(_0x8e2618)_0x46d4e0[_0x2e7389(0x387)]('battleProjectiles');}),PluginManager[_0x534c3a(0x260)](pluginData['name'],'ActSeq_Projectile_Picture',_0x4b8052=>{const _0x218e09=_0x534c3a;if(!SceneManager[_0x218e09(0xa8a)]())return;if(!Imported[_0x218e09(0xa45)])return;VisuMZ[_0x218e09(0x96b)](_0x4b8052,_0x4b8052);const _0x53ccd9=$gameTemp[_0x218e09(0xa1d)](),_0x5a3e20=_0x4b8052[_0x218e09(0x654)];if(!_0x53ccd9)return;const _0x62eb57=BattleManager[_0x218e09(0x6bf)];if(!_0x62eb57)return;_0x62eb57['createActionSequenceProjectile'](_0x4b8052);if(_0x5a3e20)_0x53ccd9[_0x218e09(0x387)](_0x218e09(0x8b4));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x7fc),_0x24f552=>{const _0x405be6=_0x534c3a;if(!SceneManager[_0x405be6(0xa8a)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x405be6(0x96b)](_0x24f552,_0x24f552);const _0x29d240=$gameTemp[_0x405be6(0xa1d)](),_0x3d8f5e=_0x24f552[_0x405be6(0xa55)];if(!_0x29d240)return;$gameScreen[_0x405be6(0xa87)](_0x24f552[_0x405be6(0x303)],_0x24f552[_0x405be6(0x474)],_0x24f552['Duration'],_0x24f552[_0x405be6(0x2a9)]);if(_0x3d8f5e)_0x29d240[_0x405be6(0x387)](_0x405be6(0x1f9));}),PluginManager['registerCommand'](pluginData['name'],_0x534c3a(0x54d),_0x45b1b6=>{const _0x202e72=_0x534c3a;if(!SceneManager[_0x202e72(0xa8a)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x202e72(0x96b)](_0x45b1b6,_0x45b1b6);const _0x3a499a=$gameTemp[_0x202e72(0xa1d)](),_0x46ccb1=_0x45b1b6[_0x202e72(0xa55)];if(!_0x3a499a)return;$gameScreen[_0x202e72(0xa87)](0x0,0x0,_0x45b1b6[_0x202e72(0x969)],_0x45b1b6[_0x202e72(0x2a9)]);if(_0x46ccb1)_0x3a499a[_0x202e72(0x387)](_0x202e72(0x1f9));}),PluginManager[_0x534c3a(0x260)](pluginData['name'],_0x534c3a(0x72d),_0x4e959e=>{const _0x2dcece=_0x534c3a;if(!SceneManager[_0x2dcece(0xa8a)]())return;if(!Imported[_0x2dcece(0x3b6)])return;const _0x160d58=$gameTemp[_0x2dcece(0xa1d)]();if(!_0x160d58)return;_0x160d58[_0x2dcece(0x387)]('battleSkew');}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],'ActSeq_Target_CurrentIndex',_0x152701=>{const _0xab7f4e=_0x534c3a;if(!SceneManager[_0xab7f4e(0xa8a)]())return;VisuMZ[_0xab7f4e(0x96b)](_0x152701,_0x152701);const _0x2f0d49=$gameTemp[_0xab7f4e(0xa1d)](),_0x5d1751=_0x152701[_0xab7f4e(0x8d2)],_0x398ec0=_0x152701[_0xab7f4e(0x2e2)];if(!_0x2f0d49)return;BattleManager[_0xab7f4e(0x114)]=_0x5d1751,BattleManager[_0xab7f4e(0x603)]=BattleManager[_0xab7f4e(0xa73)]?BattleManager['_allTargets'][BattleManager[_0xab7f4e(0x114)]]||null:null;if(BattleManager[_0xab7f4e(0x603)]&&_0x398ec0[_0xab7f4e(0x2ca)]()[_0xab7f4e(0x5a9)]()!==_0xab7f4e(0x98e)){if('pOyKU'!==_0xab7f4e(0x556))_0x2f0d49[_0xab7f4e(0x5fb)]([_0x398ec0]);else{function _0x1216c0(){const _0xe513f0=_0xab7f4e;_0xc2844f[_0xe513f0(0xa4a)]();}}}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x105),_0x439b5d=>{const _0xd69305=_0x534c3a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xd69305(0x96b)](_0x439b5d,_0x439b5d);const _0x104fbe=$gameTemp[_0xd69305(0xa1d)](),_0x1831f8=_0x439b5d[_0xd69305(0x2e2)];if(!_0x104fbe)return;BattleManager[_0xd69305(0x114)]++,BattleManager['_target']=BattleManager[_0xd69305(0xa73)][BattleManager[_0xd69305(0x114)]]||null,BattleManager[_0xd69305(0x603)]&&_0x1831f8[_0xd69305(0x2ca)]()['trim']()!==_0xd69305(0x98e)&&_0x104fbe[_0xd69305(0x5fb)]([_0x1831f8]);}),PluginManager[_0x534c3a(0x260)](pluginData['name'],'ActSeq_Target_PrevTarget',_0x121533=>{const _0x1c0a0e=_0x534c3a;if(!SceneManager[_0x1c0a0e(0xa8a)]())return;VisuMZ['ConvertParams'](_0x121533,_0x121533);const _0x1ea832=$gameTemp[_0x1c0a0e(0xa1d)](),_0x2282a6=_0x121533['JumpToLabel'];if(!_0x1ea832)return;BattleManager['_targetIndex']--,BattleManager[_0x1c0a0e(0x603)]=BattleManager['_allTargets'][BattleManager[_0x1c0a0e(0x114)]]||null,BattleManager['_target']&&_0x2282a6[_0x1c0a0e(0x2ca)]()['trim']()!==_0x1c0a0e(0x98e)&&_0x1ea832['command119']([_0x2282a6]);}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x913),_0x3c527e=>{const _0x258319=_0x534c3a;if(!SceneManager[_0x258319(0xa8a)]())return;VisuMZ[_0x258319(0x96b)](_0x3c527e,_0x3c527e);const _0x3ad7fe=$gameTemp[_0x258319(0xa1d)](),_0x468c75=_0x3c527e[_0x258319(0x2d1)],_0x5c4b61=_0x3c527e['JumpToLabel'];if(!_0x3ad7fe)return;const _0x2da49e=BattleManager[_0x258319(0x114)];for(;;){BattleManager[_0x258319(0x114)]=Math[_0x258319(0x676)](BattleManager[_0x258319(0xa73)][_0x258319(0x4a2)]);if(!_0x468c75)break;if(BattleManager[_0x258319(0x114)]!==_0x2da49e)break;if(BattleManager[_0x258319(0xa73)][_0x258319(0x4a2)]<=0x1){if(_0x258319(0x684)===_0x258319(0x3fd)){function _0x14ffaf(){const _0x3165f3=_0x258319;this[_0x3165f3(0x1bc)]('dying');}}else{BattleManager[_0x258319(0x114)]=0x0;break;}}}BattleManager[_0x258319(0x603)]=BattleManager[_0x258319(0xa73)][BattleManager[_0x258319(0x114)]]||null,BattleManager[_0x258319(0x603)]&&_0x5c4b61[_0x258319(0x2ca)]()[_0x258319(0x5a9)]()!=='UNTITLED'&&_0x3ad7fe['command119']([_0x5c4b61]);}),PluginManager['registerCommand'](pluginData[_0x534c3a(0x180)],_0x534c3a(0x3f0),_0x5c757b=>{const _0x3b6cab=_0x534c3a;if(!SceneManager[_0x3b6cab(0xa8a)]())return;VisuMZ[_0x3b6cab(0x96b)](_0x5c757b,_0x5c757b);const _0x823677=VisuMZ[_0x3b6cab(0x128)](_0x5c757b[_0x3b6cab(0x689)]);for(const _0x48a929 of _0x823677){if(!_0x48a929)continue;if(!_0x48a929[_0x3b6cab(0x1e7)]())continue;_0x48a929['clearActiveWeaponSlot']();}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x8e3),_0xca34d9=>{const _0x52dfd2=_0x534c3a;if(!SceneManager[_0x52dfd2(0xa8a)]())return;VisuMZ[_0x52dfd2(0x96b)](_0xca34d9,_0xca34d9);const _0x17d9b8=$gameTemp['getLastPluginCommandInterpreter']();let _0x43de5f=![];const _0x2bfd1d=_0xca34d9[_0x52dfd2(0x2e2)],_0xa81d7f=VisuMZ[_0x52dfd2(0x128)](_0xca34d9[_0x52dfd2(0x689)]);for(const _0x28c8eb of _0xa81d7f){if(_0x52dfd2(0x1fb)!=='nvXEJ'){function _0x54ac43(){const _0x2a2f32=_0x52dfd2;if(!_0x2678df[_0x2a2f32(0xa8a)]())return;if(!_0x4ecfa5[_0x2a2f32(0x58b)])return;const _0x382329=_0x5a03bc[_0x2a2f32(0x46a)];if(!_0x382329)return;_0x382329['_battleCoreNoElement']=!![];}}else{if(!_0x28c8eb)continue;if(!_0x28c8eb[_0x52dfd2(0x1e7)]())continue;_0x28c8eb[_0x52dfd2(0x3ee)](),_0x28c8eb[_0x52dfd2(0x5eb)]()['length']>0x0?_0x43de5f=!![]:_0x28c8eb['clearActiveWeaponSlot']();}}_0x43de5f&&_0x2bfd1d[_0x52dfd2(0x2ca)]()[_0x52dfd2(0x5a9)]()!==_0x52dfd2(0x98e)&&_0x17d9b8[_0x52dfd2(0x5fb)]([_0x2bfd1d]);}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x528),_0x1fb704=>{const _0xc3d376=_0x534c3a;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xc3d376(0x96b)](_0x1fb704,_0x1fb704);let _0x2799a0=_0x1fb704[_0xc3d376(0x8d0)];_0x2799a0--,_0x2799a0=Math[_0xc3d376(0x9a7)](_0x2799a0,0x0);const _0x4d8e51=VisuMZ[_0xc3d376(0x128)](_0x1fb704[_0xc3d376(0x689)]);for(const _0x51c069 of _0x4d8e51){if('xyVGj'!==_0xc3d376(0x5fe)){if(!_0x51c069)continue;if(!_0x51c069[_0xc3d376(0x1e7)]())continue;_0x51c069[_0xc3d376(0x91f)](_0x2799a0);}else{function _0x4cae62(){_0x4f35d8=_0x134077;}}}}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x8a0),_0x294a22=>{const _0x50ceb2=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x50ceb2(0x3b6)])return;VisuMZ[_0x50ceb2(0x96b)](_0x294a22,_0x294a22);const _0xc259cb=$gameTemp[_0x50ceb2(0xa1d)](),_0x4a2de9=_0x294a22['WaitForZoom'];if(!_0xc259cb)return;$gameScreen[_0x50ceb2(0x34a)](_0x294a22['Scale'],_0x294a22['Duration'],_0x294a22[_0x50ceb2(0x2a9)]);if(_0x4a2de9)_0xc259cb['setWaitMode'](_0x50ceb2(0x6a2));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x235),_0x26de80=>{const _0xdfcec2=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xdfcec2(0x3b6)])return;VisuMZ[_0xdfcec2(0x96b)](_0x26de80,_0x26de80);const _0x1e3d31=$gameTemp[_0xdfcec2(0xa1d)](),_0x2c74e4=_0x26de80[_0xdfcec2(0xa4b)];if(!_0x1e3d31)return;$gameScreen[_0xdfcec2(0x34a)](0x1,_0x26de80['Duration'],_0x26de80['EasingType']);if(_0x2c74e4)_0x1e3d31[_0xdfcec2(0x387)](_0xdfcec2(0x6a2));}),PluginManager[_0x534c3a(0x260)](pluginData[_0x534c3a(0x180)],_0x534c3a(0x926),_0x4f6dfd=>{const _0x896785=_0x534c3a;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x896785(0x3b6)])return;const _0x12b394=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x12b394)return;_0x12b394[_0x896785(0x387)](_0x896785(0x6a2));}),VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x473)]=Scene_Boot[_0x534c3a(0x53c)][_0x534c3a(0x923)],Scene_Boot[_0x534c3a(0x53c)][_0x534c3a(0x923)]=function(){const _0xe98edf=_0x534c3a;this[_0xe98edf(0x75e)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0xe98edf(0xa79)](),this[_0xe98edf(0x18d)](),VisuMZ[_0xe98edf(0x99e)][_0xe98edf(0x473)][_0xe98edf(0x63a)](this),this[_0xe98edf(0x716)](),this[_0xe98edf(0x5e6)]();},Scene_Boot[_0x534c3a(0x53c)][_0x534c3a(0x716)]=function(){const _0x135082=_0x534c3a;if(VisuMZ['ParseAllNotetags'])return;this[_0x135082(0x459)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this['process_VisuMZ_BattleCore_jsFunctions']();},Scene_Boot[_0x534c3a(0x53c)][_0x534c3a(0x75e)]=function(){const _0xa6376f=_0x534c3a,_0x445181=$dataSystem[_0xa6376f(0x65f)][_0xa6376f(0x4a2)];for(let _0x1cfacd=0x0;_0x1cfacd<_0x445181;_0x1cfacd++){if('HWqpi'===_0xa6376f(0x7e7)){const _0xfb47ce=$dataSystem[_0xa6376f(0x964)][_0x1cfacd];if(_0xfb47ce)continue;$dataSystem['attackMotions'][_0x1cfacd]=JsonEx[_0xa6376f(0x537)]($dataSystem[_0xa6376f(0x964)][0x0]);}else{function _0x4f875a(){const _0x569030=_0xa6376f;if(!_0x197306[_0x569030(0x4d6)]())return;const _0x2224c7=this['battler']();if(!_0x2224c7)return;_0x2224c7[_0x569030(0x5c5)](_0x25b369,_0x6c827f,_0x46e276,_0x5cda35);}}}},Scene_Boot[_0x534c3a(0x53c)][_0x534c3a(0x733)]=function(){const _0x1a621a=_0x534c3a,_0xca76ab=VisuMZ[_0x1a621a(0x99e)][_0x1a621a(0x795)];if(_0xca76ab[_0x1a621a(0x6c4)][_0x1a621a(0x6f3)]===undefined){if(_0x1a621a(0x6f8)===_0x1a621a(0x1e5)){function _0x43e27c(){const _0x28a943=_0x1a621a,_0x15c158=_0x4ae2aa[_0x28a943(0x516)](),_0x1c5220=this[_0x28a943(0x4c5)](this['index']());if(!_0x15c158)return!![];if(!_0x15c158['item']())return!![];const _0x4967a2=_0x15c158['item']()['note'];if(_0x4967a2['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x1c5220===_0x4db3b9[_0x28a943(0x4c5)]())return![];}return!![];}}else _0xca76ab[_0x1a621a(0x6c4)][_0x1a621a(0x6f3)]=_0x1a621a(0x381);}_0xca76ab[_0x1a621a(0x2a0)][_0x1a621a(0x365)]===undefined&&(_0xca76ab[_0x1a621a(0x2a0)]['SmoothImage']=![]);_0xca76ab['Enemy'][_0x1a621a(0x365)]===undefined&&(_0xca76ab[_0x1a621a(0x53f)][_0x1a621a(0x365)]=!![]);if(_0xca76ab['Actor'][_0x1a621a(0x4b0)]===undefined){if(_0x1a621a(0x555)===_0x1a621a(0x555))_0xca76ab[_0x1a621a(0x2a0)][_0x1a621a(0x4b0)]=![];else{function _0x3a0c1d(){const _0x2663d5=_0x1a621a;this[_0x2663d5(0x7ac)]['push'](_0x7e2937);}}}_0xca76ab[_0x1a621a(0x2a0)][_0x1a621a(0x993)]===undefined&&(_0xca76ab['Actor'][_0x1a621a(0x993)]=!![]);},VisuMZ[_0x534c3a(0x12c)]={},Scene_Boot[_0x534c3a(0x53c)][_0x534c3a(0xa79)]=function(){const _0x539acd=_0x534c3a;for(const _0x36ff64 of VisuMZ[_0x539acd(0x99e)][_0x539acd(0x795)][_0x539acd(0x6c4)]['DamageStyleList']){if(!_0x36ff64)continue;const _0x3dcc9b=_0x36ff64[_0x539acd(0x6c3)][_0x539acd(0x2ca)]()[_0x539acd(0x5a9)]();VisuMZ[_0x539acd(0x12c)][_0x3dcc9b]=_0x36ff64;}},VisuMZ['BattleCore'][_0x534c3a(0x146)]={},Scene_Boot[_0x534c3a(0x53c)][_0x534c3a(0x18d)]=function(){const _0x506de6=_0x534c3a,_0xa857d1=VisuMZ[_0x506de6(0x99e)][_0x506de6(0x146)],_0x339379=_0x506de6(0x999),_0x4d46f9=[['Pre',_0x506de6(0x873)],[_0x506de6(0xa00),_0x506de6(0x1fa)]],_0x65d04f=[[_0x506de6(0x66a),_0x506de6(0x20a)],[_0x506de6(0x288),_0x506de6(0x88b)]],_0x12d5f1=[['',''],[_0x506de6(0x7a9),_0x506de6(0xa26)],[_0x506de6(0x147),_0x506de6(0x688)]];for(const _0x26aa4c of _0x65d04f){if(_0x506de6(0x53d)===_0x506de6(0x53d))for(const _0xa5954f of _0x12d5f1){if(_0x506de6(0x692)==='yfnct')for(const _0x5d7c5d of _0x4d46f9){if(_0x506de6(0x368)!==_0x506de6(0x930)){const _0x38dc3b=_0x26aa4c[0x0][_0x506de6(0x8e9)](_0x5d7c5d[0x0],_0xa5954f[0x0]),_0x5c56fd=_0x26aa4c[0x1][_0x506de6(0x8e9)](_0x5d7c5d[0x1],_0xa5954f[0x1])[_0x506de6(0x5a9)](),_0x215f0b=new RegExp(_0x339379[_0x506de6(0x8e9)](_0x5c56fd),'i');_0xa857d1[_0x38dc3b]=_0x215f0b;}else{function _0x5a8ae9(){const _0x43bdbc=_0x506de6,_0x51f407=0xa,_0x2fd4b2=0x12c*_0x51f407,_0x10f46f=0x1e*_0x51f407;this[_0x43bdbc(0x594)](_0x2fd4b2,0x0,_0x10f46f);}}}else{function _0x1d301a(){const _0x2007ec=_0x506de6,_0x9eed50=this[_0x2007ec(0xa67)];_0x9eed50[_0x2007ec(0xed)](_0x3b2c69,0x0,_0x522973['y'],_0x9eed50[_0x2007ec(0xa40)],_0x2007ec(0x585));}}}else{function _0x391821(){const _0xadb025=_0x506de6;this[_0xadb025(0x205)]=this[_0xadb025(0x205)]??0x1,this[_0xadb025(0x5d7)][_0xadb025(0x43e)]['x']=this[_0xadb025(0xf8)][_0xadb025(0x43e)]['x']*this[_0xadb025(0x205)],this[_0xadb025(0x5d7)][_0xadb025(0x43e)]['y']=this['_distortionSprite'][_0xadb025(0x43e)]['y']*this[_0xadb025(0x205)];}}}const _0x5aa315=[[_0x506de6(0x26b),'JS\x20%1START\x20ACTION'],['%1EndActionJS',_0x506de6(0x3b2)]];for(const _0x3bc60f of _0x5aa315){if(_0x506de6(0x118)!==_0x506de6(0x118)){function _0x1c6d63(){const _0x451777=_0x506de6;_0xa88013[_0x451777(0xa4a)]();}}else for(const _0x283783 of _0x4d46f9){if(_0x506de6(0x639)!==_0x506de6(0x155)){const _0x2aafe3=_0x3bc60f[0x0]['format'](_0x283783[0x0]),_0x785f05=_0x3bc60f[0x1]['format'](_0x283783[0x1]),_0x4e2472=new RegExp(_0x339379[_0x506de6(0x8e9)](_0x785f05),'i');_0xa857d1[_0x2aafe3]=_0x4e2472;}else{function _0x1ab1bc(){const _0x415a17=_0x506de6;if(!_0x2e71e8[_0x415a17(0x4d6)]())return;const _0x3aad24=this[_0x415a17(0x7c4)]();if(!_0x3aad24)return;if(_0x310678)this[_0x415a17(0x379)](_0x4892bf+_0x3aad24[_0x415a17(0x674)],_0x47ac99+_0x3aad24[_0x415a17(0x2df)],![]);_0x3adff5+=_0x3aad24['_baseX']-_0x3aad24[_0x415a17(0x97e)],_0x56eb2b+=_0x3aad24[_0x415a17(0x2df)]-_0x3aad24[_0x415a17(0x5c2)],_0x3aad24[_0x415a17(0x594)](_0x41fff8,_0x5b90f0,_0x321ab7);if(_0x2026b1[_0x415a17(0x9fc)])_0x3aad24[_0x415a17(0x939)](_0x24dcf2||_0x415a17(0x6a4));}}}}const _0x2b7379=[['%1StartBattleJS','JS\x20%1START\x20BATTLE'],[_0x506de6(0x95f),'JS\x20%1END\x20BATTLE'],[_0x506de6(0x1c2),_0x506de6(0x475)],[_0x506de6(0x3fa),_0x506de6(0x8c6)],[_0x506de6(0x51b),_0x506de6(0x54e)],[_0x506de6(0x31a),_0x506de6(0x570)],[_0x506de6(0x8bb),'JS\x20%1START\x20TURN'],[_0x506de6(0x917),_0x506de6(0x885)],[_0x506de6(0x673),'JS\x20%1REGENERATE']];for(const _0x27e46e of _0x2b7379){for(const _0x18190d of _0x4d46f9){const _0x2e33a8=_0x27e46e[0x0]['format'](_0x18190d[0x0]),_0x62a774=_0x27e46e[0x1]['format'](_0x18190d[0x1]),_0x52d8b0=new RegExp(_0x339379[_0x506de6(0x8e9)](_0x62a774),'i');_0xa857d1[_0x2e33a8]=_0x52d8b0;}}},Scene_Boot[_0x534c3a(0x53c)][_0x534c3a(0x459)]=function(){const _0x380021=_0x534c3a,_0x5a2b3b=$dataSkills[_0x380021(0x34b)]($dataItems);for(const _0x3b5f5a of _0x5a2b3b){if(!_0x3b5f5a)continue;VisuMZ[_0x380021(0x99e)]['Parse_Notetags_Action'](_0x3b5f5a);}},Scene_Boot[_0x534c3a(0x53c)][_0x534c3a(0x7a1)]=function(){const _0x2966fd=_0x534c3a,_0x20bf08=$dataActors[_0x2966fd(0x34b)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x2b87e1 of _0x20bf08){if(!_0x2b87e1)continue;VisuMZ[_0x2966fd(0x99e)]['Parse_Notetags_TraitObjects'](_0x2b87e1);}},Scene_Boot['prototype'][_0x534c3a(0x5e6)]=function(){const _0x2f837f=_0x534c3a,_0x5be281=VisuMZ[_0x2f837f(0x99e)]['Settings'][_0x2f837f(0x871)][_0x2f837f(0x21b)],_0x16feb8=[];for(const _0x16bb1e of _0x5be281){const _0xeb5a15=$dataTroops[_0x16bb1e];if(_0xeb5a15)_0x16feb8['push'](JsonEx[_0x2f837f(0x537)](_0xeb5a15));}for(const _0x50c2ee of $dataTroops){if(_0x2f837f(0x9b5)===_0x2f837f(0x9b5)){if(!_0x50c2ee)continue;for(const _0x12e017 of _0x16feb8){if(_0x12e017['id']===_0x50c2ee['id'])continue;_0x50c2ee['pages']=_0x50c2ee[_0x2f837f(0x933)]['concat'](_0x12e017[_0x2f837f(0x933)]);}}else{function _0x4d16cc(){const _0x2d73fc=_0x2f837f;_0x446c7e[_0x2d73fc(0x206)](_0x3d536b,_0xdd4fb2);}}}},Scene_Boot[_0x534c3a(0x53c)][_0x534c3a(0x68b)]=function(){const _0x2afc5=_0x534c3a,_0x20c520=$dataSkills['concat']($dataItems);for(const _0x43d70d of _0x20c520){if(!_0x43d70d)continue;VisuMZ[_0x2afc5(0x99e)][_0x2afc5(0x47f)](_0x43d70d);}},VisuMZ['BattleCore'][_0x534c3a(0x1ef)]=VisuMZ[_0x534c3a(0x1ef)],VisuMZ[_0x534c3a(0x1ef)]=function(_0x14080b){const _0x1d4d3b=_0x534c3a;VisuMZ['BattleCore']['ParseActorNotetags']&&VisuMZ['BattleCore'][_0x1d4d3b(0x1ef)][_0x1d4d3b(0x63a)](this,_0x14080b),VisuMZ[_0x1d4d3b(0x99e)][_0x1d4d3b(0x567)](_0x14080b);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x341)]=VisuMZ['ParseClassNotetags'],VisuMZ['ParseClassNotetags']=function(_0x8b1be5){const _0x2f57a0=_0x534c3a;VisuMZ[_0x2f57a0(0x99e)][_0x2f57a0(0x341)]&&VisuMZ['BattleCore'][_0x2f57a0(0x341)][_0x2f57a0(0x63a)](this,_0x8b1be5),VisuMZ[_0x2f57a0(0x99e)][_0x2f57a0(0x567)](_0x8b1be5);},VisuMZ['BattleCore'][_0x534c3a(0x28d)]=VisuMZ[_0x534c3a(0x28d)],VisuMZ['ParseSkillNotetags']=function(_0x159b46){const _0x24047e=_0x534c3a;if(VisuMZ[_0x24047e(0x99e)][_0x24047e(0x28d)]){if(_0x24047e(0x458)!==_0x24047e(0x216))VisuMZ[_0x24047e(0x99e)][_0x24047e(0x28d)]['call'](this,_0x159b46);else{function _0x1eb3c9(){const _0x3b9e04=_0x24047e;_0x57c33c[_0x3b9e04(0x99e)][_0x3b9e04(0x7bb)][_0x3b9e04(0x63a)](this),this[_0x3b9e04(0x397)]();}}}VisuMZ[_0x24047e(0x99e)][_0x24047e(0x3bc)](_0x159b46),VisuMZ[_0x24047e(0x99e)][_0x24047e(0x47f)](_0x159b46);},VisuMZ['BattleCore']['ParseItemNotetags']=VisuMZ['ParseItemNotetags'],VisuMZ[_0x534c3a(0x715)]=function(_0x5460e5){const _0x5ee741=_0x534c3a;VisuMZ['BattleCore'][_0x5ee741(0x715)]&&VisuMZ[_0x5ee741(0x99e)][_0x5ee741(0x715)][_0x5ee741(0x63a)](this,_0x5460e5),VisuMZ[_0x5ee741(0x99e)][_0x5ee741(0x3bc)](_0x5460e5),VisuMZ[_0x5ee741(0x99e)][_0x5ee741(0x47f)](_0x5460e5);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x75d)]=VisuMZ[_0x534c3a(0x75d)],VisuMZ['ParseWeaponNotetags']=function(_0x327e32){const _0x1d32b1=_0x534c3a;VisuMZ[_0x1d32b1(0x99e)][_0x1d32b1(0x75d)]&&VisuMZ[_0x1d32b1(0x99e)][_0x1d32b1(0x75d)][_0x1d32b1(0x63a)](this,_0x327e32),VisuMZ[_0x1d32b1(0x99e)]['Parse_Notetags_TraitObjects'](_0x327e32);},VisuMZ[_0x534c3a(0x99e)]['ParseArmorNotetags']=VisuMZ[_0x534c3a(0x8c3)],VisuMZ['ParseArmorNotetags']=function(_0x5cdeee){const _0x5a5f29=_0x534c3a;VisuMZ[_0x5a5f29(0x99e)]['ParseArmorNotetags']&&VisuMZ[_0x5a5f29(0x99e)]['ParseArmorNotetags']['call'](this,_0x5cdeee),VisuMZ[_0x5a5f29(0x99e)][_0x5a5f29(0x567)](_0x5cdeee);},VisuMZ[_0x534c3a(0x99e)]['ParseEnemyNotetags']=VisuMZ[_0x534c3a(0x497)],VisuMZ[_0x534c3a(0x497)]=function(_0x12d09b){const _0x40b1a5=_0x534c3a;VisuMZ[_0x40b1a5(0x99e)][_0x40b1a5(0x497)]&&VisuMZ[_0x40b1a5(0x99e)][_0x40b1a5(0x497)][_0x40b1a5(0x63a)](this,_0x12d09b),VisuMZ[_0x40b1a5(0x99e)][_0x40b1a5(0x567)](_0x12d09b);},VisuMZ['BattleCore']['ParseStateNotetags']=VisuMZ[_0x534c3a(0x4a3)],VisuMZ['ParseStateNotetags']=function(_0x13382a){const _0x4e77bc=_0x534c3a;if(VisuMZ[_0x4e77bc(0x99e)][_0x4e77bc(0x4a3)]){if(_0x4e77bc(0x592)!==_0x4e77bc(0x695))VisuMZ[_0x4e77bc(0x99e)]['ParseStateNotetags'][_0x4e77bc(0x63a)](this,_0x13382a);else{function _0x45c560(){const _0x341e96=_0x4e77bc,_0x16c373=_0xac5055['BattleCore'][_0x341e96(0x795)]['Damage'],_0x413362=new _0x508711();_0x413362[_0x341e96(0x761)]=_0x16c373[_0x341e96(0x27a)],this['sortDamageSprites'](_0x413362),_0x413362[_0x341e96(0x627)](this[_0x341e96(0x679)]),_0x413362[_0x341e96(0x57e)](this[_0x341e96(0x679)]),this[_0x341e96(0x8ad)](_0x413362);}}}VisuMZ[_0x4e77bc(0x99e)][_0x4e77bc(0x567)](_0x13382a);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x3bc)]=function(_0x18105f){const _0x3512a3=_0x534c3a,_0x45ea24=[_0x3512a3(0x630),_0x3512a3(0x166),_0x3512a3(0x183),_0x3512a3(0x63d),_0x3512a3(0x360),_0x3512a3(0x940),'PreEndActionJS','PostEndActionJS'];for(const _0xbbf7cb of _0x45ea24){VisuMZ[_0x3512a3(0x99e)][_0x3512a3(0x504)](_0x18105f,_0xbbf7cb);}const _0x2eb090=_0x18105f['note'];if(_0x2eb090[_0x3512a3(0x5ed)](/<ALWAYS CRITICAL/i)){if(_0x3512a3(0x720)===_0x3512a3(0x720))_0x18105f[_0x3512a3(0x8fc)][_0x3512a3(0xa36)]=!![];else{function _0x2dc2d2(){const _0x3eda21=_0x3512a3;this['_cache'][_0x3eda21(0x56d)]=_0x5e8050[_0x3eda21(0x53c)][_0x3eda21(0x924)][_0x3eda21(0x63a)](this);}}}_0x2eb090[_0x3512a3(0x5ed)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x18105f[_0x3512a3(0x81f)]=Math['max'](0x1,Number(RegExp['$1']))),_0x2eb090[_0x3512a3(0x5ed)](/<TARGET:[ ](.*)>/i)&&(_0x18105f[_0x3512a3(0x7ef)]=String(RegExp['$1'])[_0x3512a3(0x2ca)]()[_0x3512a3(0x5a9)]());},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x567)]=function(_0x1a1e44){const _0x214681=_0x534c3a,_0x5df23f=[_0x214681(0x714),_0x214681(0x1c5),'PreDamageAsUserJS',_0x214681(0x891),_0x214681(0x45c),_0x214681(0x5ba),_0x214681(0x71d),_0x214681(0x80f),_0x214681(0x360),_0x214681(0x940),_0x214681(0xfb),_0x214681(0x2b9),_0x214681(0x2f3),_0x214681(0xd8),'PreEndBattleJS','PostEndBattleJS',_0x214681(0x1c2),_0x214681(0x3fa),_0x214681(0x51b),_0x214681(0x31a),_0x214681(0x601),_0x214681(0x30e),'PreEndTurnJS',_0x214681(0x40c),_0x214681(0x217),'PostRegenerateJS'];for(const _0x174494 of _0x5df23f){VisuMZ[_0x214681(0x99e)]['createJS'](_0x1a1e44,_0x174494);}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x47f)]=function(_0x484c2e){const _0x12b0ef=_0x534c3a,_0x5d193a=_0x484c2e[_0x12b0ef(0x650)];if(_0x5d193a[_0x12b0ef(0x5ed)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x25765e=String(RegExp['$1']),_0x529e7a=VisuMZ['BattleCore'][_0x12b0ef(0x512)](_0x484c2e,_0x12b0ef(0x689));VisuMZ[_0x12b0ef(0x99e)][_0x12b0ef(0xa66)](_0x25765e,_0x529e7a);}if(_0x5d193a[_0x12b0ef(0x5ed)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x282115=String(RegExp['$1']),_0x18128f=VisuMZ[_0x12b0ef(0x99e)][_0x12b0ef(0x512)](_0x484c2e,_0x12b0ef(0x3a8));VisuMZ['BattleCore'][_0x12b0ef(0x6ed)](_0x282115,_0x18128f);}},VisuMZ[_0x534c3a(0x99e)]['JS']={},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x504)]=function(_0x50db31,_0x5bf969){const _0x448ea2=_0x534c3a,_0x399de7=_0x50db31[_0x448ea2(0x650)];if(_0x399de7['match'](VisuMZ[_0x448ea2(0x99e)][_0x448ea2(0x146)][_0x5bf969])){if(_0x448ea2(0x1b0)==='bvQFF'){function _0x5a0e30(){const _0x38bc98=_0x448ea2;_0x3e3969['BattleCore'][_0x38bc98(0x18f)][_0x38bc98(0x63a)](this),this[_0x38bc98(0x2dd)]();}}else{const _0x43eec3=RegExp['$1'],_0x50fb32=_0x448ea2(0x669)[_0x448ea2(0x8e9)](_0x43eec3),_0x481e26=VisuMZ[_0x448ea2(0x99e)][_0x448ea2(0x512)](_0x50db31,_0x5bf969);VisuMZ[_0x448ea2(0x99e)]['JS'][_0x481e26]=new Function(_0x50fb32);}}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x512)]=function(_0x6cee1,_0x4aa59d){const _0x3ae953=_0x534c3a;let _0x3c41e7='';if($dataActors[_0x3ae953(0x96f)](_0x6cee1))_0x3c41e7=_0x3ae953(0x717)[_0x3ae953(0x8e9)](_0x6cee1['id'],_0x4aa59d);if($dataClasses[_0x3ae953(0x96f)](_0x6cee1))_0x3c41e7=_0x3ae953(0x734)[_0x3ae953(0x8e9)](_0x6cee1['id'],_0x4aa59d);if($dataSkills[_0x3ae953(0x96f)](_0x6cee1))_0x3c41e7=_0x3ae953(0x48c)[_0x3ae953(0x8e9)](_0x6cee1['id'],_0x4aa59d);if($dataItems[_0x3ae953(0x96f)](_0x6cee1))_0x3c41e7=_0x3ae953(0x2c5)[_0x3ae953(0x8e9)](_0x6cee1['id'],_0x4aa59d);if($dataWeapons[_0x3ae953(0x96f)](_0x6cee1))_0x3c41e7=_0x3ae953(0x989)[_0x3ae953(0x8e9)](_0x6cee1['id'],_0x4aa59d);if($dataArmors[_0x3ae953(0x96f)](_0x6cee1))_0x3c41e7=_0x3ae953(0x173)['format'](_0x6cee1['id'],_0x4aa59d);if($dataEnemies[_0x3ae953(0x96f)](_0x6cee1))_0x3c41e7=_0x3ae953(0x443)['format'](_0x6cee1['id'],_0x4aa59d);if($dataStates[_0x3ae953(0x96f)](_0x6cee1))_0x3c41e7=_0x3ae953(0x2d5)[_0x3ae953(0x8e9)](_0x6cee1['id'],_0x4aa59d);return _0x3c41e7;},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0xa66)]=function(_0x276105,_0x12c46d){const _0x1213d1=_0x534c3a,_0x1bea79='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x1213d1(0x8e9)](_0x276105);VisuMZ[_0x1213d1(0x99e)]['JS'][_0x12c46d]=new Function(_0x1bea79);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x6ed)]=function(_0x4bf7cb,_0x46ad71){const _0x494d22=_0x534c3a,_0x15c77c=_0x494d22(0x339)['format'](_0x4bf7cb);VisuMZ[_0x494d22(0x99e)]['JS'][_0x46ad71]=new Function(_0x15c77c);},TextManager['autoBattle']=VisuMZ['BattleCore'][_0x534c3a(0x795)]['PartyCmd'][_0x534c3a(0xe7)],TextManager[_0x534c3a(0x317)]=VisuMZ[_0x534c3a(0x99e)]['Settings']['AutoBattle'][_0x534c3a(0x6b2)],TextManager['autoBattleStyle']=VisuMZ[_0x534c3a(0x99e)]['Settings'][_0x534c3a(0x52b)][_0x534c3a(0x21c)],TextManager[_0x534c3a(0x182)]=VisuMZ[_0x534c3a(0x99e)]['Settings'][_0x534c3a(0x79b)][_0x534c3a(0x6c3)],ColorManager[_0x534c3a(0x263)]=function(_0x1c880b){const _0x5adf67=_0x534c3a;_0x1c880b=String(_0x1c880b);if(_0x1c880b[_0x5adf67(0x5ed)](/#(.*)/i))return'#%1'[_0x5adf67(0x8e9)](String(RegExp['$1']));else{if('Rgsea'!==_0x5adf67(0xfc)){function _0x11caea(){const _0x37a261=_0x5adf67;this[_0x37a261(0x387)](_0x37a261(0x1d0));}}else return this[_0x5adf67(0x678)](Number(_0x1c880b));}},DataManager[_0x534c3a(0xa25)]=function(_0x84dda8){const _0x3bf0f2=_0x534c3a;if(_0x84dda8[_0x3bf0f2(0x650)][_0x3bf0f2(0x5ed)](/<DAMAGE STYLE:[ ](.*)>/i)){if('jAXto'!==_0x3bf0f2(0x39a)){function _0x19818b(){const _0xbdc161=_0x3bf0f2;if(!_0x43b188[_0xbdc161(0xa8a)]())return;const _0x4c0efe=_0x2e4920[_0xbdc161(0xa5c)];_0x4c0efe[_0xbdc161(0xa17)]();}}else{const _0x503ba4=String(RegExp['$1'])['toUpperCase']()[_0x3bf0f2(0x5a9)]();if(_0x503ba4===_0x3bf0f2(0xa54))return'MANUAL';if(VisuMZ[_0x3bf0f2(0x12c)][_0x503ba4])return _0x503ba4;}}const _0x47e769=VisuMZ['BattleCore'][_0x3bf0f2(0x795)][_0x3bf0f2(0x6c4)]['DefaultDamageStyle'][_0x3bf0f2(0x2ca)]()['trim']();if(VisuMZ[_0x3bf0f2(0x12c)][_0x47e769])return _0x47e769;return'MANUAL';},DataManager['getStypeIdWithName']=function(_0x1e8367){const _0x3ca6ed=_0x534c3a;_0x1e8367=_0x1e8367[_0x3ca6ed(0x2ca)]()[_0x3ca6ed(0x5a9)](),this['_stypeIDs']=this[_0x3ca6ed(0x123)]||{};if(this[_0x3ca6ed(0x123)][_0x1e8367])return this['_stypeIDs'][_0x1e8367];for(let _0x548402=0x1;_0x548402<0x64;_0x548402++){if(!$dataSystem[_0x3ca6ed(0x2d6)][_0x548402])continue;let _0x2b64c4=$dataSystem[_0x3ca6ed(0x2d6)][_0x548402][_0x3ca6ed(0x2ca)]()[_0x3ca6ed(0x5a9)]();_0x2b64c4=_0x2b64c4[_0x3ca6ed(0x283)](/\x1I\[(\d+)\]/gi,''),_0x2b64c4=_0x2b64c4['replace'](/\\I\[(\d+)\]/gi,''),this[_0x3ca6ed(0x123)][_0x2b64c4]=_0x548402;}return this[_0x3ca6ed(0x123)][_0x1e8367]||0x0;},DataManager[_0x534c3a(0x8eb)]=function(_0x558980){const _0x14c9d1=_0x534c3a;_0x558980=_0x558980[_0x14c9d1(0x2ca)]()['trim'](),this[_0x14c9d1(0x798)]=this['_skillIDs']||{};if(this[_0x14c9d1(0x798)][_0x558980])return this[_0x14c9d1(0x798)][_0x558980];for(const _0x190d17 of $dataSkills){if(!_0x190d17)continue;this['_skillIDs'][_0x190d17[_0x14c9d1(0x180)][_0x14c9d1(0x2ca)]()['trim']()]=_0x190d17['id'];}return this[_0x14c9d1(0x798)][_0x558980]||0x0;},DataManager[_0x534c3a(0x8cd)]=function(_0x460327){const _0x261055=_0x534c3a;_0x460327=_0x460327[_0x261055(0x2ca)]()['trim'](),this['_enemyIDs']=this[_0x261055(0xdb)]||{};if(this['_enemyIDs'][_0x460327])return this[_0x261055(0xdb)][_0x460327];for(const _0x5b49ae of $dataEnemies){if(!_0x5b49ae)continue;this[_0x261055(0xdb)][_0x5b49ae[_0x261055(0x180)][_0x261055(0x2ca)]()[_0x261055(0x5a9)]()]=_0x5b49ae['id'];}return this['_enemyIDs'][_0x460327]||0x0;},DataManager[_0x534c3a(0x960)]=function(_0x2b094b){const _0x269a1d=_0x534c3a;_0x2b094b=_0x2b094b[_0x269a1d(0x2ca)]()[_0x269a1d(0x5a9)](),this[_0x269a1d(0x910)]=this[_0x269a1d(0x910)]||{};if(this['_wtypeIDs'][_0x2b094b])return this[_0x269a1d(0x910)][_0x2b094b];for(let _0x306930=0x1;_0x306930<0x64;_0x306930++){if(!$dataSystem[_0x269a1d(0x65f)][_0x306930])continue;let _0x140470=$dataSystem[_0x269a1d(0x65f)][_0x306930][_0x269a1d(0x2ca)]()['trim']();_0x140470=_0x140470['replace'](/\x1I\[(\d+)\]/gi,''),_0x140470=_0x140470['replace'](/\\I\[(\d+)\]/gi,''),this[_0x269a1d(0x910)][_0x140470]=_0x306930;}return this[_0x269a1d(0x910)][_0x269a1d(0x280)]=0x0,this['_wtypeIDs'][_0x2b094b]||0x0;},DataManager[_0x534c3a(0x7ec)]=function(_0x5735b0){const _0x106b89=_0x534c3a,_0x1ca3e7=_0x106b89(0x35b);let _0xf1d62f=_0x5735b0[_0x106b89(0x8de)],_0x515d8c=_0x5735b0['name'];const _0x56c6a8=_0x5735b0[_0x106b89(0x650)];if(_0x56c6a8[_0x106b89(0x5ed)](/<DISPLAY ICON: (\d+)>/i)){if(_0x106b89(0x47c)!==_0x106b89(0x8a9))_0xf1d62f=Number(RegExp['$1']);else{function _0x771836(){_0x599291+=_0x403d32['iconWidth'];}}}return _0x56c6a8[_0x106b89(0x5ed)](/<DISPLAY TEXT: (.*)>/i)&&(_0x515d8c=String(RegExp['$1'])),_0x1ca3e7[_0x106b89(0x8e9)](_0xf1d62f,_0x515d8c);},DataManager[_0x534c3a(0x307)]=function(_0x6ca876){const _0x20bc0c=_0x534c3a;return _0x6ca876[_0x20bc0c(0x650)][_0x20bc0c(0x5ed)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x6ca876[_0x20bc0c(0x180)];},DataManager[_0x534c3a(0x80c)]=function(_0x20472b){const _0x4d0b14=_0x534c3a;return _0x20472b['note'][_0x4d0b14(0x5ed)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x20472b[_0x4d0b14(0x8de)];},DataManager[_0x534c3a(0x22b)]=function(_0x51f579){const _0x457777=_0x534c3a,_0x31fddb=$dataEnemies[_0x51f579];if(_0x31fddb){if(_0x31fddb[_0x457777(0x650)][_0x457777(0x5ed)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if(_0x457777(0xaaa)===_0x457777(0x7d4)){function _0x56173f(){const _0xdce358=_0x457777;let _0x2a96c7=_0x1bd764[_0xdce358(0x99e)][_0xdce358(0x3c8)]['call'](this,_0x1ab870);return _0x2a96c7=this['_multipliers']['hitRate']*_0x2a96c7+this[_0xdce358(0x3a0)][_0xdce358(0x7be)],_0x2a96c7;}}else{const _0x32867d=String(RegExp['$1'])[_0x457777(0x4bc)](/[\r\n]+/)[_0x457777(0x46f)](''),_0x519def=this[_0x457777(0x9d0)](_0x32867d);_0x51f579=this['getEnemyIdWithName'](_0x519def)||_0x51f579,_0x51f579=DataManager[_0x457777(0x22b)](_0x51f579);}}}return _0x51f579;},DataManager[_0x534c3a(0x9d0)]=function(_0x260c9d){const _0x40e0df=_0x534c3a;let _0x2d9f4b=0x0;const _0x4c7462={};for(const _0x5295a5 of _0x260c9d){if(_0x5295a5[_0x40e0df(0x5ed)](/(.*):[ ](\d+)/i)){if(_0x40e0df(0xca)===_0x40e0df(0xca)){const _0x42aa1b=String(RegExp['$1'])[_0x40e0df(0x5a9)](),_0xf6820c=Number(RegExp['$2']);_0x4c7462[_0x42aa1b]=_0xf6820c,_0x2d9f4b+=_0xf6820c;}else{function _0x2a634a(){const _0x43027f=_0x40e0df;_0x5c0c2d+=_0x86f780[_0x43027f(0x456)]-_0x538be3;}}}else{if(_0x5295a5['match'](/(.*):[ ](\d+\.?\d+)/i)){const _0x4e5e5a=String(RegExp['$1'])[_0x40e0df(0x5a9)](),_0x65a3f6=Number(RegExp['$2']);_0x4c7462[_0x4e5e5a]=_0x65a3f6,_0x2d9f4b+=_0x65a3f6;}else _0x5295a5!==''&&(_0x4c7462[_0x5295a5]=0x1,_0x2d9f4b++);}}if(_0x2d9f4b<=0x0)return'';let _0x358cfb=Math[_0x40e0df(0xa37)]()*_0x2d9f4b;for(const _0x1b1b5a in _0x4c7462){if(_0x40e0df(0x657)===_0x40e0df(0x657)){_0x358cfb-=_0x4c7462[_0x1b1b5a];if(_0x358cfb<=0x0)return _0x1b1b5a;}else{function _0x3eb516(){const _0x363da2=_0x40e0df;_0xb056fd=_0x9dd25f[_0x363da2(0x99e)]['JS'][_0x23388f]['call'](this,this['subject'](),_0x335ea2,this['item'](),_0x4e6248);if(_0x5b3068)_0x5782ef=_0x18240b;}}}return'';},DataManager[_0x534c3a(0xa4c)]=function(_0x5315ea){const _0x5be1ab=_0x534c3a;if(!_0x5315ea)return![];if(!VisuMZ['BattleCore'][_0x5be1ab(0x795)][_0x5be1ab(0x189)][_0x5be1ab(0x6e9)])return![];if(_0x5315ea[_0x5be1ab(0x650)][_0x5be1ab(0x5ed)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x5315ea[_0x5be1ab(0x650)][_0x5be1ab(0x5ed)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x3c789a of _0x5315ea[_0x5be1ab(0x9be)]){if(_0x5be1ab(0x9ad)!==_0x5be1ab(0x879)){if(!_0x3c789a)continue;if(_0x3c789a[_0x5be1ab(0x5db)]===Game_Action[_0x5be1ab(0x1eb)])return!![];}else{function _0x36c4d6(){const _0x8e5185=_0x5be1ab;this[_0x8e5185(0x29a)][_0x8e5185(0x94d)]=![];}}}return![];},ConfigManager[_0x534c3a(0x560)]=ConfigManager[_0x534c3a(0x560)]??![],ConfigManager['autoBattleUseSkills']=ConfigManager[_0x534c3a(0xa5d)]??![],ConfigManager[_0x534c3a(0x182)]=ConfigManager[_0x534c3a(0x182)]??!![],VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x6bc)]=ConfigManager[_0x534c3a(0x494)],ConfigManager[_0x534c3a(0x494)]=function(){const _0x3b217e=_0x534c3a,_0x42dcaa=VisuMZ[_0x3b217e(0x99e)]['ConfigManager_makeData'][_0x3b217e(0x63a)](this);return _0x42dcaa[_0x3b217e(0x560)]=this['autoBattleAtStart'],_0x42dcaa['autoBattleUseSkills']=this['autoBattleUseSkills'],_0x42dcaa['visualHpGauge']=this[_0x3b217e(0x182)],_0x42dcaa;},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x2ef)]=ConfigManager[_0x534c3a(0xaa5)],ConfigManager[_0x534c3a(0xaa5)]=function(_0x40880c){const _0xb45c8b=_0x534c3a;VisuMZ[_0xb45c8b(0x99e)][_0xb45c8b(0x2ef)]['call'](this,_0x40880c);if(_0xb45c8b(0x560)in _0x40880c)this[_0xb45c8b(0x560)]=_0x40880c[_0xb45c8b(0x560)];else{if('axUCM'==='axUCM')this[_0xb45c8b(0x560)]=![];else{function _0x24f14b(){const _0x233d04=_0xb45c8b;this[_0x233d04(0x223)]['setHelpWindow'](this[_0x233d04(0x4cd)]),this[_0x233d04(0x244)][_0x233d04(0x1e3)](this[_0x233d04(0x4cd)]);}}}if(_0xb45c8b(0xa5d)in _0x40880c)this[_0xb45c8b(0xa5d)]=_0x40880c[_0xb45c8b(0xa5d)];else{if(_0xb45c8b(0x4e4)!=='ywmth')this[_0xb45c8b(0xa5d)]=![];else{function _0x304521(){const _0x39d93c=_0xb45c8b,_0x3f92f1=_0x5e0bc0(_0x54b1eb['$1']);return[_0x50e873[_0x39d93c(0x4c5)](_0x3f92f1)];}}}if('visualHpGauge'in _0x40880c)this[_0xb45c8b(0x182)]=_0x40880c['visualHpGauge'];else{if(_0xb45c8b(0x50e)!==_0xb45c8b(0x50e)){function _0x15a564(){const _0x45b5c7=_0xb45c8b;if(this[_0x45b5c7(0x211)]===_0x45b5c7(0x9f2))this[_0x45b5c7(0x17c)]();else this['_phase']==='forceAction'?this[_0x45b5c7(0x18a)]():_0x3e19ec[_0x45b5c7(0x99e)][_0x45b5c7(0x66f)][_0x45b5c7(0x63a)](this,_0x1540f9);}}else this[_0xb45c8b(0x182)]=!![];}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x5cd)]=BattleManager[_0x534c3a(0x3ca)],BattleManager[_0x534c3a(0x3ca)]=function(){const _0x48078e=_0x534c3a;VisuMZ[_0x48078e(0x99e)]['BattleManager_initMembers'][_0x48078e(0x63a)](this),this[_0x48078e(0x5bb)]=[];},BattleManager[_0x534c3a(0x55d)]=function(){const _0x4cb241=_0x534c3a;if(!SceneManager[_0x4cb241(0xa8a)]())return;const _0x12fe2e=SceneManager['_scene'][_0x4cb241(0x186)];if(_0x12fe2e)_0x12fe2e[_0x4cb241(0x758)]();},BattleManager[_0x534c3a(0x84d)]=function(){const _0x3e5312=_0x534c3a;if(BattleManager[_0x3e5312(0x1af)]())return _0x3e5312(0x41b);return _0x3e5312(0x85b);},BattleManager[_0x534c3a(0x72f)]=function(_0x464b2d){const _0x51c4af=_0x534c3a;return _0x464b2d=_0x464b2d['toUpperCase']()[_0x51c4af(0x5a9)](),this[_0x51c4af(0x84d)]()===_0x464b2d;},BattleManager['isDTB']=function(){const _0x2d6406=_0x534c3a;return this[_0x2d6406(0x72f)](_0x2d6406(0x85b));},BattleManager[_0x534c3a(0x5f6)]=function(){const _0x38b4ef=_0x534c3a;return this[_0x38b4ef(0x5c1)]();},BattleManager[_0x534c3a(0x718)]=function(){const _0x371006=_0x534c3a;return!this[_0x371006(0x5f6)]();},BattleManager['isTeamBased']=function(){const _0x46a449=_0x534c3a;return!this[_0x46a449(0x5f6)]()&&!this[_0x46a449(0x718)]();},BattleManager[_0x534c3a(0x239)]=function(_0x25306f){const _0x22d049=_0x534c3a;$gameParty[_0x22d049(0x239)](_0x25306f),$gameTroop[_0x22d049(0x239)](_0x25306f);},VisuMZ['BattleCore'][_0x534c3a(0x640)]=BattleManager[_0x534c3a(0x396)],BattleManager[_0x534c3a(0x396)]=function(){const _0x13315d=_0x534c3a;this[_0x13315d(0x58e)]=![],this[_0x13315d(0x253)]=ConfigManager[_0x13315d(0x560)],this[_0x13315d(0x239)]('PreStartBattleJS'),VisuMZ[_0x13315d(0x99e)][_0x13315d(0x640)][_0x13315d(0x63a)](this),this[_0x13315d(0x239)]('PostStartBattleJS');},BattleManager[_0x534c3a(0x444)]=function(_0x109ea6){const _0x262ae9=_0x534c3a,_0xb74458=VisuMZ['BattleCore']['Settings']['Mechanics'];if(_0xb74458[_0x262ae9(0x60a)]&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0xb74458[_0x262ae9(0x60a)])){if(_0x262ae9(0x9c6)!==_0x262ae9(0x257))$gameTemp[_0x262ae9(0x821)](_0xb74458[_0x262ae9(0x60a)]);else{function _0x15445d(){const _0x3ac662=_0x262ae9;if(!_0xdae677[_0x3ac662(0xa8a)]())return;if(!_0x2e7492[_0x3ac662(0x3b6)])return;_0x32bcb7[_0x3ac662(0x96b)](_0x33987d,_0x4c333f);const _0xd60dcd=_0x2b8111[_0x3ac662(0xa1d)](),_0x5440ac=_0x415562[_0x3ac662(0x44f)];_0x43114c['setBattleCameraPoint'](_0x5574ee['FocusX'],_0x128416[_0x3ac662(0x337)],_0x17a499[_0x3ac662(0x969)],_0x2d7995[_0x3ac662(0x2a9)]);if(_0x5440ac)_0xd60dcd['setWaitMode'](_0x3ac662(0x90a));}}}const _0x459303='%1Event'[_0x262ae9(0x8e9)](_0x109ea6);_0xb74458[_0x459303]&&VisuMZ[_0x262ae9(0x99e)][_0x262ae9(0x72a)](_0xb74458[_0x459303])&&$gameTemp[_0x262ae9(0x821)](_0xb74458[_0x459303]);},VisuMZ['BattleCore'][_0x534c3a(0x45a)]=BattleManager[_0x534c3a(0x664)],BattleManager[_0x534c3a(0x664)]=function(){const _0x331197=_0x534c3a;this['processBattleCoreJS'](_0x331197(0x1c2)),VisuMZ[_0x331197(0x99e)][_0x331197(0x45a)][_0x331197(0x63a)](this),this[_0x331197(0x444)](_0x331197(0x2d8));},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x2ba)]=BattleManager[_0x534c3a(0x5b8)],BattleManager[_0x534c3a(0x5b8)]=function(){const _0x11d531=_0x534c3a;this[_0x11d531(0x239)](_0x11d531(0x3fa)),VisuMZ[_0x11d531(0x99e)]['BattleManager_processDefeat'][_0x11d531(0x63a)](this),this['processPostBattleCommonEvents'](_0x11d531(0x103));},VisuMZ['BattleCore'][_0x534c3a(0x3e2)]=BattleManager['endBattle'],BattleManager['endBattle']=function(_0x23e5be){const _0x1a0683=_0x534c3a;this['_endBattle']=!![],this[_0x1a0683(0x253)]=![],this[_0x1a0683(0x239)]('PreEndBattleJS'),VisuMZ[_0x1a0683(0x99e)]['BattleManager_endBattle']['call'](this,_0x23e5be),this['processBattleCoreJS']('PostEndBattleJS');},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x94a)]=BattleManager['startTurn'],BattleManager[_0x534c3a(0x5d4)]=function(){const _0x562edb=_0x534c3a;if(this[_0x562edb(0x5f6)]())this[_0x562edb(0x239)]('PreStartTurnJS');VisuMZ[_0x562edb(0x99e)][_0x562edb(0x94a)][_0x562edb(0x63a)](this);if(this[_0x562edb(0x5f6)]())this[_0x562edb(0x239)]('PostStartTurnJS');},VisuMZ['BattleCore'][_0x534c3a(0x847)]=BattleManager[_0x534c3a(0x1f1)],BattleManager[_0x534c3a(0x1f1)]=function(){const _0x2244c6=_0x534c3a,_0x170e57=this['_subject']['currentAction']();if(_0x170e57)_0x170e57[_0x2244c6(0x394)](_0x2244c6(0x360));VisuMZ[_0x2244c6(0x99e)]['BattleManager_startAction'][_0x2244c6(0x63a)](this);if(_0x170e57)_0x170e57[_0x2244c6(0x394)](_0x2244c6(0x940));},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x711)]=BattleManager[_0x534c3a(0x3f6)],BattleManager[_0x534c3a(0x3f6)]=function(){const _0x10f7a7=_0x534c3a,_0x43335f=this['_action'];if(_0x43335f){if(_0x10f7a7(0x1cc)!==_0x10f7a7(0x1cc)){function _0xecad33(){const _0x15a177=_0x10f7a7;_0xc10a21+=(_0x38f905[_0x15a177(0x405)]()?-0x1:0x1)*_0x361351[_0x15a177(0x7f5)]()/0x2;}}else _0x43335f[_0x10f7a7(0x394)]('PreEndActionJS');}VisuMZ[_0x10f7a7(0x99e)][_0x10f7a7(0x711)]['call'](this);if(_0x43335f){if(_0x10f7a7(0x663)!=='ESkUY')_0x43335f[_0x10f7a7(0x394)](_0x10f7a7(0x2b9));else{function _0x188562(){const _0x55cac0=_0x10f7a7;_0x3a95e8[_0x55cac0(0x99e)][_0x55cac0(0xa99)][_0x55cac0(0x63a)](this);if(this['_callSceneOptions']&&!_0x545e87['_subject'])this[_0x55cac0(0x430)]();}}}this[_0x10f7a7(0x4a5)](this[_0x10f7a7(0x120)]());},BattleManager[_0x534c3a(0x4a5)]=function(_0x3ed986){const _0x136334=_0x534c3a;for(const _0x41bf5e of _0x3ed986){if(_0x136334(0x9d5)===_0x136334(0x9d5)){if(!_0x41bf5e)continue;if(!_0x41bf5e['battler']())continue;_0x41bf5e['battler']()[_0x136334(0x26e)]();}else{function _0x6a2ec2(){const _0x221f5b=_0x136334,_0x597b66=_0x556da9[_0x221f5b(0x99e)][_0x221f5b(0x795)][_0x221f5b(0x27b)],_0x43a388=_0x597b66[_0x221f5b(0x584)]||0xc0,_0x4b29cd=this[_0x221f5b(0x916)](),_0x106d89=this[_0x221f5b(0x7ae)]()?_0x2cca77['boxWidth']-_0x43a388:0x0,_0x27f735=_0x558875[_0x221f5b(0x29d)]-_0x4b29cd;return new _0x7accea(_0x106d89,_0x27f735,_0x43a388,_0x4b29cd);}}}},BattleManager[_0x534c3a(0x920)]=function(){const _0x3bf6f4=_0x534c3a;if(!this[_0x3bf6f4(0xa5c)][_0x3bf6f4(0xaac)]()){if(_0x3bf6f4(0x220)!=='YSSYn')this[_0x3bf6f4(0x3f6)]();else{function _0x33f599(){const _0x32df96=_0x3bf6f4;_0x542161[_0x32df96(0x3ba)](_0x32df96(0x64c),_0x3f7bf9);}}}},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0xa68)]=function(){const _0x2cc11e=_0x534c3a;this[_0x2cc11e(0xef)]();if(Imported[_0x2cc11e(0x1b6)]){const _0x2635d2=VisuMZ['SkillsStatesCore'][_0x2cc11e(0x795)][_0x2cc11e(0x75c)];_0x2635d2&&_0x2635d2[_0x2cc11e(0x5bc)]===![]&&this[_0x2cc11e(0x42d)](0x1);}else this[_0x2cc11e(0x42d)](0x1);this[_0x2cc11e(0x6ec)]();},BattleManager[_0x534c3a(0x817)]=function(){const _0x4590ec=_0x534c3a;this['_escapeRatio']=VisuMZ[_0x4590ec(0x99e)][_0x4590ec(0x795)][_0x4590ec(0x871)][_0x4590ec(0x309)][_0x4590ec(0x63a)](this);},VisuMZ['BattleCore'][_0x534c3a(0x33a)]=BattleManager[_0x534c3a(0x4dc)],BattleManager[_0x534c3a(0x4dc)]=function(){const _0x39449b=_0x534c3a;this[_0x39449b(0x239)]('EscapeSuccessJS'),BattleManager[_0x39449b(0x6bf)]['processEscape'](),VisuMZ[_0x39449b(0x99e)][_0x39449b(0x33a)]['call'](this),this[_0x39449b(0x444)]('EscapeSuccess');},VisuMZ[_0x534c3a(0x99e)]['BattleManager_onEscapeFailure']=BattleManager[_0x534c3a(0x3c1)],BattleManager[_0x534c3a(0x3c1)]=function(){const _0x7d08f1=_0x534c3a;this[_0x7d08f1(0x239)]('EscapeFailureJS');const _0x49b074=this['_escapeRatio'];VisuMZ[_0x7d08f1(0x99e)][_0x7d08f1(0x37d)][_0x7d08f1(0x63a)](this),this[_0x7d08f1(0x56c)]=_0x49b074+VisuMZ[_0x7d08f1(0x99e)][_0x7d08f1(0x795)][_0x7d08f1(0x871)][_0x7d08f1(0x3df)][_0x7d08f1(0x63a)](this),this['processPostBattleCommonEvents'](_0x7d08f1(0xa20));},BattleManager[_0x534c3a(0x2d7)]=function(){const _0x2bdba9=_0x534c3a;let _0x1e0553=![];if(this[_0x2bdba9(0x1d3)]())for(const _0x2c00b2 of $gameTroop['enemyNames']()){this[_0x2bdba9(0xa5c)]['push'](_0x2bdba9(0x87c),TextManager[_0x2bdba9(0x6e7)][_0x2bdba9(0x8e9)](_0x2c00b2)),this['_logWindow']['push'](_0x2bdba9(0x41c)),_0x1e0553=!![];}if(this[_0x2bdba9(0x238)])this['_logWindow'][_0x2bdba9(0x3ba)](_0x2bdba9(0x87c),TextManager[_0x2bdba9(0x485)][_0x2bdba9(0x8e9)]($gameParty[_0x2bdba9(0x180)]())),this[_0x2bdba9(0xa5c)][_0x2bdba9(0x3ba)](_0x2bdba9(0x41c));else this[_0x2bdba9(0x6ad)]&&(this['_logWindow'][_0x2bdba9(0x3ba)](_0x2bdba9(0x87c),TextManager['surprise'][_0x2bdba9(0x8e9)]($gameParty['name']())),this['_logWindow'][_0x2bdba9(0x3ba)](_0x2bdba9(0x41c)));_0x1e0553&&(this[_0x2bdba9(0xa5c)]['push'](_0x2bdba9(0x41c)),this[_0x2bdba9(0xa5c)]['push']('clear'));if(this[_0x2bdba9(0x1af)]()&&this[_0x2bdba9(0x3e1)]()){if(_0x2bdba9(0x37b)===_0x2bdba9(0xe2)){function _0x22154e(){const _0x208309=_0x2bdba9;if(this[_0x208309(0x648)][_0x208309(0x4da)]!==_0x33ad3c)return this[_0x208309(0x648)][_0x208309(0x4da)];return this['actor']()[_0x208309(0x650)][_0x208309(0x5ed)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x208309(0x648)][_0x208309(0x56d)]=_0x5c6a26(_0x204124['$1']),this['_cache']['svAnchorY']=_0x35f2a7(_0x4bef30['$2'])):this[_0x208309(0x648)]['svAnchorY']=_0xb1bdfd[_0x208309(0x53c)]['svBattlerAnchorY'][_0x208309(0x63a)](this),this[_0x208309(0x648)][_0x208309(0x4da)];}}else this[_0x2bdba9(0x70c)]=![];}},BattleManager[_0x534c3a(0x1d3)]=function(){const _0x1d869d=_0x534c3a;if(BattleManager[_0x1d869d(0x253)])return![];return VisuMZ[_0x1d869d(0x99e)][_0x1d869d(0x795)]['Enemy']['EmergeText'];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x467)]=BattleManager[_0x534c3a(0x6f6)],BattleManager['startInput']=function(){const _0x490e4b=_0x534c3a;VisuMZ[_0x490e4b(0x99e)]['BattleManager_startInput']['call'](this);if(this[_0x490e4b(0x5c1)]()&&this[_0x490e4b(0x3e1)]()&&!this[_0x490e4b(0x6ad)]&&$gameParty['canInput']()){if('vcmNH'===_0x490e4b(0x593)){function _0x495c5f(){const _0x18d7ab=_0x490e4b;_0x3ee8b9+=_0x1579ff[_0x18d7ab(0x53f)][_0x18d7ab(0x69d)]||0x0,_0x5d8957+=_0x2cce82[_0x18d7ab(0x53f)][_0x18d7ab(0xa49)]||0x0;}}else this[_0x490e4b(0x14e)]();}},BattleManager[_0x534c3a(0x3e1)]=function(){const _0x5a0288=_0x534c3a;return VisuMZ['BattleCore'][_0x5a0288(0x795)][_0x5a0288(0x5d9)][_0x5a0288(0x9a6)];},BattleManager[_0x534c3a(0x8fe)]=function(){const _0x4ffc6c=_0x534c3a;if(this[_0x4ffc6c(0x5af)]()){if(_0x4ffc6c(0x9fe)===_0x4ffc6c(0x9fe))this[_0x4ffc6c(0x14e)]();else{function _0x28f19e(){const _0x299821=_0x4ffc6c,_0x40d5d1=this[_0x299821(0x7b5)](_0x59cef7);if(_0x40d5d1[_0x299821(0x5ed)](/\\I\[(\d+)\]/i)){const _0x44bdec=this[_0x299821(0x586)](_0x5010a7),_0x2d408e=this['textSizeEx'](_0x40d5d1)['width'];return _0x2d408e<=_0x44bdec[_0x299821(0x456)]?_0x299821(0x68a):'icon';}}}}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x877)]=Scene_Battle['prototype'][_0x534c3a(0x259)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x259)]=function(){const _0x298af3=_0x534c3a;VisuMZ[_0x298af3(0x99e)]['Scene_Battle_startActorCommandSelection'][_0x298af3(0x63a)](this),BattleManager[_0x298af3(0x1af)]()&&BattleManager[_0x298af3(0x70c)]&&(BattleManager[_0x298af3(0x70c)]=![],this[_0x298af3(0x24c)]());},BattleManager[_0x534c3a(0x2b3)]=function(_0x418c93,_0x5ecfe8){const _0x5d3fa4=_0x534c3a;this[_0x5d3fa4(0x46a)][_0x5d3fa4(0x995)]=_0x5ecfe8,this[_0x5d3fa4(0xa5c)][_0x5d3fa4(0x949)](_0x5ecfe8),this[_0x5d3fa4(0xa5c)]['displayReflectionPlayBack'](_0x418c93,this[_0x5d3fa4(0x46a)]),this[_0x5d3fa4(0x46a)][_0x5d3fa4(0x437)](_0x418c93),this[_0x5d3fa4(0xa5c)][_0x5d3fa4(0x113)](_0x418c93,_0x418c93);},VisuMZ['BattleCore'][_0x534c3a(0x178)]=BattleManager['makeActionOrders'],BattleManager['makeActionOrders']=function(){const _0x5c075a=_0x534c3a;VisuMZ['BattleCore'][_0x5c075a(0x178)][_0x5c075a(0x63a)](this),this[_0x5c075a(0x620)]=this['_actionBattlers'][_0x5c075a(0x193)](_0x359b7a=>_0x359b7a&&_0x359b7a[_0x5c075a(0x760)]());},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x66f)]=BattleManager[_0x534c3a(0x395)],BattleManager[_0x534c3a(0x395)]=function(_0x46e469){const _0x372d82=_0x534c3a;if(this[_0x372d82(0x211)]==='custom'){if(_0x372d82(0xa32)!=='xDtPO')this['updateCustomActionSequence']();else{function _0xd78a60(){const _0x3b795a=_0x372d82;if(!_0x4cbc64)return 0x0;let _0x380a21=0x0;const _0x2ecacb=_0x5e29fa[_0x3b795a(0x650)];return _0x2ecacb[_0x3b795a(0x5ed)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x380a21+=_0x479990(_0x2da70a['$1'])),_0x2ecacb[_0x3b795a(0x5ed)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x380a21+=_0x4a3f06(_0x1eba82['$1'])),_0x380a21;}}}else{if(this[_0x372d82(0x211)]==='forceAction')this[_0x372d82(0x18a)]();else{if('ATCym'===_0x372d82(0x8c2))VisuMZ[_0x372d82(0x99e)][_0x372d82(0x66f)][_0x372d82(0x63a)](this,_0x46e469);else{function _0xf1133c(){const _0x397e59=_0x372d82,_0x1b5225=[];for(let _0x5a12c2=0x0;_0x5a12c2<this[_0x397e59(0x13b)]();_0x5a12c2++){_0x1b5225[_0x397e59(0x3ba)](_0x58e5f3[_0x397e59(0x3a3)]());}return _0x1b5225;}}}}},BattleManager[_0x534c3a(0x9f7)]=function(){const _0x5093a9=_0x534c3a;this[_0x5093a9(0xa73)]=this[_0x5093a9(0x371)][_0x5093a9(0x5d8)](0x0),this['_targetIndex']=0x0,this[_0x5093a9(0x603)]=this['_allTargets'][0x0]||null,this['_phase']=_0x5093a9(0x9f2);},BattleManager[_0x534c3a(0x17c)]=function(){const _0x37fe9e=_0x534c3a;if(!this[_0x37fe9e(0x9a8)]()&&!this['_logWindow']['isBusy']()){if(_0x37fe9e(0x112)===_0x37fe9e(0x887)){function _0x45d36d(){const _0x4840b2=_0x37fe9e;_0x5e04a5[_0x4840b2(0x53c)][_0x4840b2(0x6d1)][_0x4840b2(0x63a)](this);}}else this[_0x37fe9e(0x211)]='action';}},BattleManager[_0x534c3a(0x8e8)]=function(_0x43ebb8){const _0x5b0006=_0x534c3a;this[_0x5b0006(0x620)]['remove'](_0x43ebb8);if(_0x43ebb8===this['_subject'])return;const _0x597272=JsonEx[_0x5b0006(0x537)](_0x43ebb8[_0x5b0006(0x2e9)]());this[_0x5b0006(0x5bb)][_0x5b0006(0x3ba)]([_0x43ebb8,_0x597272]);},BattleManager[_0x534c3a(0x23a)]=function(){},BattleManager[_0x534c3a(0x21a)]=function(){const _0x4aa0f5=_0x534c3a;if(this[_0x4aa0f5(0x1af)]())this[_0x4aa0f5(0x211)]='turn';else{if(this[_0x4aa0f5(0x5bb)][_0x4aa0f5(0x4a2)]>0x0)this['_phase']=_0x4aa0f5(0x1e8);else{if('fvQeB'!==_0x4aa0f5(0x4b5))this[_0x4aa0f5(0x6f6)]();else{function _0x122a72(){return null;}}}}},BattleManager[_0x534c3a(0x70e)]=function(){const _0x57e0a4=_0x534c3a,_0xa73334=this[_0x57e0a4(0x90c)];_0xa73334&&this[_0x57e0a4(0x1af)]()&&_0xa73334[_0x57e0a4(0x127)]('undecided');for(;;){const _0x396857=this[_0x57e0a4(0x495)]();if(!_0x396857)return null;if(_0x396857['isBattleMember']()&&_0x396857[_0x57e0a4(0x582)]())return _0x396857;}},BattleManager[_0x534c3a(0x495)]=function(){const _0x4f9896=_0x534c3a;if(this['_forcedBattlers'][_0x4f9896(0x4a2)]>0x0){const _0x2f2d10=this['_forcedBattlers']['shift'](),_0x23450d=_0x2f2d10[0x0];return _0x23450d[_0x4f9896(0xaa0)]=_0x23450d['_actions']||[],_0x23450d[_0x4f9896(0xaa0)][0x0]=_0x2f2d10[0x1],_0x23450d;}else return this[_0x4f9896(0x620)][_0x4f9896(0x8bc)]();},VisuMZ['BattleCore'][_0x534c3a(0x59e)]=Game_Battler['prototype'][_0x534c3a(0x8e8)],Game_Battler['prototype'][_0x534c3a(0x8e8)]=function(_0x4d0c23,_0x46e85b){const _0x50fabe=_0x534c3a;VisuMZ['BattleCore'][_0x50fabe(0x59e)]['call'](this,_0x4d0c23,_0x46e85b),this[_0x50fabe(0xaa0)][this[_0x50fabe(0xaa0)]['length']-0x1][_0x50fabe(0x7d1)]=!![];},Game_Interpreter[_0x534c3a(0x53c)]['command339']=function(_0x5930d6){const _0xb0757e=_0x534c3a;return this[_0xb0757e(0x566)](_0x5930d6[0x0],_0x5930d6[0x1],_0x92d96c=>{const _0x2915e2=_0xb0757e;!_0x92d96c['isDeathStateAffected']()&&(_0x92d96c['forceAction'](_0x5930d6[0x2],_0x5930d6[0x3]),BattleManager[_0x2915e2(0x8e8)](_0x92d96c));}),!![];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x69b)]=Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x65e)],Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x65e)]=function(){const _0x8ff28a=_0x534c3a;VisuMZ['BattleCore'][_0x8ff28a(0x69b)][_0x8ff28a(0x63a)](this);if(this[_0x8ff28a(0xaa0)][_0x8ff28a(0x4a2)]<=0x0){if('vQABH'===_0x8ff28a(0x3f2)){function _0x3f8e9b(){const _0x17f021=_0x8ff28a;_0x53c3e4[_0x3b6497][_0x17f021(0x63a)](this,_0x45d8e2);}}else this[_0x8ff28a(0x788)]=Number[_0x8ff28a(0xa93)];}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x4cb)]=BattleManager['selectNextCommand'],BattleManager[_0x534c3a(0x14e)]=function(){const _0x1d112c=_0x534c3a;if(this[_0x1d112c(0x1af)]())this[_0x1d112c(0x78e)]();else{if(_0x1d112c(0x4b6)!==_0x1d112c(0x2a5))VisuMZ['BattleCore'][_0x1d112c(0x4cb)][_0x1d112c(0x63a)](this);else{function _0x4bb6a5(){const _0x559773=_0x1d112c,_0x3ab29f=this[_0x559773(0x586)](_0x61e4be),_0x42e5a0=this['commandName'](_0x589c00),_0x433916=this[_0x559773(0x7eb)](_0x42e5a0)[_0x559773(0x456)];this[_0x559773(0x966)](this[_0x559773(0x9ec)](_0x3cbee2));const _0x42d2f9=this[_0x559773(0x8e7)]();if(_0x42d2f9==='right')this[_0x559773(0x986)](_0x42e5a0,_0x3ab29f['x']+_0x3ab29f[_0x559773(0x456)]-_0x433916,_0x3ab29f['y'],_0x433916);else{if(_0x42d2f9===_0x559773(0x585)){const _0x150b7d=_0x3ab29f['x']+_0x402802[_0x559773(0x922)]((_0x3ab29f[_0x559773(0x456)]-_0x433916)/0x2);this[_0x559773(0x986)](_0x42e5a0,_0x150b7d,_0x3ab29f['y'],_0x433916);}else this[_0x559773(0x986)](_0x42e5a0,_0x3ab29f['x'],_0x3ab29f['y'],_0x433916);}}}}},BattleManager[_0x534c3a(0x78e)]=function(){const _0x521054=_0x534c3a;if(this[_0x521054(0x890)]){if(_0x521054(0x2e6)===_0x521054(0x4a8)){function _0x3a2ed1(){const _0x4a3754=_0x521054;this[_0x4a3754(0x3d2)][_0x4a3754(0x43e)]['x']=0x1/(this[_0x4a3754(0x43e)]['x']||0.001),this[_0x4a3754(0x3d2)][_0x4a3754(0x43e)]['y']=0x1/(this[_0x4a3754(0x43e)]['y']||0.001);}}else{if(this[_0x521054(0x890)]['selectNextCommand']()){if(_0x521054(0x132)==='SpvmJ')return;else{function _0x1fbad2(){const _0x118668=_0x521054;return this[_0x118668(0x699)](_0x517bbe);}}}this[_0x521054(0x96c)](),this[_0x521054(0x323)](),!this[_0x521054(0x90c)]&&!this[_0x521054(0x890)]&&SceneManager[_0x521054(0x76b)]['updateBattleProcess']();}}else{if(!this[_0x521054(0x90c)]){if(_0x521054(0x446)===_0x521054(0x446))this[_0x521054(0x27d)]();else{function _0x390074(){const _0x5a0137=_0x521054,_0x3ef041=this[_0x5a0137(0xa67)],_0x4e40d9=_0x4177e4[_0x5a0137(0x836)](),_0x4a71e4=_0x321275['x']+_0xe9a189[_0x5a0137(0x922)](_0x5ce000[_0x5a0137(0x456)]/0x2)+_0x4e40d9;_0x3ef041['x']=_0x3ef041[_0x5a0137(0x456)]/-0x2+_0x4a71e4,_0x3ef041['y']=_0xd97efa[_0x5a0137(0x922)](_0x1dbfe2[_0x5a0137(0x363)]/0x2);}}}}},BattleManager[_0x534c3a(0x323)]=function(){const _0x4b2a44=_0x534c3a;if(!this[_0x4b2a44(0x5af)]()||this[_0x4b2a44(0x9d9)]()){if(_0x4b2a44(0x515)===_0x4b2a44(0x4c4)){function _0x151b73(){const _0x3f6f27=_0x4b2a44,_0x4080f9=_0x32822e(_0x3354df['$1'])[_0x3f6f27(0x2ca)]()['trim']();return _0x4080f9;}}else{this['_tpbSceneChangeCacheActor']&&(!$gameParty[_0x4b2a44(0x668)]()[_0x4b2a44(0x96f)](this[_0x4b2a44(0x184)])&&(this[_0x4b2a44(0x184)]=null));if(!this['_tpbSceneChangeCacheActor'])this[_0x4b2a44(0x14a)](),this[_0x4b2a44(0x890)]=null,this['_inputting']=![];else{if('kCyMw'!==_0x4b2a44(0x308)){function _0x4d8595(){const _0x514b5a=_0x4b2a44;return _0x2ae17c[_0x514b5a(0x53c)]['isMoving'][_0x514b5a(0x63a)](this);}}else this[_0x4b2a44(0x383)]();}}}},BattleManager[_0x534c3a(0x383)]=function(){const _0x1bddaf=_0x534c3a;if(!$gameParty[_0x1bddaf(0x668)]()[_0x1bddaf(0x96f)](this[_0x1bddaf(0x184)])){if('Lhxmk'!=='Lhxmk'){function _0x3bd6e7(){const _0x517f5b=_0x1bddaf;if(!this['_actor'][_0x517f5b(0x251)](_0x4ab8d5['id']))return![];}}else this[_0x1bddaf(0x184)]=null;}if(this[_0x1bddaf(0x184)])this[_0x1bddaf(0x890)]=this[_0x1bddaf(0x184)],this[_0x1bddaf(0x890)][_0x1bddaf(0x705)]='charged',this[_0x1bddaf(0x10e)]=!![],this['_tpbSceneChangeCacheActor']=null;else{if(_0x1bddaf(0x62b)!==_0x1bddaf(0x62b)){function _0x2003f9(){const _0x2a102a=_0x1bddaf;if(!_0x565c3a[_0x2a102a(0xa8a)]())return;if(!_0x1bc837['VisuMZ_1_ElementStatusCore'])return;_0x125572[_0x2a102a(0x96b)](_0x570d1f,_0xc80c1b);const _0x481419=_0x323b69['_action'],_0x1e5796=_0x13fd15[_0x2a102a(0x66b)];if(!_0x481419)return;_0x481419[_0x2a102a(0x159)]=_0x1e5796;}}else this[_0x1bddaf(0x14a)](),this['_currentActor']=null,this['_inputting']=![];}},VisuMZ[_0x534c3a(0x99e)]['BattleManager_isTpbMainPhase']=BattleManager[_0x534c3a(0x2d0)],BattleManager[_0x534c3a(0x2d0)]=function(){const _0x29c095=_0x534c3a;if(this[_0x29c095(0x211)]==='custom')return this[_0x29c095(0x56e)]();else{if('cMvib'!==_0x29c095(0x723)){function _0x39dfeb(){const _0x560af3=_0x29c095;this[_0x560af3(0x95a)](_0x4fcc6a,_0x3d4607,_0x4445f3);}}else return VisuMZ['BattleCore'][_0x29c095(0x972)][_0x29c095(0x63a)](this);}},BattleManager['battleCoreTpbMainPhase']=function(){const _0x4d5f9f=_0x534c3a;return this[_0x4d5f9f(0x1a9)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x4f6)]=BattleManager[_0x534c3a(0x14a)],BattleManager[_0x534c3a(0x14a)]=function(){const _0x3700c3=_0x534c3a;this[_0x3700c3(0x1af)]()&&this[_0x3700c3(0x211)]===_0x3700c3(0x721)&&(this[_0x3700c3(0x890)]=null),VisuMZ[_0x3700c3(0x99e)][_0x3700c3(0x4f6)]['call'](this);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x909)]=BattleManager['inputtingAction'],BattleManager[_0x534c3a(0x516)]=function(){const _0x2304bf=_0x534c3a,_0x5ada36=this[_0x2304bf(0x890)];if(_0x5ada36&&!_0x5ada36[_0x2304bf(0x516)]()){const _0x35373c=_0x5ada36[_0x2304bf(0x2c1)];_0x5ada36[_0x2304bf(0xaa0)][_0x35373c]=new Game_Action(_0x5ada36);}return VisuMZ[_0x2304bf(0x99e)][_0x2304bf(0x909)]['call'](this);},SceneManager['isSceneBattle']=function(){const _0x248351=_0x534c3a;return this[_0x248351(0x76b)]&&this[_0x248351(0x76b)]['constructor']===Scene_Battle;},SceneManager[_0x534c3a(0xa9a)]=function(){const _0x5ab0be=_0x534c3a;return Spriteset_Battle[_0x5ab0be(0x53c)][_0x5ab0be(0x62c)]();},SceneManager[_0x534c3a(0x484)]=function(){const _0x1bd086=_0x534c3a;if(SceneManager[_0x1bd086(0x4e0)](Scene_Options))return!![];return![];},SceneManager[_0x534c3a(0x466)]=function(){const _0x14e822=_0x534c3a;if(SceneManager[_0x14e822(0x7c6)](Scene_Options))return!![];return![];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x4e5)]=Game_Temp[_0x534c3a(0x53c)][_0x534c3a(0x8f0)],Game_Temp[_0x534c3a(0x53c)][_0x534c3a(0x8f0)]=function(_0x5a0a28,_0x7150e7,_0x42f7fe){const _0x343576=_0x534c3a;_0x5a0a28=_0x5a0a28[_0x343576(0x193)]((_0x56502e,_0x5170a6,_0xa6d19c)=>_0xa6d19c[_0x343576(0xaa8)](_0x56502e)===_0x5170a6),SceneManager['isSceneBattle']()&&SceneManager[_0x343576(0xa9a)]()&&(_0x42f7fe=!_0x42f7fe),VisuMZ[_0x343576(0x99e)][_0x343576(0x4e5)][_0x343576(0x63a)](this,_0x5a0a28,_0x7150e7,_0x42f7fe),SceneManager[_0x343576(0xa8a)]()&&BattleManager[_0x343576(0x6bf)]['processAnimationRequests']();},Game_Temp['prototype']['setLastPluginCommandInterpreter']=function(_0x3b35aa){const _0x5877dd=_0x534c3a;this[_0x5877dd(0x499)]=_0x3b35aa;},Game_Temp[_0x534c3a(0x53c)][_0x534c3a(0xa1d)]=function(){const _0x289b07=_0x534c3a;return this[_0x289b07(0x499)];},Game_Temp[_0x534c3a(0x53c)][_0x534c3a(0x427)]=function(){const _0x1eec97=_0x534c3a;this[_0x1eec97(0xa47)]=undefined;},Game_Temp[_0x534c3a(0x53c)][_0x534c3a(0x2f1)]=function(_0x336f37){const _0x3f5993=_0x534c3a;$gameMap&&$dataMap&&$dataMap[_0x3f5993(0x650)]&&this[_0x3f5993(0x9f5)]($dataMap[_0x3f5993(0x650)]);const _0x78971d=$dataTroops[_0x336f37];if(_0x78971d){if(_0x3f5993(0x51c)===_0x3f5993(0x51c))this[_0x3f5993(0x9f5)](_0x78971d[_0x3f5993(0x180)]);else{function _0x4745bb(){const _0x4697dd=_0x3f5993;_0x4ad028[_0x4697dd(0x821)](_0x51dada);}}}},Game_Temp[_0x534c3a(0x53c)][_0x534c3a(0x9f5)]=function(_0x31c08d){const _0x380055=_0x534c3a;if(!_0x31c08d)return;if(_0x31c08d[_0x380055(0x5ed)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0x4f290a=String(RegExp['$1']);if(_0x4f290a[_0x380055(0x5ed)](/DEFAULT/i))this[_0x380055(0xa47)]=_0x380055(0x7a2);else{if(_0x4f290a[_0x380055(0x5ed)](/LIST/i))this['_forcedBattleLayout']=_0x380055(0xaa4);else{if(_0x4f290a[_0x380055(0x5ed)](/XP/i))this['_forcedBattleLayout']='xp';else{if(_0x4f290a[_0x380055(0x5ed)](/PORTRAIT/i))this[_0x380055(0xa47)]=_0x380055(0x1ab);else{if(_0x4f290a[_0x380055(0x5ed)](/BORDER/i)){if('Tbcro'===_0x380055(0x840)){function _0x72a618(){const _0x2af766=_0x380055;return this[_0x2af766(0x766)]();}}else this[_0x380055(0xa47)]=_0x380055(0x4a4);}else{if(_0x4f290a[_0x380055(0x5ed)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported[_0x380055(0x7fa)])this['_forcedBattleLayout']=_0x380055(0x935);else{if(_0x380055(0xa39)!=='iSzqR'){function _0x5cec00(){const _0x473dc7=_0x380055;_0x17e14e[_0x473dc7(0x99e)][_0x473dc7(0x7da)][_0x473dc7(0x63a)](this,_0x95b262);}}else this[_0x380055(0xa47)]='default';}}}}}}}}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x24e)]=Game_System[_0x534c3a(0x53c)]['initialize'],Game_System[_0x534c3a(0x53c)][_0x534c3a(0x96e)]=function(){const _0x15586b=_0x534c3a;VisuMZ[_0x15586b(0x99e)][_0x15586b(0x24e)]['call'](this),this[_0x15586b(0x5ef)]();},Game_System[_0x534c3a(0x53c)][_0x534c3a(0x5ef)]=function(){const _0x5e71b8=_0x534c3a;this['_defeatedEnemies']=this[_0x5e71b8(0x60c)]||[];},Game_System[_0x534c3a(0x53c)][_0x534c3a(0x659)]=function(){const _0x7cdae7=_0x534c3a;if(this['_defeatedEnemies']===undefined)this['initBattleCore']();return this[_0x7cdae7(0x60c)];},Game_System['prototype']['registerDefeatedEnemy']=function(_0x5e290c){const _0x2c6d34=_0x534c3a;if(this[_0x2c6d34(0x60c)]===undefined)this['initBattleCore']();if(!_0x5e290c)return;if(this[_0x2c6d34(0x60c)]['includes'](_0x5e290c))return;this[_0x2c6d34(0x60c)]['push'](_0x5e290c),this[_0x2c6d34(0x60c)][_0x2c6d34(0xa92)]((_0x5e805d,_0x40d6e1)=>_0x5e805d-_0x40d6e1);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x651)]=Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x9f0)],Game_BattlerBase[_0x534c3a(0x53c)]['addNewState']=function(_0x517286){const _0x345f21=_0x534c3a,_0x84f204=this[_0x345f21(0x582)](),_0x12b47a=this[_0x345f21(0xa07)]();VisuMZ[_0x345f21(0x99e)][_0x345f21(0x651)][_0x345f21(0x63a)](this,_0x517286);if(this[_0x345f21(0x405)]()&&_0x84f204&&this[_0x345f21(0x43f)]()){if('HRxqu'===_0x345f21(0x93f)){function _0x48a057(){const _0x2ed7f0=_0x345f21;return _0x1ebcd1[_0x2ed7f0(0x180)];}}else this['_visualHpGauge_JustDied']=!this[_0x345f21(0x493)](),$gameSystem[_0x345f21(0x60b)](this['enemyId']());}SceneManager[_0x345f21(0xa8a)]()&&_0x12b47a!==this[_0x345f21(0xa07)]()&&(this['battler']()&&this[_0x345f21(0x7c4)]()['refreshMotion']());},Game_Enemy[_0x534c3a(0x53c)]['hasBeenDefeatedBefore']=function(){const _0x2a0c27=_0x534c3a;return $gameSystem[_0x2a0c27(0x659)]()[_0x2a0c27(0x96f)](this[_0x2a0c27(0x809)]);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x3ab)]=Game_BattlerBase['prototype'][_0x534c3a(0x33e)],Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x33e)]=function(_0x4fe660){const _0x4cf851=_0x534c3a;VisuMZ[_0x4cf851(0x99e)][_0x4cf851(0x3ab)][_0x4cf851(0x63a)](this,_0x4fe660),this[_0x4cf851(0x405)]()&&_0x4fe660===this[_0x4cf851(0x36f)]()&&this['isAlive']()&&(this[_0x4cf851(0x404)]=![]),!this[_0x4cf851(0x52d)]&&!this[_0x4cf851(0x863)]&&SceneManager[_0x4cf851(0xa8a)]()&&this[_0x4cf851(0xe5)]();},VisuMZ['BattleCore'][_0x534c3a(0x2c4)]=Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x48e)],Game_Action[_0x534c3a(0x53c)]['clear']=function(){const _0x281dfb=_0x534c3a;VisuMZ['BattleCore']['Game_Action_clear'][_0x281dfb(0x63a)](this),this[_0x281dfb(0x845)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x281dfb(0x3a0)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x281dfb(0x69a)]='default';},Game_Action[_0x534c3a(0x53c)]['makeDamageValue']=function(_0x5bcdf2,_0x4ae31c){const _0x53a17a=_0x534c3a;return VisuMZ[_0x53a17a(0x99e)][_0x53a17a(0x795)][_0x53a17a(0x6c4)][_0x53a17a(0xc8)]['call'](this,_0x5bcdf2,_0x4ae31c);},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x2fd)]=function(_0x514092,_0x3b3e5a){const _0x32b2d7=_0x534c3a;return VisuMZ['BattleCore'][_0x32b2d7(0x795)]['Damage']['VarianceFormulaJS'][_0x32b2d7(0x63a)](this,_0x514092,_0x3b3e5a);},Game_Action['prototype'][_0x534c3a(0x415)]=function(_0x4b456c,_0x1eece7){const _0xa30a1f=_0x534c3a;return VisuMZ[_0xa30a1f(0x99e)][_0xa30a1f(0x795)]['Damage'][_0xa30a1f(0x9d6)][_0xa30a1f(0x63a)](this,_0x4b456c,_0x1eece7);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x3c8)]=Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x971)],Game_Action[_0x534c3a(0x53c)]['itemHit']=function(_0x1fa606){const _0x26172f=_0x534c3a,_0x1cb9e0=this['item']()[_0x26172f(0x650)];if(_0x1cb9e0[_0x26172f(0x5ed)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x1cb9e0[_0x26172f(0x5ed)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x34ef88=VisuMZ['BattleCore'][_0x26172f(0x3c8)][_0x26172f(0x63a)](this,_0x1fa606);return _0x34ef88=this[_0x26172f(0x3a0)][_0x26172f(0x403)]*_0x34ef88+this['_multipliers'][_0x26172f(0x7be)],_0x34ef88;}}},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x8fa)]=function(_0x4f7c14){const _0x332531=_0x534c3a;if(!this[_0x332531(0x464)]()[_0x332531(0x8fc)][_0x332531(0xa36)])return 0x0;let _0x1c1719=VisuMZ[_0x332531(0x99e)][_0x332531(0x795)][_0x332531(0x6c4)][_0x332531(0x191)]['call'](this,_0x4f7c14);return _0x1c1719=this[_0x332531(0x3a0)][_0x332531(0x2e1)]*_0x1c1719+this[_0x332531(0x3a0)]['criticalHitFlat'],_0x1c1719;},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x74d)]=function(_0x528be0){const _0x3aa3db=_0x534c3a;return _0x528be0=VisuMZ[_0x3aa3db(0x99e)][_0x3aa3db(0x795)][_0x3aa3db(0x6c4)][_0x3aa3db(0xc9)][_0x3aa3db(0x63a)](this,_0x528be0),_0x528be0=this[_0x3aa3db(0x3a0)][_0x3aa3db(0x76a)]*_0x528be0+this[_0x3aa3db(0x3a0)][_0x3aa3db(0x4c7)],_0x528be0;},VisuMZ['BattleCore'][_0x534c3a(0x953)]=Game_Action[_0x534c3a(0x53c)]['evalDamageFormula'],Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x219)]=function(_0x3af702){const _0x33f32c=_0x534c3a;if(this['_customDamageFormula']!==_0x33f32c(0x7a2)){if(_0x33f32c(0x45d)===_0x33f32c(0x7f4)){function _0x3f60a(){const _0x3528c8=_0x33f32c;if(!_0x53fb06[_0x3528c8(0x4d6)]())return;_0x5d8380[_0x3528c8(0x99e)][_0x3528c8(0x40f)]['call'](this,_0x11e302);}}else return this['customDamageFormula'](_0x3af702);}else return DataManager[_0x33f32c(0xa25)](this[_0x33f32c(0x464)]())==='MANUAL'?VisuMZ[_0x33f32c(0x99e)][_0x33f32c(0x953)]['call'](this,_0x3af702):this[_0x33f32c(0x9ea)](_0x3af702);},Game_Action['prototype']['setCustomDamageFormula']=function(_0x25ebfc){const _0x47ab7a=_0x534c3a;this[_0x47ab7a(0x69a)]=_0x25ebfc;},Game_Action[_0x534c3a(0x53c)]['customDamageFormula']=function(_0x4f6d35){const _0x17fcb3=_0x534c3a,_0x2a773b=this[_0x17fcb3(0x464)](),_0x4d0439=_0x2a773b['damage'][_0x17fcb3(0x9bd)];_0x2a773b['damage']['formula']=this[_0x17fcb3(0x69a)];let _0x24ecfc=VisuMZ[_0x17fcb3(0x99e)][_0x17fcb3(0x953)][_0x17fcb3(0x63a)](this,_0x4f6d35);return _0x2a773b['damage'][_0x17fcb3(0x9bd)]=_0x4d0439,_0x24ecfc;},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x171)]=function(){const _0x5466b9=_0x534c3a;if(this['item']()[_0x5466b9(0x650)][_0x5466b9(0x5ed)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x430fa2=String(RegExp['$1'])[_0x5466b9(0x2ca)]()[_0x5466b9(0x5a9)]();return _0x430fa2;}return'MANUAL';},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x9ea)]=function(_0x2c54dd){const _0x572a27=_0x534c3a,_0x4e677a=DataManager[_0x572a27(0xa25)](this[_0x572a27(0x464)]()),_0x2a2e9f=VisuMZ[_0x572a27(0x12c)][_0x4e677a];try{return _0x2a2e9f['Formula'][_0x572a27(0x63a)](this,_0x2c54dd);}catch(_0x14d128){if($gameTemp[_0x572a27(0x5ae)]())console[_0x572a27(0x8aa)](_0x14d128);return VisuMZ[_0x572a27(0x99e)][_0x572a27(0x953)][_0x572a27(0x63a)](this);}},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x573)]=function(_0x5dcc5a,_0x537dd3){const _0x30fda9=_0x534c3a;if(this[_0x30fda9(0x6a7)]())return _0x537dd3;const _0x1c2e0b=this[_0x30fda9(0x3fe)](),_0x3c1410=_0x5dcc5a;let _0x3bf5be=[],_0x5776ad=[];_0x3bf5be['push'](this[_0x30fda9(0x845)]['arPenFlat'],this['_armorPenetration'][_0x30fda9(0x34d)]),_0x5776ad[_0x30fda9(0x3ba)](this[_0x30fda9(0x845)][_0x30fda9(0x88a)],this[_0x30fda9(0x845)][_0x30fda9(0x9d8)]);const _0x3f89d6=this[_0x30fda9(0x28c)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x3bb8ef=this[_0x30fda9(0x28c)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x5c0108=this[_0x30fda9(0x28c)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x452661=this[_0x30fda9(0x28c)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x3bf5be=_0x3bf5be[_0x30fda9(0x34b)](_0x3c1410[_0x30fda9(0x633)]()[_0x30fda9(0x406)](_0x5efb70=>_0x5efb70&&_0x5efb70[_0x30fda9(0x650)][_0x30fda9(0x5ed)](_0x3f89d6)?Number(RegExp['$1']):0x0)),_0x5776ad=_0x5776ad[_0x30fda9(0x34b)](_0x3c1410['traitObjects']()[_0x30fda9(0x406)](_0x3d82d2=>_0x3d82d2&&_0x3d82d2[_0x30fda9(0x650)][_0x30fda9(0x5ed)](_0x3bb8ef)?Number(RegExp['$1'])/0x64:0x0)),_0x3bf5be=_0x3bf5be[_0x30fda9(0x34b)](_0x1c2e0b[_0x30fda9(0x633)]()[_0x30fda9(0x406)](_0x3c1477=>_0x3c1477&&_0x3c1477[_0x30fda9(0x650)][_0x30fda9(0x5ed)](_0x5c0108)?Number(RegExp['$1']):0x0)),_0x5776ad=_0x5776ad[_0x30fda9(0x34b)](_0x1c2e0b[_0x30fda9(0x633)]()['map'](_0x24b125=>_0x24b125&&_0x24b125[_0x30fda9(0x650)][_0x30fda9(0x5ed)](_0x452661)?Number(RegExp['$1'])/0x64:0x0)),this[_0x30fda9(0x464)]()[_0x30fda9(0x650)]['match'](_0x5c0108)&&_0x3bf5be[_0x30fda9(0x3ba)](Number(RegExp['$1'])),this[_0x30fda9(0x464)]()[_0x30fda9(0x650)]['match'](_0x452661)&&_0x5776ad[_0x30fda9(0x3ba)](Number(RegExp['$1'])),_0x537dd3=_0x3bf5be[_0x30fda9(0x9c3)]((_0x25bb80,_0x1d62df)=>_0x25bb80-_0x1d62df,_0x537dd3),_0x537dd3>0x0&&(_0x537dd3=_0x5776ad[_0x30fda9(0x9c3)]((_0x6efc1d,_0x56ec88)=>_0x6efc1d*(0x1-_0x56ec88),_0x537dd3)),_0x537dd3;},VisuMZ['BattleCore'][_0x534c3a(0x82e)]=Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x8da)],Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x8da)]=function(_0x451365,_0x205537){const _0x10c423=_0x534c3a;_0x205537=_0x205537*this[_0x10c423(0x3a0)][_0x10c423(0x7c2)],_0x205537+=this[_0x10c423(0x3a0)]['damageFlat']*(_0x205537>=0x0?0x1:-0x1),_0x205537=this['applyBattleCoreJS'](_0x10c423(0x96d),_0x451365,_0x205537,![]),_0x205537=this['applyDamageCaps'](_0x205537),_0x205537=Math[_0x10c423(0x8d4)](_0x205537),this[_0x10c423(0x5f4)]=_0x205537,this['_totalValue']=this[_0x10c423(0x411)]||0x0,this[_0x10c423(0x411)]+=_0x205537,VisuMZ[_0x10c423(0x99e)][_0x10c423(0x82e)][_0x10c423(0x63a)](this,_0x451365,_0x205537),this['applyBattleCoreJS'](_0x10c423(0x725),_0x451365,_0x205537,!![]);},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x9c4)]=function(_0x321722){const _0x105751=_0x534c3a;if(this[_0x105751(0x997)]())return _0x321722;return _0x321722=this[_0x105751(0x3be)](_0x321722),_0x321722=this['applyHardDamageCap'](_0x321722),_0x321722;},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x997)]=function(){const _0x109716=_0x534c3a,_0x13c6dc=/<BYPASS DAMAGE CAP>/i;if(this[_0x109716(0x464)]()[_0x109716(0x650)][_0x109716(0x5ed)](_0x13c6dc))return!![];if(this[_0x109716(0x3fe)]()[_0x109716(0x633)]()['some'](_0x95c3b1=>_0x95c3b1&&_0x95c3b1[_0x109716(0x650)][_0x109716(0x5ed)](_0x13c6dc)))return!![];return!VisuMZ[_0x109716(0x99e)][_0x109716(0x795)]['Damage'][_0x109716(0xa4e)];},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x3be)]=function(_0x7e78ac){const _0x438c58=_0x534c3a;if(!VisuMZ[_0x438c58(0x99e)][_0x438c58(0x795)][_0x438c58(0x6c4)][_0x438c58(0x2db)])return _0x7e78ac;const _0x5d6854=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x438c58(0x464)]()['note']['match'](_0x5d6854))return!![];if(this[_0x438c58(0x3fe)]()[_0x438c58(0x633)]()['some'](_0x223390=>_0x223390&&_0x223390['note'][_0x438c58(0x5ed)](_0x5d6854)))return!![];const _0x55e1ba=_0x7e78ac<0x0?-0x1:0x1;_0x7e78ac=Math[_0x438c58(0x55a)](_0x7e78ac);let _0x237247=this[_0x438c58(0x3fe)]()[_0x438c58(0x31f)]();this[_0x438c58(0x464)]()[_0x438c58(0x650)][_0x438c58(0x5ed)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x237247+=Number(RegExp['$1'])/0x64);_0x237247=_0x237247[_0x438c58(0x63c)](0.01,0x1);const _0x126815=this[_0x438c58(0x1ce)](),_0x1e424f=_0x237247*_0x126815;if(_0x7e78ac>_0x1e424f&&_0x126815>_0x1e424f){_0x7e78ac-=_0x1e424f;const _0x228f1f=VisuMZ[_0x438c58(0x99e)][_0x438c58(0x795)][_0x438c58(0x6c4)][_0x438c58(0xa19)],_0x4c4fe8=Math[_0x438c58(0x9a7)](0x1-_0x7e78ac/((_0x126815-_0x1e424f)*_0x228f1f+_0x7e78ac),0.01);_0x7e78ac*=_0x4c4fe8,_0x7e78ac+=_0x1e424f;}return _0x7e78ac*_0x55e1ba;},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x1ce)]=function(){const _0x3bd909=_0x534c3a;if(this[_0x3bd909(0x464)]()[_0x3bd909(0x650)][_0x3bd909(0x5ed)](/<DAMAGE CAP:[ ](\d+)>/i)){if(_0x3bd909(0x1b5)!==_0x3bd909(0x1b5)){function _0x16d8aa(){const _0x425f1a=_0x3bd909;_0x143102[_0x425f1a(0x53c)][_0x425f1a(0x611)]['call'](this,_0x16ee5c,_0x3845d3,_0x1148bf,_0x1d9c4c,_0xb741a1);}}else return Number(RegExp['$1']);}else return this[_0x3bd909(0x3fe)]()['hardDamageCap']();},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0xe9)]=function(_0x5c3ac0){const _0x5cdcfd=_0x534c3a;let _0x157ffa=this[_0x5cdcfd(0x1ce)]();return _0x5c3ac0[_0x5cdcfd(0x63c)](-_0x157ffa,_0x157ffa);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x52a)]=Game_Action['prototype'][_0x534c3a(0x437)],Game_Action['prototype'][_0x534c3a(0x437)]=function(_0x2e0f1b){const _0x261ccf=_0x534c3a;this[_0x261ccf(0x82f)](_0x261ccf(0x1b2),_0x2e0f1b,0x0,!![]),VisuMZ['BattleCore'][_0x261ccf(0x52a)][_0x261ccf(0x63a)](this,_0x2e0f1b),this[_0x261ccf(0x82f)](_0x261ccf(0x867),_0x2e0f1b,this[_0x261ccf(0x5f4)]||0x0,!![]),this['applyResultSwitches'](_0x2e0f1b);},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x82f)]=function(_0x516ce0,_0x2f996d,_0xefe182,_0x394c64){const _0x3ee277=_0x534c3a;if(this[_0x3ee277(0x863)]||this[_0x3ee277(0x52d)])return;_0xefe182=_0xefe182||0x0;const _0x16326a=_0xefe182,_0x1bccec=VisuMZ[_0x3ee277(0x99e)][_0x3ee277(0x795)][_0x3ee277(0x871)],_0x3eacfd=_0x516ce0['format']('');if(_0x1bccec[_0x3eacfd]){_0xefe182=_0x1bccec[_0x3eacfd]['call'](this,_0xefe182,_0x2f996d);if(_0x394c64)_0xefe182=_0x16326a;}let _0x4e6455=VisuMZ[_0x3ee277(0x99e)]['createKeyJS'](this[_0x3ee277(0x464)](),_0x516ce0[_0x3ee277(0x8e9)](''));if(VisuMZ[_0x3ee277(0x99e)]['JS'][_0x4e6455]){_0xefe182=VisuMZ[_0x3ee277(0x99e)]['JS'][_0x4e6455][_0x3ee277(0x63a)](this,this[_0x3ee277(0x3fe)](),_0x2f996d,this[_0x3ee277(0x464)](),_0xefe182);if(_0x394c64)_0xefe182=_0x16326a;}for(const _0xd05c28 of this['subject']()[_0x3ee277(0x633)]()){if(_0x3ee277(0x544)===_0x3ee277(0x302)){function _0x589e62(){const _0x5716f0=_0x3ee277,_0x19f46d=this[_0x5716f0(0x3d1)](_0x5d690f);return _0x19f46d===_0x5716f0(0xa5d)?this[_0x5716f0(0x632)]():_0x43cc94[_0x5716f0(0x99e)][_0x5716f0(0xa75)][_0x5716f0(0x63a)](this,_0x772553);}}else{if(!_0xd05c28)continue;_0x4e6455=VisuMZ[_0x3ee277(0x99e)][_0x3ee277(0x512)](_0xd05c28,_0x516ce0['format']('AsUser'));if(VisuMZ[_0x3ee277(0x99e)]['JS'][_0x4e6455]){_0xefe182=VisuMZ[_0x3ee277(0x99e)]['JS'][_0x4e6455]['call'](this,this[_0x3ee277(0x3fe)](),_0x2f996d,_0xd05c28,_0xefe182);if(_0x394c64)_0xefe182=_0x16326a;}}}for(const _0x557234 of _0x2f996d['traitObjects']()){if(!_0x557234)continue;_0x4e6455=VisuMZ['BattleCore'][_0x3ee277(0x512)](_0x557234,_0x516ce0[_0x3ee277(0x8e9)](_0x3ee277(0x147)));if(VisuMZ[_0x3ee277(0x99e)]['JS'][_0x4e6455]){if(_0x3ee277(0x4b1)===_0x3ee277(0x7e3)){function _0x11b693(){const _0x243fa7=_0x3ee277;!_0xcc12c2[_0x243fa7(0x99e)][_0x243fa7(0x795)][_0x243fa7(0xa01)]['ShowMissEvasion']?this[_0x243fa7(0x3ba)](_0x243fa7(0x311),_0x4affb2):_0x488c37['BattleCore'][_0x243fa7(0x8ab)]['call'](this,_0x10eaef);}}else{_0xefe182=VisuMZ['BattleCore']['JS'][_0x4e6455]['call'](this,this[_0x3ee277(0x3fe)](),_0x2f996d,_0x557234,_0xefe182);if(_0x394c64)_0xefe182=_0x16326a;}}}return _0xefe182;},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x394)]=function(_0x375646){const _0x4a0085=_0x534c3a,_0x5702ad=this[_0x4a0085(0x411)]||0x0,_0x136118=VisuMZ[_0x4a0085(0x99e)][_0x4a0085(0x795)][_0x4a0085(0x871)],_0x12682e=_0x375646[_0x4a0085(0x8e9)]('');_0x136118[_0x12682e]&&_0x136118[_0x12682e][_0x4a0085(0x63a)](this,_0x5702ad);let _0x289f60=VisuMZ[_0x4a0085(0x99e)][_0x4a0085(0x512)](this[_0x4a0085(0x464)](),_0x375646);VisuMZ[_0x4a0085(0x99e)]['JS'][_0x289f60]&&VisuMZ[_0x4a0085(0x99e)]['JS'][_0x289f60]['call'](this,this[_0x4a0085(0x3fe)](),this[_0x4a0085(0x3fe)](),this[_0x4a0085(0x464)](),_0x5702ad);for(const _0x182e2e of this['subject']()[_0x4a0085(0x633)]()){if(_0x4a0085(0x36d)!==_0x4a0085(0x982)){if(!_0x182e2e)continue;_0x289f60=VisuMZ[_0x4a0085(0x99e)][_0x4a0085(0x512)](_0x182e2e,_0x375646),VisuMZ[_0x4a0085(0x99e)]['JS'][_0x289f60]&&VisuMZ[_0x4a0085(0x99e)]['JS'][_0x289f60]['call'](this,this[_0x4a0085(0x3fe)](),this[_0x4a0085(0x3fe)](),_0x182e2e,_0x5702ad);}else{function _0x4a44d4(){_0x40abca=_0x5a29e6(_0x604ed2['$1']),_0x17103d--;}}}},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x787)]=function(){const _0x4eb8b0=_0x534c3a;return VisuMZ[_0x4eb8b0(0x99e)][_0x4eb8b0(0x795)][_0x4eb8b0(0x871)][_0x4eb8b0(0xa98)][_0x4eb8b0(0x63a)](this);},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x19e)]=function(){const _0x4ce51e=_0x534c3a;return VisuMZ['BattleCore'][_0x4ce51e(0x795)][_0x4ce51e(0x871)][_0x4ce51e(0x4ff)];},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0xd0)]=function(){const _0x1e195a=_0x534c3a;return this[_0x1e195a(0x464)]()['note']['match'](/<JS TARGETS>/i);},Game_Action['prototype'][_0x534c3a(0x77b)]=function(){const _0x2e582a=_0x534c3a;if(!this[_0x2e582a(0x536)]&&this['subject']()['isConfused']())return![];if(this[_0x2e582a(0xd0)]())return!![];return typeof this[_0x2e582a(0x464)]()[_0x2e582a(0x7ef)]==='string';},VisuMZ['BattleCore'][_0x534c3a(0x742)]=Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x60e)],Game_Action['prototype']['isForOpponent']=function(){const _0x49ab36=_0x534c3a;if(this[_0x49ab36(0x77b)]()&&!this[_0x49ab36(0xd0)]()){if('qMQxp'!==_0x49ab36(0x5ac)){function _0x2504f1(){const _0x1b2f73=_0x49ab36;_0x3ddd64['prototype'][_0x1b2f73(0xa80)]['call'](this,_0x4c8898),this[_0x1b2f73(0x3cf)](_0x227692);}}else return this['isForOpponentBattleCore']();}else{if('gabRp'==='WnseH'){function _0x3d92ae(){const _0xfc6a48=_0x49ab36,_0x65eed5=_0x133f47[_0xfc6a48(0x2c1)];_0x2df40c[_0xfc6a48(0xaa0)][_0x65eed5]=new _0x30fab4(_0x48506a);}}else return VisuMZ[_0x49ab36(0x99e)]['Game_Action_isForOpponent'][_0x49ab36(0x63a)](this);}},Game_Action['prototype'][_0x534c3a(0x928)]=function(){const _0x4ed060=_0x534c3a,_0x26cb26=this[_0x4ed060(0x464)]()[_0x4ed060(0x7ef)];return _0x26cb26[_0x4ed060(0x5ed)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x534c3a(0x99e)]['Game_Action_isForFriend']=Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x59c)],Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x59c)]=function(){const _0x27bd09=_0x534c3a;if(this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()){if(_0x27bd09(0x3ea)===_0x27bd09(0x41a)){function _0x3340f7(){const _0x31431c=_0x27bd09;return _0x5ef991[_0x31431c(0x99e)][_0x31431c(0x1c7)][_0x31431c(0x63a)](this,_0x21ca80),_0x343b24[_0x31431c(0x1cb)](_0x342d6c=>{const _0x3f8cfb=_0x31431c;this['_branch'][this[_0x3f8cfb(0x170)]]=_0x342d6c;}),!![];}}else return this[_0x27bd09(0x54c)]();}else return VisuMZ[_0x27bd09(0x99e)][_0x27bd09(0x11a)][_0x27bd09(0x63a)](this);},Game_Action[_0x534c3a(0x53c)]['isForFriendBattleCore']=function(){const _0x4b5791=_0x534c3a,_0xdea011=this[_0x4b5791(0x464)]()[_0x4b5791(0x7ef)];return _0xdea011[_0x4b5791(0x5ed)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x2d3)]=Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x38d)],Game_Action[_0x534c3a(0x53c)]['isForRandom']=function(){const _0x4434fc=_0x534c3a;return this[_0x4434fc(0x77b)]()&&!this[_0x4434fc(0xd0)]()?this['isForRandomBattleCore']():VisuMZ[_0x4434fc(0x99e)][_0x4434fc(0x2d3)][_0x4434fc(0x63a)](this);},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x8bf)]=function(){const _0x384031=_0x534c3a,_0x171fe7=this[_0x384031(0x464)]()[_0x384031(0x7ef)];return _0x171fe7[_0x384031(0x5ed)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0x534c3a(0x4b3)]=Game_Action[_0x534c3a(0x53c)]['needsSelection'],Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x197)]=function(){const _0x5a1716=_0x534c3a;if(this['isBattleCoreTargetScope']()&&!this[_0x5a1716(0xd0)]()){if('zMGtY'!==_0x5a1716(0x3b3))return this[_0x5a1716(0x3e4)]();else{function _0x372593(){const _0x4be7b5=_0x5a1716;return _0x2729a5['filter'](_0x280118=>_0x280118!==_0x201c58&&!_0x100e5e[_0x4be7b5(0x96f)](_0x280118)&&_0x280118['notFocusValid']());}}}else{if(_0x5a1716(0x921)==='mprUb')return VisuMZ['BattleCore'][_0x5a1716(0x4b3)][_0x5a1716(0x63a)](this);else{function _0x1165aa(){const _0x1eba9a=_0x5a1716;if(!_0x4dda26[_0x1eba9a(0x28c)]())return![];if(!_0x425924['isForAll']())return![];if(!_0xa0221c[_0x1eba9a(0x60e)]())return![];return _0x1dd26e['BattleCore'][_0x1eba9a(0x795)][_0x1eba9a(0x189)]['AutoMeleeAoE'];}}}},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x3e4)]=function(){const _0x485d1b=_0x534c3a,_0x428e8e=this['item']()[_0x485d1b(0x7ef)];if(_0x428e8e[_0x485d1b(0x5ed)](/RANDOM/i))return![];if(_0x428e8e[_0x485d1b(0x5ed)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x428e8e['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ['BattleCore'][_0x485d1b(0x4b3)]['call'](this);},VisuMZ[_0x534c3a(0x99e)]['Game_Action_makeTargets']=Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x507)],Game_Action[_0x534c3a(0x53c)]['makeTargets']=function(){const _0x2bac57=_0x534c3a;let _0xe5c30a=[];return this[_0x2bac57(0x77b)]()?_0xe5c30a=this[_0x2bac57(0x31c)]():_0xe5c30a=VisuMZ[_0x2bac57(0x99e)]['Game_Action_makeTargets']['call'](this),_0xe5c30a=this['applyTargetFilters'](_0xe5c30a),_0xe5c30a;},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x31c)]=function(){const _0x4563aa=_0x534c3a;let _0x2025e3=[];const _0x36ddf2=String(this[_0x4563aa(0x464)]()[_0x4563aa(0x7ef)]),_0x45588c=VisuMZ[_0x4563aa(0x99e)][_0x4563aa(0x512)](this[_0x4563aa(0x464)](),_0x4563aa(0x689));if(VisuMZ[_0x4563aa(0x99e)]['JS'][_0x45588c]){_0x2025e3=VisuMZ['BattleCore'][_0x4563aa(0xd5)][_0x4563aa(0x63a)](this);const _0x5b57dc=VisuMZ[_0x4563aa(0x99e)]['createKeyJS'](this[_0x4563aa(0x464)](),_0x4563aa(0x689));return _0x2025e3=VisuMZ[_0x4563aa(0x99e)]['JS'][_0x5b57dc][_0x4563aa(0x63a)](this,this[_0x4563aa(0x3fe)](),_0x2025e3),this['repeatTargets'](_0x2025e3);}if(_0x36ddf2['match'](/(\d+) RANDOM ANY/i)){let _0x383dd6=Number(RegExp['$1']);while(_0x383dd6--){const _0x4866c5=Math[_0x4563aa(0x676)](0x2)===0x0?this[_0x4563aa(0x621)]():this[_0x4563aa(0xa6e)]();_0x2025e3['push'](_0x4866c5[_0x4563aa(0x3a3)]());}return this[_0x4563aa(0x74f)](_0x2025e3);}if(_0x36ddf2[_0x4563aa(0x5ed)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x419948=Number(RegExp['$1']);while(_0x419948--){_0x2025e3[_0x4563aa(0x3ba)](this[_0x4563aa(0x621)]()[_0x4563aa(0x3a3)]());}return this['repeatTargets'](_0x2025e3);}if(_0x36ddf2[_0x4563aa(0x5ed)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x2f3350=Number(RegExp['$1']);while(_0x2f3350--){if(_0x4563aa(0x8ee)==='EpqFD'){function _0x1e7d09(){const _0x427f54=_0x4563aa;this[_0x427f54(0xa47)]=_0x427f54(0x1ab);}}else _0x2025e3['push'](this[_0x4563aa(0xa6e)]()[_0x4563aa(0x3a3)]());}return this[_0x4563aa(0x74f)](_0x2025e3);}if(_0x36ddf2[_0x4563aa(0x5ed)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x2025e3[_0x4563aa(0x3ba)](...this[_0x4563aa(0xa6e)]()[_0x4563aa(0x2b8)]()[_0x4563aa(0x193)](_0x43f5f8=>_0x43f5f8!==this[_0x4563aa(0x3fe)]())),this[_0x4563aa(0x74f)](_0x2025e3);return VisuMZ[_0x4563aa(0x99e)][_0x4563aa(0xd5)][_0x4563aa(0x63a)](this);},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x69f)]=function(_0x3f27ef){const _0x135b7a=_0x534c3a,_0x14b637=[];for(let _0x50744a=0x0;_0x50744a<this[_0x135b7a(0x13b)]();_0x50744a++){if(_0x135b7a(0x4af)==='CmHYe')_0x14b637[_0x135b7a(0x3ba)](_0x3f27ef[_0x135b7a(0x3a3)]());else{function _0x294416(){const _0x24fc4c=_0x135b7a;_0x4c3173[_0x24fc4c(0x99e)]['Scene_Battle_startPartyCommandSelection'][_0x24fc4c(0x63a)](this);}}}return _0x14b637;},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x9c9)]=function(_0x45bd01){const _0x1e6217=_0x534c3a;if(!this['item']())return _0x45bd01;const _0x4223d2=this[_0x1e6217(0x464)]()[_0x1e6217(0x650)];return _0x4223d2['match'](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x45bd01[_0x1e6217(0x46f)](this[_0x1e6217(0x3fe)]()),_0x45bd01;},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x36a)]=Game_Action[_0x534c3a(0x53c)]['itemEffectAddAttackState'],Game_Action[_0x534c3a(0x53c)]['itemEffectAddAttackState']=function(_0x1af680,_0x17e05e){const _0x535188=_0x534c3a,_0x40451d=_0x1af680[_0x535188(0x3b8)]();this[_0x535188(0x3fe)]()[_0x535188(0x7b8)]()['includes'](_0x1af680[_0x535188(0x36f)]())&&_0x1af680[_0x535188(0x157)](![]),VisuMZ[_0x535188(0x99e)]['Game_Action_itemEffectAddAttackState']['call'](this,_0x1af680,_0x17e05e),_0x1af680[_0x535188(0x157)](_0x40451d);},VisuMZ['BattleCore'][_0x534c3a(0x3c5)]=Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x98f)],Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x98f)]=function(_0x463e84,_0x374301){const _0x79deaa=_0x534c3a,_0x7cfc61=_0x463e84[_0x79deaa(0x3b8)]();_0x374301[_0x79deaa(0x850)]===_0x463e84[_0x79deaa(0x36f)]()&&_0x463e84[_0x79deaa(0x157)](![]),VisuMZ[_0x79deaa(0x99e)][_0x79deaa(0x3c5)]['call'](this,_0x463e84,_0x374301),_0x463e84[_0x79deaa(0x157)](_0x7cfc61);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x93e)]=Game_Action['prototype'][_0x534c3a(0x92e)],Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x92e)]=function(){const _0x29d520=_0x534c3a;VisuMZ['BattleCore']['Game_Action_applyGlobal'][_0x29d520(0x63a)](this),this[_0x29d520(0x451)](),this[_0x29d520(0x4cc)]();},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x451)]=function(){const _0x381f26=_0x534c3a;if(!SceneManager[_0x381f26(0xa8a)]())return;const _0x4a5f75=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x2c88b5=this[_0x381f26(0x464)]()['note'][_0x381f26(0x5ed)](_0x4a5f75);if(_0x2c88b5){if('xkSPM'==='xkSPM')for(const _0x598483 of _0x2c88b5){if('NGAYB'===_0x381f26(0x759)){function _0x1b72b6(){const _0x547dbf=_0x381f26;if(_0x101255[_0x547dbf(0x61a)]()[_0x547dbf(0x92a)]>0x0)return!![];if(_0x4b426b[_0x547dbf(0x61a)]()[_0x547dbf(0x297)]>0x0)return!![];this[_0x547dbf(0x772)]='';}}else{if(!_0x598483)continue;_0x598483['match'](_0x4a5f75);const _0x323a61=String(RegExp['$1'])[_0x381f26(0x4bc)](',')[_0x381f26(0x406)](_0x45edaf=>String(_0x45edaf)[_0x381f26(0x5a9)]()),_0x45a936=_0x323a61[_0x381f26(0x406)](_0x5bfd93=>DataManager['getCommonEventIdWithName'](_0x5bfd93));for(const _0x1b4326 of _0x45a936){const _0x52d13e=$dataCommonEvents[_0x1b4326];_0x52d13e&&$gameTemp[_0x381f26(0x821)](_0x1b4326);}}}else{function _0x2b3e59(){const _0x23d794=_0x381f26;this[_0x23d794(0x52c)]-=0x10;}}}},DataManager[_0x534c3a(0x43a)]=function(_0x376e79){const _0x223cd9=_0x534c3a;_0x376e79=_0x376e79[_0x223cd9(0x2ca)]()[_0x223cd9(0x5a9)](),this[_0x223cd9(0xa6b)]=this[_0x223cd9(0xa6b)]||{};if(this[_0x223cd9(0xa6b)][_0x376e79])return this[_0x223cd9(0xa6b)][_0x376e79];for(const _0x51a376 of $dataCommonEvents){if(!_0x51a376)continue;let _0x29bdcf=_0x51a376[_0x223cd9(0x180)];_0x29bdcf=_0x29bdcf[_0x223cd9(0x283)](/\x1I\[(\d+)\]/gi,''),_0x29bdcf=_0x29bdcf[_0x223cd9(0x283)](/\\I\[(\d+)\]/gi,''),this[_0x223cd9(0xa6b)][_0x29bdcf[_0x223cd9(0x2ca)]()['trim']()]=_0x51a376['id'];}return this[_0x223cd9(0xa6b)][_0x376e79]||0x0;},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x4cc)]=function(){const _0x558e99=_0x534c3a;if(!SceneManager[_0x558e99(0xa8a)]())return;const _0x16a428=VisuMZ[_0x558e99(0x99e)][_0x558e99(0x795)][_0x558e99(0x871)];if(_0x16a428[_0x558e99(0x738)]){if(_0x558e99(0x6f1)===_0x558e99(0x820)){function _0x282a5a(){const _0x37431a=_0x558e99;if(this['_battlePortrait']===_0x2f1df2)this['initBattlePortrait']();this[_0x37431a(0x8a3)]=_0x22e296;if(_0x3aaf3a[_0x37431a(0xa8a)]()&&_0x1d5ab3[_0x37431a(0x668)]()[_0x37431a(0x96f)](this)){const _0x206dfa=_0x194dd4[_0x37431a(0x76b)]['_statusWindow'];if(_0x206dfa)_0x206dfa['refreshActorPortrait'](this);}}}else $gameSwitches[_0x558e99(0x44e)](_0x16a428[_0x558e99(0x738)],![]);}if(_0x16a428[_0x558e99(0x1a7)]){if(_0x558e99(0x729)!==_0x558e99(0x729)){function _0x421013(){return 0x0;}}else $gameSwitches[_0x558e99(0x44e)](_0x16a428[_0x558e99(0x1a7)],![]);}if(_0x16a428[_0x558e99(0x9aa)]){if(_0x558e99(0x805)==='zJoOk'){function _0xe188c2(){const _0xe41279=_0x558e99;_0x5a14cb[_0xe41279(0x821)](_0x5625e0[_0xe41279(0x60a)]);}}else $gameVariables[_0x558e99(0x44e)](_0x16a428[_0x558e99(0x9aa)],0x0);}if(_0x16a428[_0x558e99(0xa91)]){if(_0x558e99(0xcd)!==_0x558e99(0xcd)){function _0x301e96(){const _0x432720=_0x558e99,_0x3e6743=this[_0x432720(0x6de)](_0x49d84f,_0x5e8cfc);_0x3e6743[_0x432720(0xa72)][_0x432720(0xed)](_0xefed7b[_0x3e5abd],0x0,0x0,_0x2ea0da,_0x751b96,_0x432720(0x585)),_0x3e6743['x']=(_0x39a3d0-(_0xc9ae9c[_0x432720(0x4a2)]-0x1)/0x2)*_0x260229,_0x3e6743['dy']=-_0x5460b7;}}else $gameVariables[_0x558e99(0x44e)](_0x16a428[_0x558e99(0xa91)],0x0);}},Game_Action[_0x534c3a(0x53c)][_0x534c3a(0x3ef)]=function(_0x2a293c){const _0x402155=_0x534c3a;if(!SceneManager[_0x402155(0xa8a)]())return;if(!_0x2a293c)return;const _0x409e86=_0x2a293c[_0x402155(0x8db)](),_0x14fd2c=VisuMZ[_0x402155(0x99e)][_0x402155(0x795)]['Mechanics'];_0x14fd2c[_0x402155(0x738)]&&_0x409e86[_0x402155(0xa36)]&&$gameSwitches[_0x402155(0x44e)](_0x14fd2c['SwitchCritical'],!![]);if(_0x14fd2c[_0x402155(0x1a7)]&&(_0x409e86[_0x402155(0x8ef)]||_0x409e86[_0x402155(0x647)])){if('txtRj'!==_0x402155(0x76c))$gameSwitches[_0x402155(0x44e)](_0x14fd2c['SwitchMissEvade'],!![]);else{function _0x453b26(){const _0x4612dc=_0x402155;_0x480d1a[_0x4612dc(0x99e)][_0x4612dc(0x992)]['call'](this,_0x556e70),this[_0x4612dc(0x7b4)]();}}}if(_0x14fd2c[_0x402155(0x9aa)]){let _0xb30c75=$gameVariables[_0x402155(0x2bd)](_0x14fd2c[_0x402155(0x9aa)]);if(_0x409e86[_0x402155(0x973)]>0x0){if(_0x402155(0x4aa)!=='fGgNZ')_0xb30c75+=Math['abs'](_0x409e86[_0x402155(0x973)]);else{function _0x2af88c(){const _0x38f6ff=_0x402155;if(!_0x2eaffc[_0x38f6ff(0x4d6)]()&&this['constructor']===_0x533eff){const _0x2b9f26=_0x373137['prototype'][_0x38f6ff(0x1d5)]();['default',_0x38f6ff(0xaa4),_0x38f6ff(0x1ab),_0x38f6ff(0x4a4)][_0x38f6ff(0x96f)](_0x2b9f26)&&(this[_0x38f6ff(0x52c)]=0x0);}}}}$gameVariables[_0x402155(0x44e)](_0x14fd2c['VariableDmg'],_0xb30c75);}if(_0x14fd2c[_0x402155(0xa91)]){let _0x5db6ca=$gameVariables[_0x402155(0x2bd)](_0x14fd2c[_0x402155(0xa91)]);if(_0x409e86[_0x402155(0x973)]<0x0){if('Chhjx'!==_0x402155(0x698)){function _0x4aa695(){const _0x3bb3cd=_0x402155;let _0x21e1bd=0x0;this['_battler']&&!this[_0x3bb3cd(0x679)][_0x3bb3cd(0x8ca)]()&&(_0x21e1bd-=this[_0x3bb3cd(0x67b)],_0x21e1bd-=this[_0x3bb3cd(0x508)]);if(this[_0x3bb3cd(0xf8)]&&this[_0x3bb3cd(0x1d7)]!==_0x9f8896){const _0x444f09=this[_0x3bb3cd(0xf8)]['scale']['y'];_0x21e1bd-=(_0x444f09-0x1)*this['height'];}return _0x21e1bd;}}else _0x5db6ca+=Math[_0x402155(0x55a)](_0x409e86[_0x402155(0x973)]);}$gameVariables[_0x402155(0x44e)](_0x14fd2c[_0x402155(0xa91)],_0x5db6ca);}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x70f)]=Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x3ca)],Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x3ca)]=function(){const _0x4c7501=_0x534c3a;VisuMZ[_0x4c7501(0x99e)][_0x4c7501(0x70f)]['call'](this),this[_0x4c7501(0x420)]();},Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x420)]=function(){const _0xcf8291=_0x534c3a;this[_0xcf8291(0x510)]=![];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x84b)]=Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x9b7)],Game_BattlerBase['prototype'][_0x534c3a(0x9b7)]=function(){const _0xd8a807=_0x534c3a;this[_0xd8a807(0x648)]={},VisuMZ[_0xd8a807(0x99e)][_0xd8a807(0x84b)][_0xd8a807(0x63a)](this);},Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x38a)]=function(_0x1f1af8){const _0x24ff1f=_0x534c3a;return this[_0x24ff1f(0x648)]=this[_0x24ff1f(0x648)]||{},this[_0x24ff1f(0x648)][_0x1f1af8]!==undefined;},Game_BattlerBase['prototype']['hardDamageCap']=function(){const _0x3b02ae=_0x534c3a;if(this[_0x3b02ae(0x648)]['hardDamageCap']!==undefined)return this[_0x3b02ae(0x648)][_0x3b02ae(0x70a)];const _0x32ad77=/<DAMAGE CAP:[ ](\d+)>/i,_0x402d63=this[_0x3b02ae(0x633)]()[_0x3b02ae(0x406)](_0x18365a=>_0x18365a&&_0x18365a[_0x3b02ae(0x650)][_0x3b02ae(0x5ed)](_0x32ad77)?Number(RegExp['$1']):0x0);let _0x481972=_0x402d63['length']>0x0?Math['max'](..._0x402d63):0x0;if(_0x481972<=0x0)_0x481972=VisuMZ[_0x3b02ae(0x99e)][_0x3b02ae(0x795)]['Damage'][_0x3b02ae(0x2ee)];return this[_0x3b02ae(0x648)][_0x3b02ae(0x70a)]=_0x481972,this[_0x3b02ae(0x648)]['hardDamageCap'];},Game_BattlerBase[_0x534c3a(0x53c)]['softDamageCapRate']=function(){const _0x3d1b17=_0x534c3a;if(this[_0x3d1b17(0x648)][_0x3d1b17(0xd7)]!==undefined)return this[_0x3d1b17(0x648)][_0x3d1b17(0xd7)];let _0x255dfa=VisuMZ['BattleCore'][_0x3d1b17(0x795)][_0x3d1b17(0x6c4)]['DefaultSoftCap'];const _0x573337=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x4cf7a1=this['traitObjects']()['map'](_0x8eeee3=>_0x8eeee3&&_0x8eeee3['note'][_0x3d1b17(0x5ed)](_0x573337)?Number(RegExp['$1'])/0x64:0x0);return _0x255dfa=_0x4cf7a1[_0x3d1b17(0x9c3)]((_0x4b62ef,_0x3a2087)=>_0x4b62ef+_0x3a2087,_0x255dfa),this['_cache']['softDamageCap']=_0x255dfa,this['_cache'][_0x3d1b17(0xd7)][_0x3d1b17(0x63c)](0.01,0x1);},VisuMZ['BattleCore'][_0x534c3a(0x852)]=Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x3d5)],Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x3d5)]=function(){const _0x24ef9e=_0x534c3a;VisuMZ[_0x24ef9e(0x99e)]['Game_BattlerBase_die'][_0x24ef9e(0x63a)](this),SceneManager[_0x24ef9e(0xa8a)]()&&this[_0x24ef9e(0x961)](_0x24ef9e(0x88e));},Game_BattlerBase[_0x534c3a(0x53c)]['battler']=function(){const _0x12b942=_0x534c3a;if(!SceneManager[_0x12b942(0xa8a)]())return null;if(!SceneManager[_0x12b942(0x76b)][_0x12b942(0x6bf)])return null;return SceneManager['_scene'][_0x12b942(0x6bf)][_0x12b942(0xa9e)](this);},Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x924)]=function(){const _0x3d71f3=_0x534c3a;return VisuMZ['BattleCore'][_0x3d71f3(0x795)][_0x3d71f3(0x2a0)][_0x3d71f3(0x8b1)];},Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x747)]=function(){const _0x524b66=_0x534c3a;return VisuMZ[_0x524b66(0x99e)]['Settings'][_0x524b66(0x2a0)]['AnchorY'];},Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x547)]=function(){const _0x3ea5fe=_0x534c3a;return this[_0x3ea5fe(0x1e7)]&&this['isActor']()?VisuMZ[_0x3ea5fe(0x99e)][_0x3ea5fe(0x795)][_0x3ea5fe(0x2a0)][_0x3ea5fe(0x413)]:VisuMZ['BattleCore'][_0x3ea5fe(0x795)][_0x3ea5fe(0x53f)][_0x3ea5fe(0x413)];},Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x61c)]=function(){return!![];},Game_BattlerBase['prototype'][_0x534c3a(0x277)]=function(){return 0x0;},Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x832)]=function(){return 0x0;},Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x56b)]=function(_0x31b5ff){const _0x2e26c9=_0x534c3a;if(!_0x31b5ff)return 0x0;let _0x408884=0x0;const _0x3d7a05=_0x31b5ff[_0x2e26c9(0x650)];if(_0x3d7a05[_0x2e26c9(0x5ed)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)){if('XPpjG'==='qRHyr'){function _0x9c10a5(){const _0x17f7b4=_0x2e26c9;this['width']=_0x4c357d[_0x17f7b4(0x456)],this[_0x17f7b4(0x363)]=_0x54de8c[_0x17f7b4(0x363)];const _0x2a13d4=_0x43b8ee[_0x17f7b4(0x9a7)](0x1,this[_0x17f7b4(0x456)]/this[_0x17f7b4(0xa72)]['width']),_0x2f7d49=_0x20968b[_0x17f7b4(0x9a7)](0x1,this['height']/this['bitmap'][_0x17f7b4(0x363)]),_0x1b4a00=_0x229f84[_0x17f7b4(0x9a7)](_0x2a13d4,_0x2f7d49);this['scale']['x']=_0x1b4a00,this[_0x17f7b4(0x43e)]['y']=_0x1b4a00,this['x']=(_0x29582f['width']-this[_0x17f7b4(0x456)])/0x2,this['y']=_0x34bfea[_0x17f7b4(0x363)]-this[_0x17f7b4(0x363)];}}else _0x408884+=Number(RegExp['$1']);}return _0x3d7a05['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x408884+=Number(RegExp['$1'])),_0x408884;},Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x2ab)]=function(_0x5bf7ef){const _0x2526dc=_0x534c3a;if(!_0x5bf7ef)return 0x0;let _0x45c96e=0x0;const _0x599c0a=_0x5bf7ef[_0x2526dc(0x650)];return _0x599c0a['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x45c96e+=Number(RegExp['$1'])),_0x599c0a['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x45c96e+=Number(RegExp['$2'])),_0x45c96e;},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x93c)]=Game_BattlerBase['prototype'][_0x534c3a(0x3c2)],Game_BattlerBase['prototype'][_0x534c3a(0x3c2)]=function(_0x22bb4e){const _0xbbaa78=_0x534c3a;if(_0x22bb4e===this[_0xbbaa78(0x36f)]()&&this[_0xbbaa78(0x3b8)]())return!![];return VisuMZ['BattleCore'][_0xbbaa78(0x93c)]['call'](this,_0x22bb4e);},Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x3b8)]=function(){return this['_immortal'];},Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x157)]=function(_0x2d52f){const _0x333ada=_0x534c3a;if(_0x2d52f){if(_0x333ada(0x45e)===_0x333ada(0x3f9)){function _0x40643a(){const _0x45ee40=_0x333ada;this[_0x45ee40(0x14e)]();}}else this['addImmortal']();}else{if(_0x333ada(0x12f)===_0x333ada(0x12f))this[_0x333ada(0x6fd)]();else{function _0xfd09e6(){const _0x58d8e5=_0x333ada;return _0x4296cd[_0x58d8e5(0x621)]()['deadMembers']();}}}},Game_BattlerBase[_0x534c3a(0x53c)]['addImmortal']=function(){const _0x211705=_0x534c3a;if(this[_0x211705(0x43f)]())return;this[_0x211705(0x510)]=!![];},Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x6fd)]=function(){const _0x4b01c9=_0x534c3a,_0x309e7d=this[_0x4b01c9(0x582)]();this[_0x4b01c9(0x510)]=![],this['refresh'](),this[_0x4b01c9(0x43f)]()&&_0x309e7d&&(this['performCollapse'](),this[_0x4b01c9(0xe5)]());},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x78a)]=Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x99b)],Game_BattlerBase['prototype']['canAttack']=function(){const _0x4a5cbb=_0x534c3a;if(!this[_0x4a5cbb(0x962)]())return![];return VisuMZ[_0x4a5cbb(0x99e)][_0x4a5cbb(0x78a)][_0x4a5cbb(0x63a)](this);},Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x962)]=function(){const _0x313756=_0x534c3a;for(const _0x1bcf0d of this['traitObjects']()){if(!_0x1bcf0d)continue;if(_0x1bcf0d[_0x313756(0x650)]['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ['BattleCore'][_0x534c3a(0x342)]=Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x364)],Game_BattlerBase[_0x534c3a(0x53c)]['canGuard']=function(){const _0x2c52f7=_0x534c3a;if(!this[_0x2c52f7(0x846)]())return![];return VisuMZ[_0x2c52f7(0x99e)][_0x2c52f7(0x342)]['call'](this);},Game_BattlerBase[_0x534c3a(0x53c)]['canGuardBattleCore']=function(){const _0x39ff49=_0x534c3a;for(const _0x104719 of this[_0x39ff49(0x633)]()){if(_0x39ff49(0x886)===_0x39ff49(0x252)){function _0x4e77f3(){const _0x11fe29=_0x39ff49;if(!this[_0x11fe29(0x33c)]())return;const _0x5a56e2=this[_0x11fe29(0x31e)](),_0x3eed7f=_0x134b24[_0x11fe29(0x99e)][_0x11fe29(0x795)][_0x11fe29(0x5d9)][_0x11fe29(0x161)],_0x4f0f=_0x5a56e2===_0x11fe29(0x357)?_0x583755[_0x11fe29(0x8a6)]:_0x11fe29(0x35b)['format'](_0x3eed7f,_0x4911af['options']),_0x1854e6=this['isOptionsCommandEnabled']();this[_0x11fe29(0x5c6)](_0x4f0f,'options',_0x1854e6);}}else{if(!_0x104719)continue;if(_0x104719[_0x39ff49(0x650)]['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}}return!![];},Game_BattlerBase[_0x534c3a(0x53c)][_0x534c3a(0x11d)]=function(){const _0x442c6a=_0x534c3a;for(const _0x28dd1f of this['traitObjects']()){if(!_0x28dd1f)continue;if(_0x28dd1f[_0x442c6a(0x650)]['match'](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x1a1)]=Game_Battler[_0x534c3a(0x53c)]['regenerateAll'],Game_Battler[_0x534c3a(0x53c)]['regenerateAll']=function(){const _0x154799=_0x534c3a;if(SceneManager['isSceneBattle']()&&$gameTroop[_0x154799(0x43c)]()<=0x0)return;this[_0x154799(0x239)](_0x154799(0x217)),VisuMZ[_0x154799(0x99e)][_0x154799(0x1a1)]['call'](this),this['regenerateAllBattleCore'](),this[_0x154799(0x239)](_0x154799(0xaa6));},Game_Battler[_0x534c3a(0x53c)]['regenerateAllBattleCore']=function(){const _0x5a3cf9=_0x534c3a;if(SceneManager['isSceneBattle']())for(const _0x586d1a of this['traitObjects']()){if(_0x5a3cf9(0x918)===_0x5a3cf9(0x918)){if(!_0x586d1a)continue;this[_0x5a3cf9(0x301)](_0x586d1a);}else{function _0x1d31ec(){return 0x1;}}}},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x301)]=function(_0x2d38d8){const _0x1bf40e=_0x534c3a;if(!Imported[_0x1bf40e(0x9fc)])return;if(!SceneManager[_0x1bf40e(0xa8a)]())return;if(this[_0x1bf40e(0x43f)]())return;if(this[_0x1bf40e(0x745)]())return;if(_0x2d38d8[_0x1bf40e(0x650)][_0x1bf40e(0x5ed)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if(_0x1bf40e(0x5df)!==_0x1bf40e(0x5df)){function _0x233a22(){const _0x3864d6=_0x1bf40e;_0x1d7892[_0x3864d6(0xa42)](_0x167544,_0x2b1b0a,_0x2def87,_0x86b966,_0x145909,-0x1),this['callNextMethod']();}}else{const _0x6c798a=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([this],_0x6c798a,![],![]);}}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x87b)]=Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0xa59)],Game_Battler[_0x534c3a(0x53c)]['startTpbTurn']=function(){const _0x2e3d2e=_0x534c3a;this[_0x2e3d2e(0x239)](_0x2e3d2e(0x601)),VisuMZ[_0x2e3d2e(0x99e)][_0x2e3d2e(0x87b)]['call'](this),this[_0x2e3d2e(0x239)](_0x2e3d2e(0x30e));},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x876)]=Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x190)],Game_Battler['prototype']['onTurnEnd']=function(){const _0x5f55d9=_0x534c3a;this[_0x5f55d9(0x239)](_0x5f55d9(0x9f3)),VisuMZ[_0x5f55d9(0x99e)][_0x5f55d9(0x876)][_0x5f55d9(0x63a)](this),this['processBattleCoreJS']('PostEndTurnJS');},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x239)]=function(_0x426ccb){const _0x5925f2=_0x534c3a;if(this['_tempBattler']||this[_0x5925f2(0x52d)])return;const _0x4b45c1=VisuMZ['BattleCore'][_0x5925f2(0x795)]['Mechanics'];if(_0x4b45c1[_0x426ccb])_0x4b45c1[_0x426ccb][_0x5925f2(0x63a)](this);for(const _0x3a0dfc of this[_0x5925f2(0x633)]()){if(_0x5925f2(0x903)===_0x5925f2(0x65a)){function _0x385145(){const _0xd34d28=_0x5925f2;this[_0xd34d28(0x226)]();}}else{if(!_0x3a0dfc)continue;key=VisuMZ[_0x5925f2(0x99e)]['createKeyJS'](_0x3a0dfc,_0x426ccb);if(VisuMZ['BattleCore']['JS'][key]){if(_0x5925f2(0x1b7)===_0x5925f2(0x1b7))VisuMZ[_0x5925f2(0x99e)]['JS'][key][_0x5925f2(0x63a)](this,this,this,_0x3a0dfc,0x0);else{function _0x2f8317(){const _0x592d54=_0x5925f2;if(!_0x33369c[_0x592d54(0xa8a)]())return;if(!_0x56ceff[_0x592d54(0x3b6)])return;const _0x2bc7f3=_0x1319a5[_0x592d54(0xa1d)]();if(!_0x2bc7f3)return;_0x2bc7f3[_0x592d54(0x387)](_0x592d54(0x1f9));}}}}}},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x7ea)]=function(){const _0x3d48e6=_0x534c3a;return VisuMZ['BattleCore'][_0x3d48e6(0x795)][_0x3d48e6(0x2a0)][_0x3d48e6(0x45b)]||![];},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x1a0)]=function(){const _0x5566e6=_0x534c3a;if(this[_0x5566e6(0x524)]()){if(this['chantStyle']()){if('WLRRF'==='HbNch'){function _0xa1a9c3(){const _0x349649=_0x5566e6;_0x466ac0(_0x349649(0x724)[_0x349649(0x8e9)](_0x5b25db,_0x23f45e)),_0x2df873['exit']();}}else{if(this[_0x5566e6(0xaa0)][_0x5566e6(0x316)](_0x1ead6b=>_0x1ead6b[_0x5566e6(0x464)]()&&_0x1ead6b[_0x5566e6(0x9cd)]()))return!![];}}else{if(this[_0x5566e6(0xaa0)][_0x5566e6(0x316)](_0x1a4823=>_0x1a4823[_0x5566e6(0x464)]()&&_0x1a4823[_0x5566e6(0xe0)]()))return!![];}}if(BattleManager['isTpb']()&&this[_0x5566e6(0x705)]==='casting')return this[_0x5566e6(0x7ea)]()?this['currentAction']()&&this[_0x5566e6(0x2e9)]()[_0x5566e6(0x464)]()&&this[_0x5566e6(0x2e9)]()[_0x5566e6(0x9cd)]():this[_0x5566e6(0x2e9)]()&&this[_0x5566e6(0x2e9)]()[_0x5566e6(0x464)]()&&this[_0x5566e6(0x2e9)]()[_0x5566e6(0xe0)]();return![];},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x947)]=function(){const _0x345c01=_0x534c3a;if(BattleManager[_0x345c01(0x1af)]()&&this[_0x345c01(0x705)]===_0x345c01(0x21e)){if(this[_0x345c01(0x7ea)]()){if(_0x345c01(0x763)!==_0x345c01(0x874))return this[_0x345c01(0x2e9)]()&&this[_0x345c01(0x2e9)]()[_0x345c01(0x464)]()&&!this[_0x345c01(0x2e9)]()[_0x345c01(0x9cd)]();else{function _0x592e3c(){const _0xeb8500=_0x345c01;return _0x2e936c['BattleCore']['Settings'][_0xeb8500(0x67e)]['CmdTextAlign'];}}}else{if('vvoAG'===_0x345c01(0x6a0)){function _0x138f84(){const _0x4e9360=_0x345c01;this[_0x4e9360(0x58e)]=!![],this[_0x4e9360(0x253)]=![],this[_0x4e9360(0x239)](_0x4e9360(0x6e4)),_0x334116[_0x4e9360(0x99e)][_0x4e9360(0x3e2)]['call'](this,_0x5db25c),this[_0x4e9360(0x239)](_0x4e9360(0xa2c));}}else return this[_0x345c01(0x2e9)]()&&this['currentAction']()[_0x345c01(0x464)]()&&!this[_0x345c01(0x2e9)]()[_0x345c01(0xe0)]();}}return![];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x615)]=Game_Battler[_0x534c3a(0x53c)]['clearDamagePopup'],Game_Battler['prototype']['clearDamagePopup']=function(){const _0x233bee=_0x534c3a;VisuMZ['BattleCore'][_0x233bee(0x615)]['call'](this),this[_0x233bee(0x1e1)]=[];},Game_Battler['prototype'][_0x534c3a(0x98a)]=function(){const _0xd5c636=_0x534c3a;if(!this[_0xd5c636(0x1e1)])this[_0xd5c636(0x391)]();return this[_0xd5c636(0x1e1)][_0xd5c636(0x4a2)]>0x0;},Game_Battler[_0x534c3a(0x53c)]['startDamagePopup']=function(){const _0x48e942=_0x534c3a;if(!SceneManager[_0x48e942(0xa8a)]())return;if(!this[_0x48e942(0x1e1)])this['clearDamagePopup']();this[_0x48e942(0x6a5)]();const _0x45fb55=this['battler']();if(_0x45fb55)_0x45fb55[_0x48e942(0xa7d)]();},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x6a5)]=function(){const _0x30f4ce=_0x534c3a,_0x59e2df=this[_0x30f4ce(0x8db)]();if(_0x59e2df[_0x30f4ce(0x8ef)]||_0x59e2df['evaded']){const _0x23827c=JsonEx[_0x30f4ce(0x537)](_0x59e2df);_0x23827c[_0x30f4ce(0x7cb)]=![],_0x23827c[_0x30f4ce(0x894)]=0x0,this[_0x30f4ce(0x1e1)][_0x30f4ce(0x3ba)](_0x23827c);}if(_0x59e2df[_0x30f4ce(0x7cb)]){if('tYHQc'!==_0x30f4ce(0x462)){function _0x3a8906(){_0x5109f4+=_0x12ff62(_0x5c5366['$1'])/0x64;}}else{const _0x3ff3f0=JsonEx[_0x30f4ce(0x537)](_0x59e2df);_0x3ff3f0[_0x30f4ce(0x8ef)]=![],_0x3ff3f0[_0x30f4ce(0x647)]=![],_0x3ff3f0[_0x30f4ce(0x894)]=0x0,this[_0x30f4ce(0x1e1)][_0x30f4ce(0x3ba)](_0x3ff3f0);}}if(_0x59e2df[_0x30f4ce(0x894)]!==0x0){const _0x4b24c1=JsonEx[_0x30f4ce(0x537)](_0x59e2df);_0x4b24c1[_0x30f4ce(0x8ef)]=![],_0x4b24c1['evaded']=![],_0x4b24c1[_0x30f4ce(0x7cb)]=![],this['_damagePopupArray']['push'](_0x4b24c1);}},Game_Battler['prototype'][_0x534c3a(0x1ed)]=function(){const _0x37afac=_0x534c3a;if(!this[_0x37afac(0x1e1)])this[_0x37afac(0x391)]();if(VisuMZ[_0x37afac(0x99e)][_0x37afac(0x795)][_0x37afac(0x6c4)][_0x37afac(0x814)]){if(_0x37afac(0xa2f)===_0x37afac(0x8f3)){function _0xb3e256(){const _0x1f6ceb=_0x37afac;this[_0x1f6ceb(0x387)](_0x1f6ceb(0x460));}}else return this[_0x37afac(0x1e1)][_0x37afac(0x8bc)]();}else return this[_0x37afac(0x1e1)][_0x37afac(0xa76)]();},Game_Battler['prototype'][_0x534c3a(0x207)]=function(_0x3a70b2,_0x7d1b0d){const _0x513a1a=_0x534c3a;if(!SceneManager[_0x513a1a(0xa8a)]())return;if(!this['battler']())return;if(_0x3a70b2[_0x513a1a(0x4a2)]<=0x0)return;_0x7d1b0d=_0x7d1b0d||{},_0x7d1b0d[_0x513a1a(0x678)]=_0x7d1b0d[_0x513a1a(0x678)]||_0x513a1a(0x858),_0x7d1b0d[_0x513a1a(0x1de)]=_0x7d1b0d[_0x513a1a(0x1de)]||[0x0,0x0,0x0,0x0],_0x7d1b0d['flashDuration']=_0x7d1b0d[_0x513a1a(0x563)]||0x0,this[_0x513a1a(0x7c4)]()[_0x513a1a(0x207)](_0x3a70b2,_0x7d1b0d);},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x2a3)]=function(_0x49a05a,_0x48947e,_0x44adf9){const _0x5783dc=_0x534c3a;if(!SceneManager[_0x5783dc(0xa8a)]())return;if(!this[_0x5783dc(0x7c4)]())return;if(_0x48947e[_0x5783dc(0x4a2)]<=0x0)return;_0x44adf9=_0x44adf9||{},_0x44adf9[_0x5783dc(0x678)]=_0x44adf9[_0x5783dc(0x678)]||_0x5783dc(0x858),_0x44adf9[_0x5783dc(0x1de)]=_0x44adf9[_0x5783dc(0x1de)]||[0x0,0x0,0x0,0x0],_0x44adf9['flashDuration']=_0x44adf9[_0x5783dc(0x563)]||0x0,this[_0x5783dc(0x7c4)]()['setupIconTextPopup'](_0x49a05a,_0x48947e,_0x44adf9);},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x13a)]=function(){const _0x309d7f=_0x534c3a;if(this[_0x309d7f(0x745)]())return![];if(this[_0x309d7f(0x582)]()&&this[_0x309d7f(0x760)]())return!![];if(this[_0x309d7f(0x405)]()&&this['hasSvBattler']()){if(_0x309d7f(0x124)!==_0x309d7f(0x124)){function _0x378bd3(){const _0x2c75b8=_0x309d7f;return this[_0x2c75b8(0x211)]==='custom'?this[_0x2c75b8(0x56e)]():_0x21cff5[_0x2c75b8(0x99e)][_0x2c75b8(0x972)][_0x2c75b8(0x63a)](this);}}else{if(this['isDead']()&&this['allowCollapse']())return![];}}else{if(this['isDead']()){if(_0x309d7f(0x2bc)!==_0x309d7f(0x2bc)){function _0x475887(){const _0x3ba7d2=_0x309d7f,_0x1b336e=_0x522f76['prototype'][_0x3ba7d2(0x5d8)][_0x3ba7d2(0x63a)](arguments,0x1),_0x313856={'name':_0x174dbc,'params':_0x1b336e},_0x51ab7c=this[_0x3ba7d2(0x7ac)]['map'](_0x324350=>_0x324350['name'])[_0x3ba7d2(0xaa8)](_0x3ba7d2(0x455));_0x51ab7c>=0x0?this[_0x3ba7d2(0x7ac)][_0x3ba7d2(0xa96)](_0x51ab7c,0x0,_0x313856):this[_0x3ba7d2(0x7ac)][_0x3ba7d2(0x3ba)](_0x313856);}}else return![];}}return!![];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x18f)]=Game_Battler[_0x534c3a(0x53c)]['clearMotion'],Game_Battler[_0x534c3a(0x53c)]['clearMotion']=function(){const _0xf1f563=_0x534c3a;VisuMZ[_0xf1f563(0x99e)]['Game_Battler_clearMotion']['call'](this),this[_0xf1f563(0x2dd)]();},Game_Battler[_0x534c3a(0x53c)]['canBattlerMove']=function(){return!![];},Game_Battler['prototype'][_0x534c3a(0x8ca)]=function(){return![];},VisuMZ['BattleCore'][_0x534c3a(0x9e3)]=Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x492)],Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x492)]=function(_0x1649ae){const _0x23827a=_0x534c3a;VisuMZ[_0x23827a(0x99e)][_0x23827a(0x9e3)][_0x23827a(0x63a)](this,_0x1649ae),this[_0x23827a(0x23d)](_0x1649ae);},Game_Battler['prototype'][_0x534c3a(0x23d)]=function(_0x49d77e){const _0xcd8d30=_0x534c3a;this[_0xcd8d30(0x5b3)](![]);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x64f)]=Game_Battler['prototype'][_0x534c3a(0x110)],Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x110)]=function(_0x413124){const _0x21746c=_0x534c3a;VisuMZ['BattleCore'][_0x21746c(0x64f)]['call'](this,_0x413124);if(!_0x413124[_0x21746c(0x5f2)]()){if('HrQYx'===_0x21746c(0x375)){const _0x1722f7=this[_0x21746c(0x7c4)]();if(_0x1722f7){if(_0x21746c(0x41d)==='dYEeO'){function _0x1f63ad(){const _0xf266c=_0x21746c;this[_0xf266c(0xa73)]=this[_0xf266c(0x371)][_0xf266c(0x5d8)](0x0),this[_0xf266c(0x114)]=0x0,this[_0xf266c(0x603)]=this[_0xf266c(0xa73)][0x0]||null,this[_0xf266c(0x211)]=_0xf266c(0x9f2);}}else _0x1722f7['stepForward']();}}else{function _0x18fdf9(){const _0x58be7a=_0x21746c;_0x8a024e[_0x58be7a(0x53c)][_0x58be7a(0xa80)][_0x58be7a(0x63a)](this,_0x3c1d8f);if(this[_0x58be7a(0x5a1)]())this[_0x58be7a(0x3cf)](_0x14d2e5);}}}this[_0x21746c(0x5b3)](![]);},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x33b)]=function(){const _0x54a717=_0x534c3a,_0x348bbc=this[_0x54a717(0xa05)];this[_0x54a717(0xa05)]=![];if(BattleManager[_0x54a717(0x1a9)]()&&this['isInputting']()){const _0x289a53=this['battler']();if(_0x289a53&&_0x348bbc)_0x289a53[_0x54a717(0x604)]();return;}const _0xe1cf5d=this[_0x54a717(0x7c4)]();if(_0xe1cf5d)_0xe1cf5d['stepBack']();this[_0x54a717(0x5b3)](![]),this['requestMotionRefresh']();},Game_Battler['prototype'][_0x534c3a(0x3cf)]=function(_0x4f171b){const _0x46f2e9=_0x534c3a;if(_0x4f171b['isAttack']()){if(_0x46f2e9(0x16a)==='lZIwz'){function _0x3762a9(){const _0x3d4a51=_0x46f2e9;if(!_0x4efb0f[_0x3d4a51(0xa8a)]())return;_0x1de89c[_0x3d4a51(0x96b)](_0x2de433,_0x45409b);const _0x99c2ab=_0x5aca45[_0x3d4a51(0xa5c)],_0x26bd9f=_0x250e17[_0x3d4a51(0x501)]&&_0x7d3b5b[_0x3d4a51(0x176)];_0x99c2ab['addText'](_0xe84ed2[_0x3d4a51(0x859)]),_0x26bd9f&&_0x12b8c1['VisuMZ_4_CombatLog']&&_0x3073c7[_0x3d4a51(0x8cb)](_0x4fe867[_0x3d4a51(0x859)]||'',_0x4de2db['CombatLogIcon']||0x0);}}else this[_0x46f2e9(0x784)]();}else{if(_0x4f171b[_0x46f2e9(0x5f2)]()){if(_0x46f2e9(0x860)==='aHvEg'){function _0x5b2429(){const _0x557590=_0x46f2e9,_0x133ac2=_0x58987d[_0x557590(0x516)]();_0x133ac2[_0x557590(0x9a3)](this[_0x557590(0x223)][_0x557590(0x9bf)]()),this[_0x557590(0x800)]();}}else this[_0x46f2e9(0x961)](_0x46f2e9(0x7d6));}else{if(_0x4f171b[_0x46f2e9(0x9cd)]()){if('drYiU'===_0x46f2e9(0x269))this[_0x46f2e9(0x961)](_0x46f2e9(0x6ae));else{function _0x111a29(){const _0x509ed9=_0x46f2e9;_0x38f498[_0x509ed9(0x99e)][_0x509ed9(0x341)]&&_0x4c2cd0[_0x509ed9(0x99e)][_0x509ed9(0x341)]['call'](this,_0x56924c),_0x486f61[_0x509ed9(0x99e)][_0x509ed9(0x567)](_0x3be18b);}}}else{if(_0x4f171b[_0x46f2e9(0x6a6)]())_0x4f171b[_0x46f2e9(0x464)]()[_0x46f2e9(0x8fc)][_0x46f2e9(0x88f)]>0x0?this['performAttack']():this['requestMotion'](_0x46f2e9(0x979));else _0x4f171b[_0x46f2e9(0x117)]()&&this['requestMotion'](_0x46f2e9(0x464));}}}},Game_Battler['prototype'][_0x534c3a(0x6ba)]=function(){const _0xb6f5d5=_0x534c3a;return $dataSystem[_0xb6f5d5(0x964)][0x0];},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0xdd)]=function(){const _0xeaa4b3=_0x534c3a,_0x23bf78=this[_0xeaa4b3(0x6ba)]();return _0x23bf78?_0x23bf78[_0xeaa4b3(0x5b2)]:0x0;},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x273)]=function(_0x440752){const _0x2647d6=_0x534c3a;if(!$gameSystem['isSideView']())return;const _0x1de993=this['battler'](),_0x4d31e7=_0x440752[_0x2647d6(0x7c4)]();if(!_0x1de993||!_0x4d31e7)return;const _0x3c2c42=_0x4d31e7['_baseX'],_0x33176b=_0x4d31e7[_0x2647d6(0x2df)];this['moveBattlerToPoint'](_0x3c2c42,_0x33176b,0x0,![],_0x2647d6(0x6a4),-0x1),_0x1de993['updatePosition']();const _0x36cf6d=VisuMZ[_0x2647d6(0x99e)][_0x2647d6(0x795)][_0x2647d6(0x189)];let _0x296dd8=(_0x4d31e7[_0x2647d6(0x456)]+_0x1de993[_0x2647d6(0x456)])/0x2;_0x296dd8*=this[_0x2647d6(0x1e7)]()?0x1:-0x1;let _0x41796b=_0x36cf6d['StepDistanceY']*(this[_0x2647d6(0x1e7)]()?0x1:-0x1);_0x440752['moveBattlerDistance'](_0x296dd8,_0x41796b,0x0,![],_0x2647d6(0x6a4)),_0x4d31e7[_0x2647d6(0x36e)]();},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x961)]=function(_0x556670){const _0x4a5255=_0x534c3a;if(SceneManager[_0x4a5255(0xa8a)]()){if(_0x4a5255(0x63b)!==_0x4a5255(0x63b)){function _0x29f141(){const _0x17c627=_0x4a5255;this[_0x17c627(0x1bc)](_0x17c627(0x4b7));}}else{const _0x616ba3=this['battler']();if(_0x616ba3){if(_0x4a5255(0x9e5)==='wpeOJ')_0x616ba3[_0x4a5255(0x49e)](_0x556670),[_0x4a5255(0x3ce),_0x4a5255(0xa50),_0x4a5255(0x948)]['includes'](_0x556670)&&this[_0x4a5255(0x87a)]();else{function _0x2dbb6b(){const _0x5be8c8=_0x4a5255;_0x4f2d56[_0x5be8c8(0x99e)]['ParseEnemyNotetags']&&_0xac2362[_0x5be8c8(0x99e)][_0x5be8c8(0x497)][_0x5be8c8(0x63a)](this,_0x55e15f),_0xb12ced[_0x5be8c8(0x99e)][_0x5be8c8(0x567)](_0x383b75);}}}}}this['clearFreezeMotion']();},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x87a)]=function(){},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x500)]=function(_0x402a16){const _0x15a745=_0x534c3a;if(SceneManager[_0x15a745(0xa8a)]()){const _0x5e2af1=this['battler']();if(_0x5e2af1)_0x5e2af1[_0x15a745(0x198)](_0x402a16);}},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x88d)]=function(){const _0x1752c8=_0x534c3a;if(SceneManager[_0x1752c8(0xa8a)]()){const _0x22c505=this[_0x1752c8(0xdd)]();this[_0x1752c8(0x500)](_0x22c505);}},Game_Battler['prototype'][_0x534c3a(0x634)]=function(_0x703408,_0x4a2adc){const _0x2d3a08=_0x534c3a;if(!_0x703408)return;if(!_0x703408['item']())return;if(_0x703408['isAttack']())return;if(_0x703408[_0x2d3a08(0x5f2)]())return;if(_0x703408[_0x2d3a08(0x117)]())return;let _0x36cf94=0x0;const _0x518659=VisuMZ['BattleCore'][_0x2d3a08(0x795)][_0x2d3a08(0x189)],_0x28ada1=_0x703408[_0x2d3a08(0x464)]()[_0x2d3a08(0x650)];if(_0x28ada1[_0x2d3a08(0x5ed)](/<CAST ANIMATION: (\d+)>/i))_0x36cf94=Number(RegExp['$1']);else{if(_0x28ada1[_0x2d3a08(0x5ed)](/<NO CAST ANIMATION>/i)){if(_0x2d3a08(0x6d8)==='sfklB'){function _0x81700b(){const _0x3c1588=_0x2d3a08;if(!_0x268c4c[_0x3c1588(0xa8a)]())return;if(!_0x1fe1f5[_0x3c1588(0x3b6)])return;const _0x24092e=_0xbd9275[_0x3c1588(0xa1d)]();if(!_0x24092e)return;_0x24092e['setWaitMode'](_0x3c1588(0x74c));}}else return;}else{if(_0x703408[_0x2d3a08(0x6a7)]())_0x36cf94=_0x518659['CastCertain'];else{if(_0x703408[_0x2d3a08(0x28c)]()){if(_0x2d3a08(0x73e)==='xGCcM'){function _0x3da1e8(){return!![];}}else _0x36cf94=_0x518659[_0x2d3a08(0x8e6)];}else _0x703408['isMagical']()&&(_0x36cf94=_0x518659[_0x2d3a08(0x378)]);}}}_0x36cf94>0x0&&$gameTemp[_0x2d3a08(0x8f0)]([this],_0x36cf94,!!_0x4a2adc);},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x88c)]=function(){const _0xd98a5c=_0x534c3a;SoundManager[_0xd98a5c(0x63f)]();let _0x5ad7a5=VisuMZ[_0xd98a5c(0x99e)][_0xd98a5c(0x795)]['ActionSequence']['ReflectAnimation'];_0x5ad7a5>0x0&&$gameTemp[_0xd98a5c(0x8f0)]([this],_0x5ad7a5);},VisuMZ['BattleCore']['Game_Battler_performDamage']=Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x622)],Game_Battler[_0x534c3a(0x53c)]['performDamage']=function(){const _0x1c9cb6=_0x534c3a;VisuMZ['BattleCore'][_0x1c9cb6(0x6ca)][_0x1c9cb6(0x63a)](this),this[_0x1c9cb6(0xcf)]();},VisuMZ[_0x534c3a(0x99e)]['Game_Battler_performMiss']=Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x311)],Game_Battler[_0x534c3a(0x53c)]['performMiss']=function(){const _0x438c35=_0x534c3a;VisuMZ[_0x438c35(0x99e)][_0x438c35(0x5d2)][_0x438c35(0x63a)](this),this['performFlinch']();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x6bd)]=Game_Battler[_0x534c3a(0x53c)]['performEvasion'],Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x85c)]=function(){const _0x150694=_0x534c3a;VisuMZ[_0x150694(0x99e)]['Game_Battler_performEvasion']['call'](this),this[_0x150694(0xcf)]();},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0xcf)]=function(){const _0x65acac=_0x534c3a;if(!$gameSystem['isSideView']())return;if(this[_0x65acac(0xa05)])return;this['_flinched']=!![];const _0x5432ce=this[_0x65acac(0x7c4)]();if(_0x5432ce)_0x5432ce['stepFlinch']();},Game_Battler['prototype'][_0x534c3a(0xe5)]=function(){const _0x471c32=_0x534c3a;if(this[_0x471c32(0x43f)]()&&this[_0x471c32(0x386)]!==_0x471c32(0x88e)){if(_0x471c32(0x8c9)===_0x471c32(0x8c9)){this['requestMotion'](_0x471c32(0x88e));return;}else{function _0x4fff26(){const _0x433c43=_0x471c32;this[_0x433c43(0x476)][_0x433c43(0x52c)]=0x0;return;}}}if(this[_0x471c32(0x43f)]()&&this[_0x471c32(0x386)]==='dead')return;if(!!this[_0x471c32(0x4d1)])return;if(this[_0x471c32(0x405)]()){if(!this[_0x471c32(0x2fb)]()&&this!==BattleManager[_0x471c32(0x90c)]){if(this[_0x471c32(0x7c4)]())this[_0x471c32(0x7c4)]()[_0x471c32(0x26e)]();}this[_0x471c32(0x2dd)]();return;}if(this['_motionType']===_0x471c32(0x2af))return;if(this['_motionType']===_0x471c32(0x61f)&&!BattleManager[_0x471c32(0x3e3)]())return;if(this[_0x471c32(0x386)]==='guard'&&!BattleManager[_0x471c32(0x3e3)]())return;this[_0x471c32(0x419)]();if(this[_0x471c32(0x7c4)]()&&BattleManager['isInputting']()){this[_0x471c32(0x7c4)]()['refreshMotion'](),this[_0x471c32(0x2dd)]();return;}},Game_Enemy[_0x534c3a(0x53c)]['isDuringNonLoopingMotion']=function(){const _0x5a7e77=_0x534c3a;if(!this[_0x5a7e77(0x5a1)]())return![];const _0x34b988=this[_0x5a7e77(0x7c4)]();if(!_0x34b988)return![];const _0x46983b=_0x34b988[_0x5a7e77(0x7dd)];if(!_0x46983b)return![];const _0x3f7f5c=_0x46983b['_motion'];return _0x3f7f5c&&!_0x3f7f5c['loop'];},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x214)]=function(){const _0x459c05=_0x534c3a;return this[_0x459c05(0x255)];},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x5b3)]=function(_0x56d567){const _0x524f90=_0x534c3a;if(!$gameSystem['isSideView']())return;this[_0x524f90(0x255)]=_0x56d567;const _0x529831=this[_0x524f90(0x7c4)]();if(_0x529831)_0x529831['updateFlip']();},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x379)]=function(_0x5d47f9,_0x39648e,_0x166b3d){const _0x4da2f5=_0x534c3a;if(!$gameSystem[_0x4da2f5(0x4d6)]())return;const _0x35c58b=this['battler']();if(!_0x35c58b)return;if(_0x5d47f9===_0x35c58b['_baseX'])return;let _0x2786f0=![];if(this[_0x4da2f5(0x1e7)]()){if(_0x4da2f5(0x81a)===_0x4da2f5(0x81a)){if(_0x5d47f9>_0x35c58b[_0x4da2f5(0x674)])_0x2786f0=!![];if(_0x5d47f9<_0x35c58b[_0x4da2f5(0x674)])_0x2786f0=![];}else{function _0x1f3617(){const _0x167d51=_0x4da2f5;this[_0x167d51(0x508)]=0x0;}}}else{if(this[_0x4da2f5(0x405)]()){if('eZGYy'===_0x4da2f5(0x834)){if(_0x5d47f9>_0x35c58b[_0x4da2f5(0x674)])_0x2786f0=![];if(_0x5d47f9<_0x35c58b[_0x4da2f5(0x674)])_0x2786f0=!![];}else{function _0x55cb98(){const _0x22699e=_0x4da2f5,_0x1c5037=_0x3a229e[_0x22699e(0x8db)](),_0x150ee3=_0x1c5037[_0x22699e(0x17a)]();for(const _0x2c5c69 of _0x150ee3){const _0x3af998=_0x5c4266[_0x22699e(0x1e7)]()?_0x2c5c69[_0x22699e(0x8b9)]:_0x2c5c69[_0x22699e(0xaab)];_0x3af998&&_0x1b3a64[_0x22699e(0x99e)][_0x22699e(0x795)]['BattleLog']['ShowAddedState']&&(this[_0x22699e(0x3ba)](_0x22699e(0xa17)),this[_0x22699e(0x3ba)](_0x22699e(0x83a)),this[_0x22699e(0x3ba)](_0x22699e(0x87c),_0x3af998[_0x22699e(0x8e9)](_0x18bf3c[_0x22699e(0x180)]())),this[_0x22699e(0x3ba)]('wait')),_0x2c5c69['id']===_0x69ec47['deathStateId']()&&this[_0x22699e(0x3ba)]('performCollapse',_0x4adf50);}}}}};this[_0x4da2f5(0x5b3)](_0x166b3d?!_0x2786f0:_0x2786f0),_0x35c58b['updateFlip']();},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x6e3)]=function(_0x470cdf,_0x5718b0,_0x427b1a,_0x2d6fd7,_0x51c3a5){const _0x2ae37d=_0x534c3a;if(!$gameSystem[_0x2ae37d(0x4d6)]())return;const _0xe900fe=this['battler']();if(!_0xe900fe)return;if(_0x2d6fd7)this[_0x2ae37d(0x379)](_0x470cdf+_0xe900fe['_baseX'],_0x5718b0+_0xe900fe[_0x2ae37d(0x2df)],![]);_0x470cdf+=_0xe900fe[_0x2ae37d(0x674)]-_0xe900fe[_0x2ae37d(0x97e)],_0x5718b0+=_0xe900fe[_0x2ae37d(0x2df)]-_0xe900fe[_0x2ae37d(0x5c2)],_0xe900fe['startMove'](_0x470cdf,_0x5718b0,_0x427b1a);if(Imported['VisuMZ_0_CoreEngine'])_0xe900fe[_0x2ae37d(0x939)](_0x51c3a5||_0x2ae37d(0x6a4));},Game_Battler['prototype'][_0x534c3a(0xa42)]=function(_0x31b95c,_0x413547,_0x3f24fe,_0xd599c5,_0x44cb88,_0x5e7554){const _0x2853a1=_0x534c3a;if(!$gameSystem[_0x2853a1(0x4d6)]())return;const _0x4c8a06=this['battler']();if(!_0x4c8a06)return;_0x5e7554=_0x5e7554||0x0;if(_0x5e7554>0x0){if(_0x4c8a06[_0x2853a1(0x674)]>_0x31b95c)_0x31b95c+=_0x4c8a06['width']/0x2+_0x5e7554;if(_0x4c8a06[_0x2853a1(0x674)]<_0x31b95c)_0x31b95c-=_0x4c8a06[_0x2853a1(0x456)]/0x2+_0x5e7554;}if(_0xd599c5)this['setBattlerFacePoint'](_0x31b95c,_0x413547,![]);_0x31b95c-=_0x4c8a06[_0x2853a1(0x97e)],_0x413547-=_0x4c8a06[_0x2853a1(0x5c2)],_0x4c8a06[_0x2853a1(0x594)](_0x31b95c,_0x413547,_0x3f24fe);if(Imported[_0x2853a1(0x9fc)])_0x4c8a06['setMoveEasingType'](_0x44cb88||_0x2853a1(0x6a4));},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x8bd)]=function(_0xa79907,_0x30d1ae,_0x352a0b){const _0x187ab5=_0x534c3a;if(!$gameSystem[_0x187ab5(0x4d6)]())return;const _0x264d3d=this['battler']();if(!_0x264d3d)return;_0x264d3d[_0x187ab5(0x65b)](_0xa79907,_0x30d1ae,_0x352a0b);},Game_Battler['prototype'][_0x534c3a(0x284)]=function(_0x33fb3d,_0x781262){const _0x485bdd=_0x534c3a;if(!$gameSystem[_0x485bdd(0x4d6)]())return;const _0x28798f=this[_0x485bdd(0x7c4)]();if(!_0x28798f)return;_0x28798f[_0x485bdd(0x46c)](_0x33fb3d,_0x781262);},Game_Battler['prototype'][_0x534c3a(0x11e)]=function(_0x2bad8a,_0x3c678d,_0xf475f3,_0x12c418){const _0x38685f=_0x534c3a;if(!$gameSystem['isSideView']())return;const _0x22534b=this[_0x38685f(0x7c4)]();if(!_0x22534b)return;_0x22534b[_0x38685f(0xa84)](_0x2bad8a,_0x3c678d,_0xf475f3,_0x12c418);},Game_Battler['prototype']['skewBattler']=function(_0x16f0e6,_0x529d4c,_0x44828b,_0x5d4874){const _0x1d98f4=_0x534c3a;if(!$gameSystem['isSideView']())return;const _0x486672=this[_0x1d98f4(0x7c4)]();if(!_0x486672)return;this[_0x1d98f4(0x1e7)]()&&(_0x16f0e6*=-0x1,_0x529d4c*=-0x1),_0x486672[_0x1d98f4(0xa83)](_0x16f0e6,_0x529d4c,_0x44828b,_0x5d4874);},Game_Battler[_0x534c3a(0x53c)]['growBattler']=function(_0x23f725,_0x2cfc5b,_0x575641,_0x2c5e15){const _0x46b92f=_0x534c3a;if(!$gameSystem[_0x46b92f(0x4d6)]())return;const _0x27db0b=this[_0x46b92f(0x7c4)]();if(!_0x27db0b)return;_0x27db0b[_0x46b92f(0x5c5)](_0x23f725,_0x2cfc5b,_0x575641,_0x2c5e15);},Game_Battler['prototype'][_0x534c3a(0x915)]=function(_0xcd15aa,_0x3f77b3,_0x3d5b7d){const _0x2cb74f=_0x534c3a;if(!$gameSystem['isSideView']())return;const _0x1a10a5=this[_0x2cb74f(0x7c4)]();if(!_0x1a10a5)return;_0x1a10a5['startOpacity'](_0xcd15aa,_0x3f77b3,_0x3d5b7d);},Game_Battler['prototype']['clearFreezeMotion']=function(){const _0x4f31bb=_0x534c3a,_0x4f9c86=!!this[_0x4f31bb(0x4d1)];this[_0x4f31bb(0x4d1)]=undefined,_0x4f9c86&&(this[_0x4f31bb(0xe5)](),this['clearFreezeMotionForWeapons']());},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x346)]=function(){const _0x5a529c=_0x534c3a;if(!SceneManager[_0x5a529c(0xa8a)]())return;const _0x458559=this[_0x5a529c(0x7c4)]();if(!_0x458559)return;let _0x4c3eaa=this[_0x5a529c(0x1e7)]()?_0x458559[_0x5a529c(0x39e)]:_0x458559[_0x5a529c(0x7dd)][_0x5a529c(0x39e)];if(_0x4c3eaa){if('RSMel'!=='CicFp')_0x4c3eaa[_0x5a529c(0x627)](0x0);else{function _0x7c6da5(){const _0x5ebf20=_0x5a529c;if(!this[_0x5ebf20(0x2f9)]())return;if(!this[_0x5ebf20(0xf8)])return;if(this['_targetGrowX']===_0x52a996&&this[_0x5ebf20(0x92f)]===_0x32ddb2)return;this['_targetGrowX']=_0x5c0d6a,this[_0x5ebf20(0x92f)]=_0x23d326,this['_growDuration']=_0x1cfffe,this[_0x5ebf20(0x4f1)]=_0x5d2992,this[_0x5ebf20(0x95c)]=_0x1d8219||_0x5ebf20(0x6a4),_0x52e47b<=0x0&&(this[_0x5ebf20(0x870)]=this['_targetGrowX'],this['_growY']=this[_0x5ebf20(0x92f)]);}}}},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x137)]=function(_0xaa276b,_0x4f841b,_0x487a44){const _0x80f242=_0x534c3a;if(this['isEnemy']()&&!this[_0x80f242(0x5a1)]())return;let _0x3bf4de=0x0,_0x1039c6=0x0;_0xaa276b['match'](/ATTACK[ ](\d+)/i)&&(_0x1039c6=Number(RegExp['$1']),_0x1039c6--);if(this['isActor']()){if(_0x80f242(0x40d)!=='jhSpl'){function _0x212ba3(){const _0x31536f=_0x80f242;_0x18171b=_0x5d29be[_0x31536f(0x9c3)]((_0x13b7b3,_0xd85784)=>_0x13b7b3*(0x1-_0xd85784),_0x201d2f);}}else{const _0x24ff73=this['weapons']();_0x3bf4de=_0x24ff73[_0x1039c6]?_0x24ff73[_0x1039c6][_0x80f242(0x6d4)]:0x0;}}else{if(this['isEnemy']()){if(_0x80f242(0xa0f)===_0x80f242(0x7d9)){function _0x3d219e(){const _0xfc9799=_0x80f242;_0x3f7955[_0xfc9799(0x4be)]=[];}}else _0x3bf4de=this['svBattlerData']()[_0x80f242(0x6d4)]||0x0;}}const _0x2b40ae=$dataSystem[_0x80f242(0x964)][_0x3bf4de];_0xaa276b[_0x80f242(0x5ed)](/attack/i)&&(_0xaa276b=[_0x80f242(0xa50),_0x80f242(0x3ce),_0x80f242(0x948)][_0x2b40ae['type']]||'swing'),this[_0x80f242(0x4d1)]={'motionType':_0xaa276b,'weaponImageId':_0x4f841b?_0x2b40ae[_0x80f242(0x5b2)]:0x0,'pattern':_0x487a44};},Game_Battler[_0x534c3a(0x53c)]['isFriendly']=function(_0x1dcf67){const _0x47f6ad=_0x534c3a;if(!_0x1dcf67)return![];return _0x1dcf67[_0x47f6ad(0xa6e)]()===this[_0x47f6ad(0xa6e)]();},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x195)]=function(_0x42014a){const _0x4a8962=_0x534c3a;if(!_0x42014a)return![];return _0x42014a['opponentsUnit']()===this[_0x4a8962(0xa6e)]();},VisuMZ['BattleCore']['Game_Actor_setup']=Game_Actor['prototype']['setup'],Game_Actor[_0x534c3a(0x53c)][_0x534c3a(0x627)]=function(_0x48acdf){const _0x222048=_0x534c3a;VisuMZ[_0x222048(0x99e)][_0x222048(0x992)][_0x222048(0x63a)](this,_0x48acdf),this[_0x222048(0x7b4)]();},Game_Actor['prototype'][_0x534c3a(0x7b4)]=function(){const _0x4bc88c=_0x534c3a;this['_battlePortrait']='',this[_0x4bc88c(0x4c5)]()&&this['actor']()[_0x4bc88c(0x650)][_0x4bc88c(0x5ed)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x4bc88c(0x8a3)]=String(RegExp['$1']));},Game_Actor[_0x534c3a(0x53c)]['getBattlePortraitFilename']=function(){const _0x3391f0=_0x534c3a;if(this['getBattlePortrait']()!==''){if(_0x3391f0(0x908)===_0x3391f0(0x66c)){function _0x3ac48c(){const _0x3b4426=_0x3391f0;return this[_0x3b4426(0x928)]();}}else return this['getBattlePortrait']();}else{if(Imported[_0x3391f0(0x881)]&&this[_0x3391f0(0x81d)]()!=='')return this[_0x3391f0(0x81d)]();}return'';},Game_Actor[_0x534c3a(0x53c)][_0x534c3a(0x457)]=function(){if(this['_battlePortrait']===undefined)this['initBattlePortrait']();return this['_battlePortrait'];},Game_Actor[_0x534c3a(0x53c)]['setBattlePortrait']=function(_0x36414d){const _0x8862db=_0x534c3a;if(this[_0x8862db(0x8a3)]===undefined)this[_0x8862db(0x7b4)]();this[_0x8862db(0x8a3)]=_0x36414d;if(SceneManager[_0x8862db(0xa8a)]()&&$gameParty[_0x8862db(0x668)]()[_0x8862db(0x96f)](this)){const _0x51076f=SceneManager[_0x8862db(0x76b)][_0x8862db(0x186)];if(_0x51076f)_0x51076f[_0x8862db(0x99f)](this);}},Game_Actor[_0x534c3a(0x53c)][_0x534c3a(0x1b9)]=function(){return!![];},Game_Actor[_0x534c3a(0x53c)][_0x534c3a(0x540)]=function(){const _0x64572f=_0x534c3a;if(!this[_0x64572f(0xa4d)]()&&BattleManager['_autoBattle'])return!![];return Game_Battler['prototype'][_0x64572f(0x540)][_0x64572f(0x63a)](this);},VisuMZ['BattleCore'][_0x534c3a(0x5de)]=Game_Actor[_0x534c3a(0x53c)]['makeActionList'],Game_Actor[_0x534c3a(0x53c)]['makeActionList']=function(){const _0x2b3416=_0x534c3a;if(BattleManager[_0x2b3416(0x253)]&&!ConfigManager[_0x2b3416(0xa5d)]){if(_0x2b3416(0x2e0)===_0x2b3416(0x12d)){function _0x5df0fa(){const _0x358295=_0x2b3416;this[_0x358295(0x799)](_0x410a7b);}}else return this[_0x2b3416(0x3bd)]();}else{return VisuMZ[_0x2b3416(0x99e)][_0x2b3416(0x5de)][_0x2b3416(0x63a)](this);;}},Game_Actor[_0x534c3a(0x53c)][_0x534c3a(0x3bd)]=function(){const _0x3263e1=_0x534c3a,_0x5d1274=[],_0x45345c=new Game_Action(this);return _0x45345c['setAttack'](),_0x5d1274[_0x3263e1(0x3ba)](_0x45345c),_0x5d1274;},Game_Actor['prototype']['battleCommands']=function(){const _0x25f6c8=_0x534c3a;if(this[_0x25f6c8(0x8f4)]()[_0x25f6c8(0x650)][_0x25f6c8(0x5ed)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)){if(_0x25f6c8(0x82b)!==_0x25f6c8(0x82b)){function _0x3d7c21(){const _0x6eab0a=_0x25f6c8;_0xeaba91['BattleCore'][_0x6eab0a(0x32a)][_0x6eab0a(0x63a)](this),this[_0x6eab0a(0xa6f)][_0x6eab0a(0x743)](),this[_0x6eab0a(0xa51)]();}}else return String(RegExp['$1'])[_0x25f6c8(0x4bc)](/[\r\n]+/);}else{if(_0x25f6c8(0x671)!==_0x25f6c8(0x671)){function _0x32bcae(){const _0x522ea9=_0x25f6c8;return this['parent']['_offsetX']===0x0&&this[_0x522ea9(0x70b)][_0x522ea9(0x4fa)]===0x0;}}else return VisuMZ[_0x25f6c8(0x99e)][_0x25f6c8(0x795)][_0x25f6c8(0x67e)]['BattleCmdList'];}},Game_Actor[_0x534c3a(0x53c)][_0x534c3a(0x924)]=function(){const _0x794a01=_0x534c3a;if(this[_0x794a01(0x648)]['svAnchorX']!==undefined)return this[_0x794a01(0x648)][_0x794a01(0x56d)];if(this[_0x794a01(0x4c5)]()[_0x794a01(0x650)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))this[_0x794a01(0x648)][_0x794a01(0x56d)]=eval(RegExp['$1']),this[_0x794a01(0x648)][_0x794a01(0x4da)]=eval(RegExp['$2']);else{if(_0x794a01(0x91b)!==_0x794a01(0x8a2))this['_cache'][_0x794a01(0x56d)]=Game_Battler[_0x794a01(0x53c)]['svBattlerAnchorX'][_0x794a01(0x63a)](this);else{function _0x63f648(){const _0x3475e1=_0x794a01;_0x1291e8['setValue'](_0x5eb081[_0x3475e1(0x1a7)],![]);}}}return this[_0x794a01(0x648)][_0x794a01(0x56d)];},Game_Actor[_0x534c3a(0x53c)][_0x534c3a(0x747)]=function(){const _0x46434b=_0x534c3a;if(this['_cache'][_0x46434b(0x4da)]!==undefined)return this[_0x46434b(0x648)][_0x46434b(0x4da)];return this[_0x46434b(0x4c5)]()[_0x46434b(0x650)][_0x46434b(0x5ed)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x46434b(0x56d)]=eval(RegExp['$1']),this[_0x46434b(0x648)][_0x46434b(0x4da)]=eval(RegExp['$2'])):this['_cache'][_0x46434b(0x4da)]=Game_Battler[_0x46434b(0x53c)]['svBattlerAnchorY'][_0x46434b(0x63a)](this),this['_cache'][_0x46434b(0x4da)];},Game_Actor[_0x534c3a(0x53c)][_0x534c3a(0x547)]=function(){const _0x5035df=_0x534c3a;if(this[_0x5035df(0x648)][_0x5035df(0x8c4)]!==undefined)return this[_0x5035df(0x648)][_0x5035df(0x8c4)];if(this[_0x5035df(0x4c5)]()[_0x5035df(0x650)][_0x5035df(0x5ed)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x5035df(0x648)][_0x5035df(0x8c4)]=!![];else this['actor']()[_0x5035df(0x650)][_0x5035df(0x5ed)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x5035df(0x648)][_0x5035df(0x8c4)]=![]:this['_cache'][_0x5035df(0x8c4)]=Game_Battler[_0x5035df(0x53c)]['svBattlerShadowVisible'][_0x5035df(0x63a)](this);return this[_0x5035df(0x648)][_0x5035df(0x8c4)];},Game_Actor[_0x534c3a(0x53c)]['battlerSmoothImage']=function(){const _0x5f42f3=_0x534c3a;return VisuMZ['BattleCore'][_0x5f42f3(0x795)][_0x5f42f3(0x2a0)][_0x5f42f3(0x365)];},Game_Actor[_0x534c3a(0x53c)][_0x534c3a(0x87a)]=function(){const _0x292131=_0x534c3a,_0x6a5e85=this['weapons'](),_0x2c84a0=_0x6a5e85[0x0]?_0x6a5e85[0x0][_0x292131(0x6d4)]:0x0,_0x131712=$dataSystem[_0x292131(0x964)][_0x2c84a0];_0x131712&&this[_0x292131(0x500)](_0x131712['weaponImageId']);},Game_Actor['prototype'][_0x534c3a(0xa80)]=function(_0x292fe1){const _0x23bc8b=_0x534c3a;Game_Battler[_0x23bc8b(0x53c)][_0x23bc8b(0xa80)][_0x23bc8b(0x63a)](this,_0x292fe1),this[_0x23bc8b(0x3cf)](_0x292fe1);},Game_Actor[_0x534c3a(0x53c)]['getAttackMotion']=function(){const _0x134798=_0x534c3a,_0x5b9b51=this[_0x134798(0x5eb)](),_0x362f6e=_0x5b9b51[0x0]?_0x5b9b51[0x0][_0x134798(0x6d4)]:0x0;return $dataSystem[_0x134798(0x964)][_0x362f6e];},Game_Actor[_0x534c3a(0x53c)]['attackAnimationIdSlot']=function(_0x4c8191){_0x4c8191=_0x4c8191||0x1,_0x4c8191--;const _0xe8cc08=this['weapons']();return _0xe8cc08[_0x4c8191]?_0xe8cc08[_0x4c8191]['animationId']:0x0;},Game_Actor[_0x534c3a(0x53c)]['getAttackMotionSlot']=function(_0x162ace){const _0x2e81d7=_0x534c3a;_0x162ace=_0x162ace||0x1,_0x162ace--;const _0x8d2259=this[_0x2e81d7(0x5eb)](),_0x40f6a6=_0x8d2259[_0x162ace]?_0x8d2259[_0x162ace][_0x2e81d7(0x6d4)]:0x0;return $dataSystem[_0x2e81d7(0x964)][_0x40f6a6];},Game_Actor['prototype'][_0x534c3a(0xa44)]=function(_0x4b8cf2){const _0x4e3568=_0x534c3a;_0x4b8cf2=_0x4b8cf2||0x1,_0x4b8cf2--;const _0x3228d5=this[_0x4e3568(0x5eb)](),_0x463be9=_0x3228d5[_0x4b8cf2]?_0x3228d5[_0x4b8cf2]['wtypeId']:0x0,_0x439822=$dataSystem['attackMotions'][_0x463be9];if(_0x439822){if(_0x439822['type']===0x0){if(_0x4e3568(0x804)!==_0x4e3568(0xa0a))this[_0x4e3568(0x961)](_0x4e3568(0xa50));else{function _0x5af36a(){const _0x27e0c6=_0x4e3568;this[_0x27e0c6(0xa9f)]=_0x1d3bdd['mpDamage']>=0x0?0x2:0x3,this[_0x27e0c6(0x8b6)](_0x1b799d[_0x27e0c6(0x894)]);}}}else{if(_0x439822['type']===0x1){if(_0x4e3568(0x6a9)!==_0x4e3568(0x72c))this[_0x4e3568(0x961)]('swing');else{function _0x162a03(){const _0x42c740=_0x4e3568;this[_0x42c740(0x5a1)]()&&this[_0x42c740(0x7dd)][_0x42c740(0x26e)]();}}}else{if(_0x439822['type']===0x2){if(_0x4e3568(0x3fb)!==_0x4e3568(0x3fb)){function _0x1f830b(){const _0x585750=_0x4e3568;_0x5a81f2[_0x585750(0x7fa)]?this[_0x585750(0xa47)]=_0x585750(0x935):this[_0x585750(0xa47)]=_0x585750(0x7a2);}}else this[_0x4e3568(0x961)]('missile');}}}this[_0x4e3568(0x500)](_0x439822[_0x4e3568(0x5b2)]);}},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x91f)]=function(_0x1f5cfa){const _0x469652=_0x534c3a;this[_0x469652(0xa94)]=_0x1f5cfa||0x0;},Game_Battler[_0x534c3a(0x53c)]['nextActiveWeaponSlot']=function(){const _0x3a6c88=_0x534c3a;this[_0x3a6c88(0xa94)]=this[_0x3a6c88(0xa94)]||0x0,this[_0x3a6c88(0xa94)]++;},Game_Battler[_0x534c3a(0x53c)][_0x534c3a(0x5cf)]=function(){const _0x101d08=_0x534c3a;this[_0x101d08(0xa94)]=undefined;},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x447)]=Game_Actor[_0x534c3a(0x53c)]['equips'],Game_Actor[_0x534c3a(0x53c)][_0x534c3a(0x60f)]=function(){const _0x5392b2=_0x534c3a;let _0x5571ff=VisuMZ[_0x5392b2(0x99e)][_0x5392b2(0x447)][_0x5392b2(0x63a)](this);if(this[_0x5392b2(0x3d7)])return _0x5571ff;if(this[_0x5392b2(0xa94)]!==undefined){this[_0x5392b2(0x3d7)]=!![];const _0x2328c5=this[_0x5392b2(0x841)]();for(let _0x1b8eb1=0x0;_0x1b8eb1<_0x2328c5[_0x5392b2(0x4a2)];_0x1b8eb1++){_0x2328c5[_0x1b8eb1]===0x1&&this[_0x5392b2(0xa94)]!==_0x1b8eb1&&(_0x5571ff[_0x1b8eb1]=null);}this['_tempEquipCheck']=undefined;}return _0x5571ff;},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x565)]=function(_0x421ad5){const _0x23feb3=_0x534c3a;if(_0x421ad5[_0x23feb3(0x1e7)]())return _0x421ad5['weapons']()[_0x23feb3(0x4a2)]||0x1;else{if(_0x23feb3(0x4d3)===_0x23feb3(0x4d3))return 0x1;else{function _0x4d84ac(){const _0x3dbc40=_0x23feb3,_0x220785=_0x5e0cfa(_0x741bb0['$1'])['split'](/[\r\n]+/)[_0x3dbc40(0x46f)](''),_0x36b91c=_0x5e9dee[_0x3dbc40(0x9d0)](_0x220785);_0x213962['wtypeId']=_0x5e390f[_0x3dbc40(0x960)](_0x36b91c);}}}},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x1c6)]=function(_0x154cc8,_0x2e4684){const _0x202728=_0x534c3a;if(_0x154cc8&&_0x154cc8[_0x202728(0x1e7)]()){if(_0x202728(0xa48)!==_0x202728(0xa48)){function _0x40da71(){const _0x2a1bbe=_0x202728;if(_0x291562[_0x2a1bbe(0xa47)]!==_0x306daa)return _0x5df861[_0x2a1bbe(0xa47)];if(this[_0x2a1bbe(0x564)])return this[_0x2a1bbe(0x564)];return this[_0x2a1bbe(0x564)]=_0x2390e8[_0x2a1bbe(0x99e)][_0x2a1bbe(0x795)][_0x2a1bbe(0x27b)][_0x2a1bbe(0x1e0)][_0x2a1bbe(0x6c5)]()[_0x2a1bbe(0x5a9)](),this[_0x2a1bbe(0x564)]===_0x2a1bbe(0x935)&&!_0x43074f['VisuMZ_3_SideviewBattleUI']&&(this['_battleLayoutStyle']=_0x2a1bbe(0x7a2)),this[_0x2a1bbe(0x564)];}}else _0x154cc8[_0x202728(0x91f)](_0x2e4684);}this[_0x202728(0x10c)]();},Window_BattleLog['prototype'][_0x534c3a(0x64c)]=function(_0xe37d98){const _0x1868dd=_0x534c3a;_0xe37d98&&_0xe37d98[_0x1868dd(0x1e7)]()&&_0xe37d98[_0x1868dd(0x5cf)](),this[_0x1868dd(0x10c)]();},Game_Actor[_0x534c3a(0x53c)]['battleUIOffsetX']=function(){const _0x260681=_0x534c3a;let _0x474a1b=_0x260681(0x277);if(this[_0x260681(0x38a)](_0x474a1b))return this[_0x260681(0x648)][_0x474a1b];return this[_0x260681(0x648)][_0x474a1b]=this['createBattleUIOffsetX'](this[_0x260681(0x4c5)]()),this[_0x260681(0x648)][_0x474a1b];},Game_Actor[_0x534c3a(0x53c)][_0x534c3a(0x832)]=function(){const _0xa7e4b5=_0x534c3a;let _0x56a773=_0xa7e4b5(0x832);if(this[_0xa7e4b5(0x38a)](_0x56a773))return this[_0xa7e4b5(0x648)][_0x56a773];return this[_0xa7e4b5(0x648)][_0x56a773]=this['createBattleUIOffsetY'](this[_0xa7e4b5(0x4c5)]()),this[_0xa7e4b5(0x648)][_0x56a773];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x93d)]=Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x627)],Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x627)]=function(_0x8366a3,_0x4b354c,_0xdf22cf){const _0x5d901b=_0x534c3a;_0x8366a3=DataManager[_0x5d901b(0x22b)](_0x8366a3),VisuMZ[_0x5d901b(0x99e)][_0x5d901b(0x93d)][_0x5d901b(0x63a)](this,_0x8366a3,_0x4b354c,_0xdf22cf);if(Imported[_0x5d901b(0x58b)]){if(_0x5d901b(0x3eb)===_0x5d901b(0x3eb))this['initElementStatusCore']();else{function _0x327060(){const _0x56930a=_0x5d901b,_0xadd10a=_0xe619ca[_0x56930a(0x99e)][_0x56930a(0x795)][_0x56930a(0xa01)];if(!_0xadd10a[_0x56930a(0x896)])return;this[_0x56930a(0x3ba)]('addText',_0xadd10a[_0x56930a(0x77c)][_0x56930a(0x8e9)](_0x416fab[_0x56930a(0x43c)]())),this[_0x56930a(0x3ba)]('waitCount',_0xadd10a[_0x56930a(0x7d2)]),this[_0x56930a(0x3ba)](_0x56930a(0x48e));}}}this['clearBattleCoreData'](),this['setupBattleCoreData'](),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x5d901b(0x340)]();},Game_Enemy['prototype']['clearBattleCoreData']=function(){const _0x29cfdd=_0x534c3a,_0x5d2883=VisuMZ[_0x29cfdd(0x99e)][_0x29cfdd(0x795)][_0x29cfdd(0x53f)];this['_attackAnimationId']=_0x5d2883[_0x29cfdd(0x278)],this[_0x29cfdd(0x470)]={};},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x81b)]=function(){const _0x5341f4=_0x534c3a,_0x14e67b=VisuMZ[_0x5341f4(0x99e)][_0x5341f4(0x795)][_0x5341f4(0x53f)],_0x5b8948=this[_0x5341f4(0x602)]()[_0x5341f4(0x650)];this[_0x5341f4(0x470)]={'name':'','wtypeId':_0x14e67b[_0x5341f4(0x86d)],'collapse':_0x14e67b[_0x5341f4(0x776)],'motionIdle':_0x14e67b[_0x5341f4(0x990)],'width':_0x14e67b[_0x5341f4(0x97c)]||0x40,'height':_0x14e67b[_0x5341f4(0xde)]||0x40,'anchorX':_0x14e67b[_0x5341f4(0x8b1)]||0x0,'anchorY':_0x14e67b['AnchorY']||0x0,'shadow':_0x14e67b[_0x5341f4(0x413)]};_0x5b8948[_0x5341f4(0x5ed)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x2b2712=this['_svBattlerData'];if(_0x5b8948[_0x5341f4(0x5ed)](/<SIDEVIEW BATTLER: (.*)>/i))_0x2b2712[_0x5341f4(0x180)]=String(RegExp['$1']);else{if(_0x5b8948[_0x5341f4(0x5ed)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if('CyzxE'!=='CyzxE'){function _0x2a907b(){const _0x374db6=_0x5341f4;_0x553bca=_0x2ad7e3[_0x374db6(0x1dd)];}}else{const _0x1ed2e0=String(RegExp['$1'])[_0x5341f4(0x4bc)](/[\r\n]+/)[_0x5341f4(0x46f)]('');_0x2b2712['name']=DataManager['processRandomizedData'](_0x1ed2e0);}}}if(_0x5b8948[_0x5341f4(0x5ed)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0x5341f4(0x984)===_0x5341f4(0x893)){function _0x1d63c8(){const _0x3768b8=_0x5341f4;return!this['isTurnBased']()&&!this[_0x3768b8(0x718)]();}}else _0x2b2712[_0x5341f4(0x2ea)]=eval(RegExp['$1']),_0x2b2712[_0x5341f4(0x5a7)]=eval(RegExp['$2']);}if(_0x5b8948[_0x5341f4(0x5ed)](/<SIDEVIEW COLLAPSE>/i))_0x2b2712[_0x5341f4(0x80d)]=!![];else _0x5b8948[_0x5341f4(0x5ed)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x2b2712['collapse']=![]);if(_0x5b8948[_0x5341f4(0x5ed)](/<SIDEVIEW SHOW SHADOW>/i)){if(_0x5341f4(0x9c7)!==_0x5341f4(0x21f))_0x2b2712[_0x5341f4(0x884)]=!![];else{function _0x45fa01(){const _0xce9fe4=_0x5341f4;this[_0xce9fe4(0x14a)](),this[_0xce9fe4(0x890)]=null,this[_0xce9fe4(0x10e)]=![];}}}else _0x5b8948['match'](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x2b2712['shadow']=![]);if(_0x5b8948[_0x5341f4(0x5ed)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x2b2712[_0x5341f4(0x517)]=String(RegExp['$1'])[_0x5341f4(0x6c5)]()[_0x5341f4(0x5a9)]();else{if(_0x5b8948['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x28d93c=String(RegExp['$1'])[_0x5341f4(0x4bc)](/[\r\n]+/)[_0x5341f4(0x46f)]('');_0x2b2712[_0x5341f4(0x517)]=DataManager[_0x5341f4(0x9d0)](_0x28d93c);}}_0x5b8948[_0x5341f4(0x5ed)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x2b2712[_0x5341f4(0x456)]=Number(RegExp['$1']),_0x2b2712[_0x5341f4(0x363)]=Number(RegExp['$2']));if(_0x5b8948[_0x5341f4(0x5ed)](/<SIDEVIEW WEAPON: (.*)>/i))_0x2b2712['wtypeId']=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x5b8948[_0x5341f4(0x5ed)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x347374=String(RegExp['$1'])[_0x5341f4(0x4bc)](/[\r\n]+/)[_0x5341f4(0x46f)](''),_0x14ec9f=DataManager[_0x5341f4(0x9d0)](_0x347374);_0x2b2712['wtypeId']=DataManager[_0x5341f4(0x960)](_0x14ec9f);}}if(Imported[_0x5341f4(0x58b)]){const _0x520d41=this[_0x5341f4(0x268)]();for(const _0x314dd1 of _0x520d41){if('Etnxh'!=='yZMKf'){const _0x1352c2=this['traitSet'](_0x314dd1)[_0x5341f4(0x6c3)]['toUpperCase']()[_0x5341f4(0x5a9)](),_0x384a5a=_0x314dd1[_0x5341f4(0x2ca)]()['trim']();if(_0x5b8948['match'](VisuMZ[_0x5341f4(0x3a5)][_0x5341f4(0x146)][_0x5341f4(0x65c)['format'](_0x384a5a,_0x1352c2)]))_0x2b2712[_0x5341f4(0x180)]=String(RegExp['$1']);else{if(_0x5b8948['match'](VisuMZ[_0x5341f4(0x3a5)][_0x5341f4(0x146)]['SvBattlerMass-%1-%2'[_0x5341f4(0x8e9)](_0x384a5a,_0x1352c2)])){const _0x53a711=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x5341f4(0x46f)]('');_0x2b2712[_0x5341f4(0x180)]=DataManager[_0x5341f4(0x9d0)](_0x53a711);}}if(_0x5b8948[_0x5341f4(0x5ed)](VisuMZ[_0x5341f4(0x3a5)][_0x5341f4(0x146)][_0x5341f4(0x579)[_0x5341f4(0x8e9)](_0x384a5a,_0x1352c2)]))_0x2b2712['wtypeId']=DataManager[_0x5341f4(0x960)](RegExp['$1']);else{if(_0x5b8948[_0x5341f4(0x5ed)](VisuMZ[_0x5341f4(0x3a5)][_0x5341f4(0x146)][_0x5341f4(0xa34)[_0x5341f4(0x8e9)](_0x384a5a,_0x1352c2)])){if(_0x5341f4(0x1aa)!==_0x5341f4(0x5a4)){const _0x2ed6a3=String(RegExp['$1'])[_0x5341f4(0x4bc)](/[\r\n]+/)[_0x5341f4(0x46f)](''),_0x2102f6=DataManager[_0x5341f4(0x9d0)](_0x2ed6a3);_0x2b2712['wtypeId']=DataManager['getWtypeIdWithName'](_0x2102f6);}else{function _0x3e6980(){const _0x4ab3c9=_0x5341f4;_0x414592+=_0x6190a9[_0x4ab3c9(0x1e7)]()?-_0x392847:_0x36a91a,_0x9dec79+=_0x28e281;}}}}if(_0x5b8948[_0x5341f4(0x5ed)](VisuMZ[_0x5341f4(0x3a5)][_0x5341f4(0x146)][_0x5341f4(0xa60)['format'](_0x384a5a,_0x1352c2)]))_0x2b2712[_0x5341f4(0x517)]=String(RegExp['$1'])[_0x5341f4(0x6c5)]()['trim']();else{if(_0x5b8948[_0x5341f4(0x5ed)](VisuMZ['ElementStatusCore'][_0x5341f4(0x146)][_0x5341f4(0x950)[_0x5341f4(0x8e9)](_0x384a5a,_0x1352c2)])){const _0x5e0b93=String(RegExp['$1'])[_0x5341f4(0x4bc)](/[\r\n]+/)[_0x5341f4(0x46f)]('');_0x2b2712['motionIdle']=DataManager[_0x5341f4(0x9d0)](_0x5e0b93);}}}else{function _0x47fc6f(){const _0x55accd=_0x5341f4;for(const _0x42af36 of _0x20f4f1['enemyNames']()){this['_logWindow'][_0x55accd(0x3ba)](_0x55accd(0x87c),_0x327fe1[_0x55accd(0x6e7)][_0x55accd(0x8e9)](_0x42af36)),this['_logWindow'][_0x55accd(0x3ba)](_0x55accd(0x41c)),_0x509116=!![];}}}}}},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x618)]=function(){const _0x3fae52=_0x534c3a;return this[_0x3fae52(0x350)]||0x0;},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x203)]=function(){const _0x1ab59e=_0x534c3a;return this[_0x1ab59e(0x618)]();},Game_Enemy['prototype']['attackAnimationIdSlot']=function(_0x44566e){const _0x2a3f53=_0x534c3a;return this[_0x2a3f53(0x618)]();},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x25a)]=function(){const _0x2a269b=_0x534c3a;if(this[_0x2a269b(0x602)]()[_0x2a269b(0x650)][_0x2a269b(0x5ed)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x2a269b(0x53c)][_0x2a269b(0x25a)]['call'](this);},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x8ca)]=function(){const _0x9ebbe6=_0x534c3a;if(this[_0x9ebbe6(0x602)]()[_0x9ebbe6(0x650)]['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x310)]=function(){const _0x25b98f=_0x534c3a,_0x4006e9=[];for(const _0x22932e of this[_0x25b98f(0x602)]()[_0x25b98f(0x2e3)]){const _0x23777e=$dataSkills[_0x22932e[_0x25b98f(0xf9)]];if(_0x23777e&&!_0x4006e9['includes'](_0x23777e))_0x4006e9[_0x25b98f(0x3ba)](_0x23777e);}return _0x4006e9;},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x277)]=function(){const _0x909282=_0x534c3a;let _0x33c803='battleUIOffsetX';if(this[_0x909282(0x38a)](_0x33c803))return this[_0x909282(0x648)][_0x33c803];return this['_cache'][_0x33c803]=this['createBattleUIOffsetX'](this[_0x909282(0x602)]()),this[_0x909282(0x648)][_0x33c803];},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x832)]=function(){const _0x15c0a1=_0x534c3a;let _0x2e2283=_0x15c0a1(0x832);if(this['checkCacheKey'](_0x2e2283))return this['_cache'][_0x2e2283];return this[_0x15c0a1(0x648)][_0x2e2283]=this[_0x15c0a1(0x2ab)](this[_0x15c0a1(0x602)]()),this[_0x15c0a1(0x648)][_0x2e2283];},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x3cd)]=function(){const _0x37fa21=_0x534c3a;if(this[_0x37fa21(0x470)]!==undefined)return this[_0x37fa21(0x470)];return this[_0x37fa21(0x81b)](),this['_svBattlerData'];},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x5a1)]=function(){const _0x21b5b9=_0x534c3a;return this[_0x21b5b9(0x3cd)]()[_0x21b5b9(0x180)]!=='';},Game_Enemy[_0x534c3a(0x53c)]['svBattlerName']=function(){const _0x52d4bb=_0x534c3a;return this[_0x52d4bb(0x3cd)]()[_0x52d4bb(0x180)];},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x61c)]=function(){const _0x1e30c4=_0x534c3a;return this['hasSvBattler']()?VisuMZ[_0x1e30c4(0x99e)][_0x1e30c4(0x795)][_0x1e30c4(0x2a0)]['SmoothImage']:VisuMZ['BattleCore'][_0x1e30c4(0x795)][_0x1e30c4(0x53f)]['SmoothImage'];},Game_Enemy[_0x534c3a(0x53c)]['performAction']=function(_0x5b595f){const _0x4d8f51=_0x534c3a;Game_Battler[_0x4d8f51(0x53c)][_0x4d8f51(0xa80)]['call'](this,_0x5b595f);if(this['hasSvBattler']())this[_0x4d8f51(0x3cf)](_0x5b595f);},Game_Enemy[_0x534c3a(0x53c)]['performAttack']=function(){const _0x409b3f=_0x534c3a,_0x1c0f7f=this[_0x409b3f(0x3cd)]()[_0x409b3f(0x6d4)]||0x0,_0x2754bc=$dataSystem['attackMotions'][_0x1c0f7f];if(_0x2754bc){if(_0x2754bc[_0x409b3f(0x88f)]===0x0){if(_0x409b3f(0x6ff)!==_0x409b3f(0xe6))this['requestMotion']('thrust');else{function _0xbc818d(){_0x3ccf94=_0x5d43e5>=_0x4546cd?_0xa86227:_0x3a7d78;}}}else{if(_0x2754bc[_0x409b3f(0x88f)]===0x1){if(_0x409b3f(0x47e)!=='yVscx'){function _0x2db6a1(){return this['needsSelectionBattleCore']();}}else this[_0x409b3f(0x961)](_0x409b3f(0x3ce));}else _0x2754bc[_0x409b3f(0x88f)]===0x2&&this[_0x409b3f(0x961)](_0x409b3f(0x948));}}},Game_Enemy['prototype'][_0x534c3a(0x87a)]=function(){const _0x2b288f=_0x534c3a,_0x4b2507=this[_0x2b288f(0x3cd)]()['wtypeId']||0x0,_0x2d3584=$dataSystem[_0x2b288f(0x964)][_0x4b2507];_0x2d3584&&this[_0x2b288f(0x500)](_0x2d3584[_0x2b288f(0x5b2)]);},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x6ba)]=function(){const _0x4eae81=_0x534c3a,_0x4480a6=this[_0x4eae81(0x3cd)]()[_0x4eae81(0x6d4)]||0x0;return $dataSystem[_0x4eae81(0x964)][_0x4480a6];},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x4c0)]=function(_0x5f057a){return this['getAttackMotion']();},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x622)]=function(){const _0x10cc99=_0x534c3a;Game_Battler[_0x10cc99(0x53c)][_0x10cc99(0x622)][_0x10cc99(0x63a)](this),this[_0x10cc99(0x1b9)]()&&this[_0x10cc99(0x5a1)]()&&this['requestMotion'](_0x10cc99(0x8fc)),SoundManager[_0x10cc99(0x362)]();},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x85c)]=function(){const _0x5e0b88=_0x534c3a;Game_Battler[_0x5e0b88(0x53c)]['performEvasion'][_0x5e0b88(0x63a)](this),this['requestMotion'](_0x5e0b88(0x7e8));},Game_Enemy[_0x534c3a(0x53c)]['performMagicEvasion']=function(){const _0x5af0f6=_0x534c3a;Game_Battler[_0x5af0f6(0x53c)][_0x5af0f6(0x5f7)][_0x5af0f6(0x63a)](this),this[_0x5af0f6(0x961)](_0x5af0f6(0x7e8));},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x774)]=function(){const _0x52f4a6=_0x534c3a;Game_Battler[_0x52f4a6(0x53c)][_0x52f4a6(0x774)][_0x52f4a6(0x63a)](this),this[_0x52f4a6(0x784)]();},Game_Enemy['prototype'][_0x534c3a(0xa38)]=function(){const _0x3361fa=_0x534c3a;if(this[_0x3361fa(0x5a1)]()){if(this[_0x3361fa(0x107)]()>=0x1)return!![];return this[_0x3361fa(0x3cd)]()[_0x3361fa(0x80d)];}else{if('OhBHu'!==_0x3361fa(0xa62)){function _0x4d9b9c(){const _0x18e04c=_0x3361fa;if(!_0x2f33fe['BattleCore'][_0x18e04c(0x795)][_0x18e04c(0x27b)][_0x18e04c(0x461)])return;const _0x18eccd=this['actor'](_0x45f945),_0x30f8b2=this[_0x18e04c(0x334)](_0x5b5202);_0x30f8b2['width']=_0x5ef37e[_0x18e04c(0x959)],_0x30f8b2[_0x18e04c(0x363)]-=0x2,this[_0x18e04c(0x43b)](_0x18eccd,_0x30f8b2['x']+0x1,_0x30f8b2['y']+0x1,_0x30f8b2[_0x18e04c(0x456)],_0x30f8b2[_0x18e04c(0x363)]);}}else return!![];}},Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x924)]=function(){const _0x207d73=_0x534c3a;return this[_0x207d73(0x3cd)]()['anchorX'];},Game_Enemy[_0x534c3a(0x53c)]['svBattlerAnchorY']=function(){const _0x4e89fd=_0x534c3a;return this[_0x4e89fd(0x3cd)]()[_0x4e89fd(0x5a7)];},Game_Enemy['prototype']['svBattlerShadowVisible']=function(){const _0x48503b=_0x534c3a;return this['svBattlerData']()[_0x48503b(0x884)];},VisuMZ['BattleCore']['Game_Enemy_transform']=Game_Enemy['prototype'][_0x534c3a(0x68c)],Game_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x68c)]=function(_0x4a179f){const _0x1a56ee=_0x534c3a;VisuMZ['BattleCore'][_0x1a56ee(0x51a)]['call'](this,_0x4a179f),this[_0x1a56ee(0xa0b)](),this[_0x1a56ee(0x81b)]();const _0x3f3411=this[_0x1a56ee(0x7c4)]();if(_0x3f3411)_0x3f3411[_0x1a56ee(0x749)](this);},Game_Unit['prototype'][_0x534c3a(0x239)]=function(_0x1d595c){const _0x488e6e=_0x534c3a;for(const _0x565637 of this[_0x488e6e(0x8a8)]()){if(_0x488e6e(0x52f)===_0x488e6e(0x52f)){if(_0x565637)_0x565637[_0x488e6e(0x239)](_0x1d595c);}else{function _0x270afa(){const _0x522fd5=_0x488e6e;return _0x4ca1d2['prototype'][_0x522fd5(0x662)][_0x522fd5(0x63a)](this)&&this[_0x522fd5(0x322)]();}}}},Game_Unit[_0x534c3a(0x53c)]['trueRandomTarget']=function(){const _0x229c7f=_0x534c3a,_0x300844=this[_0x229c7f(0x2b8)]();return _0x300844[Math[_0x229c7f(0x676)](_0x300844[_0x229c7f(0x4a2)])];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x1a8)]=Game_Party[_0x534c3a(0x53c)][_0x534c3a(0x925)],Game_Party[_0x534c3a(0x53c)][_0x534c3a(0x925)]=function(_0x4a17b8){const _0x30483e=_0x534c3a;VisuMZ[_0x30483e(0x99e)][_0x30483e(0x1a8)]['call'](this,_0x4a17b8),BattleManager[_0x30483e(0x55d)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x571)]=Game_Party[_0x534c3a(0x53c)][_0x534c3a(0x89c)],Game_Party[_0x534c3a(0x53c)][_0x534c3a(0x89c)]=function(_0x5caafb){const _0x313d4e=_0x534c3a;VisuMZ[_0x313d4e(0x99e)][_0x313d4e(0x571)][_0x313d4e(0x63a)](this,_0x5caafb),BattleManager[_0x313d4e(0x55d)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x59f)]=Game_Troop[_0x534c3a(0x53c)][_0x534c3a(0x627)],Game_Troop[_0x534c3a(0x53c)][_0x534c3a(0x627)]=function(_0x1c7f41){const _0x4334df=_0x534c3a;$gameTemp[_0x4334df(0x427)](),$gameTemp[_0x4334df(0x2f1)](_0x1c7f41),VisuMZ[_0x4334df(0x99e)]['Game_Troop_setup'][_0x4334df(0x63a)](this,_0x1c7f41);},VisuMZ['BattleCore'][_0x534c3a(0x518)]=Game_Map['prototype'][_0x534c3a(0x2be)],Game_Map[_0x534c3a(0x53c)][_0x534c3a(0x2be)]=function(){const _0x266341=_0x534c3a;VisuMZ[_0x266341(0x99e)][_0x266341(0x518)][_0x266341(0x63a)](this),this[_0x266341(0x4f0)]();},Game_Map['prototype'][_0x534c3a(0x4f0)]=function(){const _0x466c2f=_0x534c3a;this['_regionBattleback1']={},this[_0x466c2f(0x77a)]={};if(!$dataMap)return;const _0x31bc85=$dataMap[_0x466c2f(0x650)];if(!_0x31bc85)return;const _0x522c52=_0x31bc85[_0x466c2f(0x5ed)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x522c52)for(const _0x304450 of _0x522c52){_0x304450[_0x466c2f(0x5ed)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x1f089=Number(RegExp['$1']),_0x5efe7b=Number(RegExp['$2']),_0x30f0bd=_0x5efe7b===0x1?this[_0x466c2f(0x389)]:this['_regionBattleback2'],_0x2894e6=String(RegExp['$3']);_0x30f0bd[_0x1f089]=_0x2894e6;}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x626)]=Game_Map[_0x534c3a(0x53c)][_0x534c3a(0x37c)],Game_Map[_0x534c3a(0x53c)]['battleback1Name']=function(){const _0x2f7dcf=_0x534c3a;if(!BattleManager[_0x2f7dcf(0x2a6)]()){const _0x4d2507=$gamePlayer[_0x2f7dcf(0x388)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x2f7dcf(0x389)][_0x4d2507]){if('keYWH'===_0x2f7dcf(0x4e1)){function _0x41cee5(){const _0x10f55b=_0x2f7dcf;_0x1e4fad=_0x683c50[_0x10f55b(0x99e)][_0x10f55b(0xd5)][_0x10f55b(0x63a)](this);const _0xdc6d40=_0x2e066e[_0x10f55b(0x99e)][_0x10f55b(0x512)](this[_0x10f55b(0x464)](),_0x10f55b(0x689));return _0x528861=_0x2f7d17[_0x10f55b(0x99e)]['JS'][_0xdc6d40][_0x10f55b(0x63a)](this,this[_0x10f55b(0x3fe)](),_0x4b53dd),this[_0x10f55b(0x74f)](_0x2dfa56);}}else return this[_0x2f7dcf(0x389)][_0x4d2507];}}return VisuMZ['BattleCore'][_0x2f7dcf(0x626)][_0x2f7dcf(0x63a)](this);},VisuMZ[_0x534c3a(0x99e)]['Game_Map_battleback2Name']=Game_Map[_0x534c3a(0x53c)][_0x534c3a(0x57b)],Game_Map[_0x534c3a(0x53c)]['battleback2Name']=function(){const _0x3d4b0d=_0x534c3a;if(!BattleManager['isBattleTest']()){if(_0x3d4b0d(0x6b0)===_0x3d4b0d(0x7fe)){function _0x3b333a(){const _0x50b756=_0x3d4b0d;this[_0x50b756(0x431)](_0x5770b4,_0x313590,_0x277605);}}else{const _0xbd449e=$gamePlayer[_0x3d4b0d(0x388)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3d4b0d(0x389)]&&this[_0x3d4b0d(0x77a)][_0xbd449e]){if('lPzpI'===_0x3d4b0d(0x2b7))return this[_0x3d4b0d(0x77a)][_0xbd449e];else{function _0x5c306c(){const _0x56dae5=_0x3d4b0d;return _0x18cbe3[_0x56dae5(0x99e)]['Game_Interpreter_command283'][_0x56dae5(0x63a)](this,_0x5ea4e1);}}}}}return VisuMZ['BattleCore'][_0x3d4b0d(0x6c6)][_0x3d4b0d(0x63a)](this);},VisuMZ[_0x534c3a(0x99e)]['Game_Interpreter_PluginCommand']=Game_Interpreter[_0x534c3a(0x53c)][_0x534c3a(0x428)],Game_Interpreter[_0x534c3a(0x53c)][_0x534c3a(0x428)]=function(_0x3f6d58){const _0x526bf2=_0x534c3a;return $gameTemp[_0x526bf2(0x210)](this),VisuMZ[_0x526bf2(0x99e)][_0x526bf2(0x4a6)][_0x526bf2(0x63a)](this,_0x3f6d58);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x7c9)]=Game_Interpreter['prototype']['updateWaitMode'],Game_Interpreter[_0x534c3a(0x53c)][_0x534c3a(0x645)]=function(){const _0x24e2dd=_0x534c3a;if(SceneManager['isSceneBattle']())switch(this[_0x24e2dd(0x772)]){case'battleAngle':if(Imported[_0x24e2dd(0x3b6)]){if(_0x24e2dd(0x751)!==_0x24e2dd(0x751)){function _0x4d5c62(){const _0x2b4cf5=_0x24e2dd,_0x30b729=_0x502a22[_0x2b4cf5(0x99e)][_0x2b4cf5(0x795)][_0x2b4cf5(0x27b)],_0x17e197=_0x59ac93['prototype'][_0x2b4cf5(0x2cd)](),_0x2ddc93=_0x39bcbe['boxWidth']-(_0x30b729[_0x2b4cf5(0x584)]||0xc0),_0x1aca7c=this[_0x2b4cf5(0x916)]()+_0x17e197,_0x1e3c4a=this[_0x2b4cf5(0x7ae)]()?0x0:_0x51be9a['boxWidth']-_0x2ddc93,_0x3adcb7=_0x17e6ec[_0x2b4cf5(0x29d)]-_0x1aca7c+_0x17e197;return new _0x397648(_0x1e3c4a,_0x3adcb7,_0x2ddc93,_0x1aca7c);}}else{if($gameScreen['battleCameraData']()[_0x24e2dd(0x740)]>0x0)return!![];this[_0x24e2dd(0x772)]='';}}break;case'battleAnimation':if(BattleManager[_0x24e2dd(0x6bf)][_0x24e2dd(0x16e)]())return!![];this['_waitMode']='';break;case _0x24e2dd(0x90a):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x24e2dd(0x61a)]()['cameraDuration']>0x0)return!![];if($gameScreen[_0x24e2dd(0x61a)]()[_0x24e2dd(0x297)]>0x0)return!![];this[_0x24e2dd(0x772)]='';}break;case _0x24e2dd(0x326):if(BattleManager[_0x24e2dd(0x6bf)][_0x24e2dd(0x130)]())return!![];this[_0x24e2dd(0x772)]='';break;case'battleFloat':if(BattleManager[_0x24e2dd(0x6bf)]['isAnyoneFloating']())return!![];this[_0x24e2dd(0x772)]='';break;case _0x24e2dd(0x7a6):if(BattleManager[_0x24e2dd(0x6bf)]['isAnyoneJumping']())return!![];this[_0x24e2dd(0x772)]='';break;case _0x24e2dd(0x2d4):if(BattleManager[_0x24e2dd(0xa5c)][_0x24e2dd(0xaac)]())return!![];this[_0x24e2dd(0x772)]='';break;case _0x24e2dd(0xa71):if(BattleManager[_0x24e2dd(0x6bf)][_0x24e2dd(0x854)]())return!![];this['_waitMode']='';break;case _0x24e2dd(0x503):if(BattleManager[_0x24e2dd(0x6bf)][_0x24e2dd(0x6fe)]())return!![];this[_0x24e2dd(0x772)]='';break;case _0x24e2dd(0x5ee):if(BattleManager[_0x24e2dd(0x6bf)]['isAnyoneGrowing']())return!![];this[_0x24e2dd(0x772)]='';break;case _0x24e2dd(0x245):if(BattleManager[_0x24e2dd(0x6bf)][_0x24e2dd(0x97f)]())return!![];this['_waitMode']='';break;case _0x24e2dd(0x8b4):if(Imported[_0x24e2dd(0xa45)]){if(BattleManager[_0x24e2dd(0x6bf)][_0x24e2dd(0x14f)]())return!![];this[_0x24e2dd(0x772)]='';}break;case _0x24e2dd(0x1f9):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x24e2dd(0x61a)]()['skewDuration']>0x0)return!![];this[_0x24e2dd(0x772)]='';}break;case _0x24e2dd(0x1cf):if(BattleManager[_0x24e2dd(0x6bf)][_0x24e2dd(0x757)]())return!![];this[_0x24e2dd(0x772)]='';break;case _0x24e2dd(0x6a2):if(Imported[_0x24e2dd(0x3b6)]){if($gameScreen[_0x24e2dd(0x61a)]()[_0x24e2dd(0x6f5)]>0x0)return!![];this['_waitMode']='';}break;}return VisuMZ[_0x24e2dd(0x99e)][_0x24e2dd(0x7c9)]['call'](this);},VisuMZ[_0x534c3a(0x99e)]['Game_Interpreter_command301']=Game_Interpreter[_0x534c3a(0x53c)]['command301'],Game_Interpreter[_0x534c3a(0x53c)][_0x534c3a(0x1d8)]=function(_0x3028f6){const _0x2bc149=_0x534c3a;if(!$gameParty[_0x2bc149(0x9f6)]())return this[_0x2bc149(0x699)](_0x3028f6);else{if('ixyxo'===_0x2bc149(0x7f3)){function _0x1302f4(){const _0x2e41fc=_0x2bc149;_0x3e3035[_0x2e41fc(0x99e)][_0x2e41fc(0x752)][_0x2e41fc(0x63a)](this,_0x1bc53c),this[_0x2e41fc(0x2e5)](_0x31278e);}}else return VisuMZ[_0x2bc149(0x99e)][_0x2bc149(0x1c7)][_0x2bc149(0x63a)](this,_0x3028f6);}},Game_Interpreter[_0x534c3a(0x53c)][_0x534c3a(0x31b)]=function(_0x58987a){const _0x4a946a=_0x534c3a;return VisuMZ[_0x4a946a(0x99e)][_0x4a946a(0x1c7)]['call'](this,_0x58987a),BattleManager[_0x4a946a(0x1cb)](_0x2bb8e4=>{const _0x1a2228=_0x4a946a;this[_0x1a2228(0x4f5)][this[_0x1a2228(0x170)]]=_0x2bb8e4;}),!![];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x72a)]=function(_0x5f39d4){const _0x364f9d=_0x534c3a,_0x1310c0=$dataCommonEvents[_0x5f39d4];if(!_0x1310c0)return![];if(_0x1310c0[_0x364f9d(0xaa4)]['length']<=0x1)return![];return!![];},Game_Interpreter['prototype']['command301_PreBattleEvent']=function(_0x24a836){const _0x4786af=_0x534c3a,_0xddab6b=VisuMZ[_0x4786af(0x99e)][_0x4786af(0x795)][_0x4786af(0x871)],_0x49509b=_0xddab6b[_0x4786af(0xa27)],_0x4343c1=$dataCommonEvents[_0x49509b];if(_0x4343c1&&VisuMZ[_0x4786af(0x99e)][_0x4786af(0x72a)](_0x49509b)){const _0x3935d2=this[_0x4786af(0x325)]()?this[_0x4786af(0x7f6)]:0x0,_0x1f3d78=_0x4343c1[_0x4786af(0xaa4)];this[_0x4786af(0x8d8)](_0x1f3d78,_0x3935d2),this[_0x4786af(0x142)]=JsonEx[_0x4786af(0x537)](this['_list']);const _0x5c1616={'code':0xbc3,'indent':this[_0x4786af(0x170)],'parameters':JsonEx[_0x4786af(0x537)](_0x24a836)};return this[_0x4786af(0x142)]['splice'](this[_0x4786af(0x71f)]+0x1,0x0,_0x5c1616),!![];}else{if('sangL'===_0x4786af(0x2bb))return VisuMZ[_0x4786af(0x99e)]['Game_Interpreter_command301'][_0x4786af(0x63a)](this,_0x24a836);else{function _0x24d1be(){const _0x2b5030=_0x4786af;_0xcaa88f[_0x2b5030(0x99e)][_0x2b5030(0x533)]['call'](this),this[_0x2b5030(0x266)]();}}}},VisuMZ['BattleCore'][_0x534c3a(0x7bb)]=BattleManager[_0x534c3a(0x707)],BattleManager[_0x534c3a(0x707)]=function(){const _0x4c6cf2=_0x534c3a;VisuMZ[_0x4c6cf2(0x99e)][_0x4c6cf2(0x7bb)]['call'](this),this[_0x4c6cf2(0x397)]();},BattleManager['onEncounterBattleCore']=function(){const _0x15e581=_0x534c3a,_0x30198e=VisuMZ[_0x15e581(0x99e)][_0x15e581(0x795)][_0x15e581(0x871)],_0x349c50=_0x30198e[_0x15e581(0xa27)];_0x349c50&&VisuMZ[_0x15e581(0x99e)]['CheckMapBattleEventValid'](_0x349c50)&&(this[_0x15e581(0x7d8)]=!![],$gameTemp['reserveCommonEvent'](_0x30198e[_0x15e581(0xa27)]),$gameMap['updateInterpreter'](),$gameMap[_0x15e581(0x6cf)]['_preBattleCommonEvent']=!![]),_0x30198e[_0x15e581(0x1ff)]>0x0&&(this[_0x15e581(0x838)]=!![]);},VisuMZ[_0x534c3a(0x99e)]['Scene_Map_launchBattle']=Scene_Map[_0x534c3a(0x53c)][_0x534c3a(0x4fe)],Scene_Map[_0x534c3a(0x53c)]['launchBattle']=function(){const _0xc00408=_0x534c3a;if(BattleManager['_battleCoreBattleStartEvent'])this[_0xc00408(0x22d)]();else{if(_0xc00408(0x6ef)!=='cFwld')VisuMZ[_0xc00408(0x99e)][_0xc00408(0x4d0)][_0xc00408(0x63a)](this);else{function _0xa7fa19(){const _0x197fa9=_0xc00408,_0x15492e=_0x37ab9b[_0x197fa9(0x99e)][_0x197fa9(0x795)]['Enemy'];_0x15492e[_0x197fa9(0x529)]?this['autoSelectLastSelected']():this[_0x197fa9(0x79d)]();}}}},Scene_Map['prototype'][_0x534c3a(0x22d)]=function(){this['_active']=!![];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x262)]=SceneManager[_0x534c3a(0x384)],SceneManager[_0x534c3a(0x384)]=function(){const _0x544cae=_0x534c3a;if(BattleManager[_0x544cae(0x7d8)])return![];return VisuMZ[_0x544cae(0x99e)]['SceneManager_isSceneChanging'][_0x544cae(0x63a)](this);},VisuMZ[_0x534c3a(0x99e)]['Game_Interpreter_terminate']=Game_Interpreter[_0x534c3a(0x53c)][_0x534c3a(0x545)],Game_Interpreter[_0x534c3a(0x53c)][_0x534c3a(0x545)]=function(){const _0x5568d7=_0x534c3a;VisuMZ['BattleCore']['Game_Interpreter_terminate']['call'](this);if(this['_preBattleCommonEvent']){if(_0x5568d7(0x538)!==_0x5568d7(0x265))this[_0x5568d7(0x4f2)]=undefined,SceneManager[_0x5568d7(0x76b)]['battleCoreResumeLaunchBattle']();else{function _0x430cf5(){const _0x5ddcc0=_0x5568d7;return _0x26e51f[_0x5ddcc0(0x99e)][_0x5ddcc0(0x795)][_0x5ddcc0(0x67e)][_0x5ddcc0(0x4e6)];}}}},Scene_Map[_0x534c3a(0x53c)][_0x534c3a(0x20c)]=function(){const _0x4a388d=_0x534c3a;BattleManager[_0x4a388d(0x7d8)]=undefined,BattleManager[_0x4a388d(0x73f)]=!![],this[_0x4a388d(0x1c9)]();},VisuMZ['BattleCore'][_0x534c3a(0x9ab)]=Scene_Map['prototype']['initialize'],Scene_Map['prototype']['initialize']=function(){const _0x21aed2=_0x534c3a;VisuMZ[_0x21aed2(0x99e)]['Scene_Map_initializeAfter'][_0x21aed2(0x63a)](this);if(BattleManager[_0x21aed2(0x73f)]){if(_0x21aed2(0x666)===_0x21aed2(0x666))this['_active']=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined;else{function _0x425dcd(){const _0x262786=_0x21aed2;return this[_0x262786(0x3cd)]()[_0x262786(0x5a7)];}}}},VisuMZ[_0x534c3a(0x99e)]['Scene_Map_initialize']=Scene_Map[_0x534c3a(0x53c)][_0x534c3a(0x96e)],Scene_Map[_0x534c3a(0x53c)][_0x534c3a(0x96e)]=function(){const _0x527223=_0x534c3a;VisuMZ[_0x527223(0x99e)]['Scene_Map_initialize'][_0x527223(0x63a)](this),$gameTemp[_0x527223(0x427)]();},VisuMZ[_0x534c3a(0x99e)]['Scene_ItemBase_applyItem']=Scene_ItemBase[_0x534c3a(0x53c)]['applyItem'],Scene_ItemBase[_0x534c3a(0x53c)][_0x534c3a(0x185)]=function(){const _0x3c3a57=_0x534c3a;VisuMZ['BattleCore'][_0x3c3a57(0x773)][_0x3c3a57(0x63a)](this),this[_0x3c3a57(0x464)]()[_0x3c3a57(0x650)][_0x3c3a57(0x5ed)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x3c3a57(0x4be)]=[]),DataManager['checkAutoCustomActionSequenceNotetagEffect'](this[_0x3c3a57(0x464)]())&&($gameTemp['_commonEventQueue']=[]);},VisuMZ[_0x534c3a(0x99e)]['Scene_Options_maxCommands']=Scene_Options[_0x534c3a(0x53c)][_0x534c3a(0xf7)],Scene_Options['prototype'][_0x534c3a(0xf7)]=function(){const _0x5468f5=_0x534c3a;let _0x4f74d1=VisuMZ[_0x5468f5(0x99e)][_0x5468f5(0x7df)][_0x5468f5(0x63a)](this);const _0x3d4f1c=VisuMZ[_0x5468f5(0x99e)][_0x5468f5(0x795)];if(_0x3d4f1c[_0x5468f5(0x52b)][_0x5468f5(0x7ff)]&&_0x3d4f1c[_0x5468f5(0x52b)][_0x5468f5(0x95b)])_0x4f74d1+=0x2;if(_0x3d4f1c['HpGauge'][_0x5468f5(0x7ff)]&&_0x3d4f1c[_0x5468f5(0x79b)][_0x5468f5(0x95b)])_0x4f74d1+=0x1;return _0x4f74d1;},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x36b)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x8e0)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x8e0)]=function(){const _0x6f4c75=_0x534c3a;if(SceneManager[_0x6f4c75(0x484)]()){Scene_Message['prototype'][_0x6f4c75(0x8e0)][_0x6f4c75(0x63a)](this);if(this[_0x6f4c75(0x6bf)]){if(_0x6f4c75(0x6bb)!==_0x6f4c75(0x6bb)){function _0x26e42a(){const _0x35eba5=_0x6f4c75;return _0x5248e1[_0x35eba5(0x53c)][_0x35eba5(0x943)][_0x35eba5(0x63a)](this);}}else this[_0x6f4c75(0x6bf)][_0x6f4c75(0x59d)]();}if(BattleManager[_0x6f4c75(0x184)]){if(_0x6f4c75(0x898)===_0x6f4c75(0x15b)){function _0x157260(){return _0x578dd5(_0x2193ad['$1']);}}else BattleManager[_0x6f4c75(0x383)]();}}else VisuMZ[_0x6f4c75(0x99e)]['Scene_Battle_start'][_0x6f4c75(0x63a)](this);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x298)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x1c9)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x1c9)]=function(){const _0x522580=_0x534c3a;if(SceneManager[_0x522580(0x466)]()){if(_0x522580(0x619)!=='SGZkE')Scene_Message[_0x522580(0x53c)]['stop'][_0x522580(0x63a)](this);else{function _0x4472ee(){const _0xe092b1=_0x522580;this[_0xe092b1(0x456)]=_0x1fd7f8[_0xe092b1(0x456)],this['height']=_0x1d3e08['height'];const _0x157790=_0x305fa7['min'](0x1,this[_0xe092b1(0x456)]/this[_0xe092b1(0xa72)][_0xe092b1(0x456)]),_0x501765=_0x4c3625[_0xe092b1(0x623)](0x1,this[_0xe092b1(0x363)]/this[_0xe092b1(0xa72)]['height']),_0x283b60=_0x3bd18a[_0xe092b1(0x9a7)](_0x157790,_0x501765);this[_0xe092b1(0x43e)]['x']=_0x283b60,this[_0xe092b1(0x43e)]['y']=_0x283b60,this['x']=(_0x2ebfd7[_0xe092b1(0x456)]-this['width'])/0x2,this['y']=_0x2f86fe['height']-this[_0xe092b1(0x363)];}}}else{if(_0x522580(0x140)!=='gMziL'){function _0x4a6876(){const _0x218c6d=_0x522580;_0x2f87ce[_0x218c6d(0x3ba)](this['opponentsUnit']()['trueRandomTarget']());}}else VisuMZ[_0x522580(0x99e)][_0x522580(0x298)][_0x522580(0x63a)](this);}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x9d2)]=Scene_Battle[_0x534c3a(0x53c)]['terminate'],Scene_Battle['prototype']['terminate']=function(){const _0x3a2d98=_0x534c3a;SceneManager[_0x3a2d98(0x466)]()?Scene_Message[_0x3a2d98(0x53c)][_0x3a2d98(0x545)][_0x3a2d98(0x63a)](this):VisuMZ[_0x3a2d98(0x99e)]['Scene_Battle_terminate']['call'](this);},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x7ae)]=function(){const _0x33fa11=_0x534c3a;if(ConfigManager['uiMenuStyle']&&ConfigManager[_0x33fa11(0x35a)]!==undefined)return ConfigManager[_0x33fa11(0x35a)];else{if(this[_0x33fa11(0x1d5)]()===_0x33fa11(0x4a4)){if(_0x33fa11(0x991)===_0x33fa11(0x482)){function _0x34b020(){const _0x23344b=_0x33fa11;if(!this[_0x23344b(0x679)][_0x23344b(0x98a)]())return;while(this[_0x23344b(0x679)][_0x23344b(0x98a)]()){this['_battler'][_0x23344b(0x1b9)]()&&this['createDamageSprite']();}this[_0x23344b(0x679)][_0x23344b(0x391)](),this[_0x23344b(0x679)][_0x23344b(0xef)]();}}else return![];}else{return Scene_Message[_0x33fa11(0x53c)][_0x33fa11(0x7ae)]['call'](this);;}}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x8a1)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x5a8)],Scene_Battle['prototype'][_0x534c3a(0x5a8)]=function(){const _0xb20aa8=_0x534c3a;this[_0xb20aa8(0x675)](),VisuMZ[_0xb20aa8(0x99e)][_0xb20aa8(0x8a1)]['call'](this),this[_0xb20aa8(0x5e8)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x5c7)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x49d)],Scene_Battle['prototype']['createCancelButton']=function(){const _0x408a95=_0x534c3a;VisuMZ[_0x408a95(0x99e)]['Scene_Battle_createCancelButton'][_0x408a95(0x63a)](this),this[_0x408a95(0x1d5)]()==='border'&&this['repositionCancelButtonBorderStyle']();},Scene_Battle['prototype'][_0x534c3a(0x168)]=function(_0x21db5e){const _0x516182=_0x534c3a;if(_0x21db5e)this[_0x516182(0x450)]['x']=(Graphics[_0x516182(0x456)]-Graphics[_0x516182(0x29c)])/0x2,this[_0x516182(0x450)]['y']=(Graphics[_0x516182(0x363)]-Graphics['boxHeight'])/0x2;else{if(_0x516182(0x839)===_0x516182(0x839))this['_windowLayer']['x']=Graphics['width']*0xa,this['_windowLayer']['y']=Graphics['height']*0xa;else{function _0x4b40b0(){const _0x294622=_0x516182;_0x28369d[_0x294622(0x99e)][_0x294622(0x5c8)][_0x294622(0x63a)](this),this[_0x294622(0x39f)]();}}}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x791)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x14e)],Scene_Battle['prototype'][_0x534c3a(0x14e)]=function(){const _0x3ffa47=_0x534c3a,_0x4f444f=BattleManager[_0x3ffa47(0x4c5)]();VisuMZ[_0x3ffa47(0x99e)]['Scene_Battle_selectNextCommand'][_0x3ffa47(0x63a)](this);if(_0x4f444f){if(_0x4f444f===BattleManager['actor']())return;if(_0x4f444f===BattleManager[_0x3ffa47(0x90c)])return;if(_0x4f444f['battler']())_0x4f444f[_0x3ffa47(0x7c4)]()[_0x3ffa47(0x85e)]();}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x55b)]=Scene_Battle['prototype'][_0x534c3a(0x154)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x154)]=function(){const _0x2e3964=_0x534c3a,_0x1bef6b=BattleManager[_0x2e3964(0x4c5)]();if(_0x1bef6b&&_0x1bef6b[_0x2e3964(0x7c4)])_0x1bef6b[_0x2e3964(0x7c4)]()[_0x2e3964(0x85e)]();VisuMZ[_0x2e3964(0x99e)][_0x2e3964(0x55b)][_0x2e3964(0x63a)](this);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x250)]=Scene_Battle[_0x534c3a(0x53c)]['logWindowRect'],Scene_Battle[_0x534c3a(0x53c)]['logWindowRect']=function(){const _0x558dac=_0x534c3a;if(VisuMZ[_0x558dac(0x99e)]['Settings'][_0x558dac(0xa01)]['BattleLogRectJS']){if(_0x558dac(0x548)!==_0x558dac(0x548)){function _0x1496ee(){const _0x16df59=_0x558dac;return _0x417c11['CoreEngine']['Settings']['QoL'][_0x16df59(0x3a2)];}}else return VisuMZ[_0x558dac(0x99e)]['Settings'][_0x558dac(0xa01)][_0x558dac(0x8cc)][_0x558dac(0x63a)](this);}return VisuMZ[_0x558dac(0x99e)][_0x558dac(0x250)][_0x558dac(0x63a)](this);},VisuMZ['BattleCore'][_0x534c3a(0x5c8)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x4ed)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x4ed)]=function(){const _0x582975=_0x534c3a;VisuMZ[_0x582975(0x99e)][_0x582975(0x5c8)][_0x582975(0x63a)](this),this[_0x582975(0x39f)]();},Scene_Battle['prototype']['createPartyCommandWindowBattleCore']=function(){const _0x45cc2a=_0x534c3a,_0xc4b30d=this['_partyCommandWindow'];_0xc4b30d['setHandler'](_0x45cc2a(0x764),this[_0x45cc2a(0xa3b)]['bind'](this)),_0xc4b30d[_0x45cc2a(0x587)](_0x45cc2a(0x8a6),this[_0x45cc2a(0x344)][_0x45cc2a(0x15a)](this));const _0x87ab20=this[_0x45cc2a(0x1d5)]();switch(_0x87ab20){case'xp':case _0x45cc2a(0x1ab):return this['_partyCommandWindow'][_0x45cc2a(0x7f0)](0x1);break;}},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0xa3b)]=function(){const _0x35129e=_0x534c3a;BattleManager[_0x35129e(0x253)]=!![],$gameParty[_0x35129e(0x230)](),this[_0x35129e(0x14e)](),BattleManager[_0x35129e(0x1af)]()&&(BattleManager[_0x35129e(0x10e)]=![]);},Scene_Battle['prototype'][_0x534c3a(0x344)]=function(){const _0x2dcf06=_0x534c3a;this[_0x2dcf06(0x483)]()?(this['_callSceneOptions']=!![],this[_0x2dcf06(0xa5c)][_0x2dcf06(0x3ba)](_0x2dcf06(0x87c),VisuMZ[_0x2dcf06(0x99e)][_0x2dcf06(0x795)][_0x2dcf06(0x5d9)][_0x2dcf06(0x1d1)])):this[_0x2dcf06(0x430)]();},Scene_Battle['prototype'][_0x534c3a(0x483)]=function(){const _0x99519e=_0x534c3a;return BattleManager[_0x99519e(0x1a9)]();},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x430)]=function(){const _0x21d06e=_0x534c3a;this[_0x21d06e(0xa30)]=![],this[_0x21d06e(0x6bf)][_0x21d06e(0x59d)](),this[_0x21d06e(0x450)][_0x21d06e(0x94d)]=![];if(BattleManager[_0x21d06e(0x2a6)]())($dataSystem[_0x21d06e(0x37c)]||$dataSystem['battleback2Name'])&&SceneManager[_0x21d06e(0xa4a)]();else($gameMap['battleback1Name']()||$gameMap['battleback2Name']())&&SceneManager[_0x21d06e(0xa4a)]();SceneManager['push'](Scene_Options);if(BattleManager['isTpb']()){if('VWprz'===_0x21d06e(0x34c))BattleManager[_0x21d06e(0x184)]=BattleManager[_0x21d06e(0x4c5)]();else{function _0x49914b(){const _0x168eea=_0x21d06e;this[_0x168eea(0xa30)]=!![],this[_0x168eea(0xa5c)][_0x168eea(0x3ba)](_0x168eea(0x87c),_0x391685[_0x168eea(0x99e)][_0x168eea(0x795)]['PartyCmd'][_0x168eea(0x1d1)]);}}}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0xa99)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x1ca)],Scene_Battle[_0x534c3a(0x53c)]['updateBattleProcess']=function(){const _0x17b1f2=_0x534c3a;VisuMZ[_0x17b1f2(0x99e)][_0x17b1f2(0xa99)][_0x17b1f2(0x63a)](this);if(this[_0x17b1f2(0xa30)]&&!BattleManager[_0x17b1f2(0x90c)])this[_0x17b1f2(0x430)]();},Scene_Battle['prototype'][_0x534c3a(0x5e8)]=function(){const _0x4cc5f8=_0x534c3a,_0x323147=this[_0x4cc5f8(0x261)]();this[_0x4cc5f8(0xf5)]=new Window_AutoBattleCancel(_0x323147),this[_0x4cc5f8(0xf5)][_0x4cc5f8(0x1d9)](),this['addChild'](this['_autoBattleWindow']);},Scene_Battle[_0x534c3a(0x53c)]['autoBattleWindowRect']=function(){const _0x27c2fe=_0x534c3a;return VisuMZ[_0x27c2fe(0x99e)][_0x27c2fe(0x795)][_0x27c2fe(0x52b)][_0x27c2fe(0x435)][_0x27c2fe(0x63a)](this);},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x26a)]=function(){const _0x268a17=_0x534c3a;return VisuMZ[_0x268a17(0x99e)][_0x268a17(0x795)][_0x268a17(0x5d9)]['DisablePartyCmd'];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x7de)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x6fc)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x6fc)]=function(){const _0x86809=_0x534c3a;if(this[_0x86809(0x26a)]()){if(_0x86809(0x2d2)!==_0x86809(0x19f))this[_0x86809(0x9f8)]();else{function _0x557ca9(){const _0xb7e625=_0x86809;if(this['_defeatedEnemies']===_0x1ec89c)this[_0xb7e625(0x5ef)]();return this[_0xb7e625(0x60c)];}}}else{if(_0x86809(0x304)!==_0x86809(0x63e))VisuMZ[_0x86809(0x99e)][_0x86809(0x7de)][_0x86809(0x63a)](this);else{function _0x2c43de(){const _0x3e201c=_0x86809;this[_0x3e201c(0xda)]();}}}},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x9f8)]=function(){const _0x4a7439=_0x534c3a;if(BattleManager[_0x4a7439(0x5c1)]())this['selectNextCommand']();else BattleManager[_0x4a7439(0x1af)]()&&VisuMZ['BattleCore'][_0x4a7439(0x7de)][_0x4a7439(0x63a)](this);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x5a3)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x104)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x104)]=function(){const _0x5dcdcb=_0x534c3a;if(BattleManager[_0x5dcdcb(0x1af)]()){if(_0x5dcdcb(0x2e7)!==_0x5dcdcb(0x2e7)){function _0x31c1c5(){const _0x15a87d=_0x5dcdcb;if(this[_0x15a87d(0x107)]()>=0x1)return!![];return this['svBattlerData']()[_0x15a87d(0x80d)];}}else this[_0x5dcdcb(0x259)]();}else VisuMZ[_0x5dcdcb(0x99e)][_0x5dcdcb(0x5a3)][_0x5dcdcb(0x63a)](this);},VisuMZ[_0x534c3a(0x99e)]['Scene_Battle_createActorCommandWindow']=Scene_Battle['prototype'][_0x534c3a(0x82d)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x82d)]=function(){const _0x27cf15=_0x534c3a;VisuMZ[_0x27cf15(0x99e)][_0x27cf15(0x883)]['call'](this),this[_0x27cf15(0x569)]();},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x569)]=function(){const _0x489a6b=_0x534c3a,_0x31d277=this[_0x489a6b(0x223)];_0x31d277[_0x489a6b(0x587)]('escape',this[_0x489a6b(0x4b9)]['bind'](this)),_0x31d277[_0x489a6b(0x587)](_0x489a6b(0x764),this[_0x489a6b(0x578)]['bind'](this)),_0x31d277['setHandler'](_0x489a6b(0x167),this['actorCommandSingleSkill'][_0x489a6b(0x15a)](this));if(BattleManager[_0x489a6b(0x1af)]()){if(_0x489a6b(0x242)==='RMyeA'){if(this[_0x489a6b(0x26a)]())delete _0x31d277[_0x489a6b(0x369)][_0x489a6b(0x366)];else{if(_0x489a6b(0x956)===_0x489a6b(0x956))_0x31d277[_0x489a6b(0x587)](_0x489a6b(0x366),this['actorCommandCancelTPB'][_0x489a6b(0x15a)](this));else{function _0x12a384(){const _0x31da0f=_0x489a6b;_0x47e496=_0x31da0f(0xd6);}}}}else{function _0x427331(){_0x1e2fbf=_0x410497(_0x3c5c31['$1']),_0x1541e3=_0x283aef(_0x47b1fa['$2']);}}}},Scene_Battle[_0x534c3a(0x53c)]['actorCommandEscape']=function(){const _0x530bec=_0x534c3a;this[_0x530bec(0x687)]();},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x578)]=function(){const _0x5de5bb=_0x534c3a;BattleManager[_0x5de5bb(0x4c5)]()[_0x5de5bb(0xa1c)](),BattleManager[_0x5de5bb(0x96c)](),BattleManager[_0x5de5bb(0x27d)](),this[_0x5de5bb(0x2fa)]();},Scene_Battle['prototype'][_0x534c3a(0x7cf)]=function(){const _0x4e69c8=_0x534c3a,_0x4a6ea2=BattleManager[_0x4e69c8(0x516)]();_0x4a6ea2['setSkill'](this[_0x4e69c8(0x223)][_0x4e69c8(0x9bf)]()),this[_0x4e69c8(0x800)]();},Scene_Battle['prototype'][_0x534c3a(0x24c)]=function(){const _0x4d5d42=_0x534c3a;this[_0x4d5d42(0x244)]['setup'](),this['_actorCommandWindow'][_0x4d5d42(0x232)]();},VisuMZ[_0x534c3a(0x99e)]['Scene_Battle_createHelpWindow']=Scene_Battle['prototype'][_0x534c3a(0x6dd)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x6dd)]=function(){const _0x4b05c8=_0x534c3a;VisuMZ[_0x4b05c8(0x99e)][_0x4b05c8(0x5b4)][_0x4b05c8(0x63a)](this),this[_0x4b05c8(0x29b)]();},Scene_Battle['prototype'][_0x534c3a(0x29b)]=function(){const _0x355e9f=_0x534c3a;this[_0x355e9f(0x223)]['setHelpWindow'](this['_helpWindow']),this[_0x355e9f(0x244)][_0x355e9f(0x1e3)](this[_0x355e9f(0x4cd)]);},Scene_Battle['prototype'][_0x534c3a(0x1d5)]=function(){const _0x3ef15e=_0x534c3a;if($gameTemp['_forcedBattleLayout']!==undefined){if(_0x3ef15e(0x7d0)!==_0x3ef15e(0x779))return $gameTemp[_0x3ef15e(0xa47)];else{function _0x342857(){const _0x41f191=_0x3ef15e;this[_0x41f191(0x7e2)]=![],this[_0x41f191(0x9b7)](),this[_0x41f191(0x62a)]();}}}if(this[_0x3ef15e(0x564)])return this['_battleLayoutStyle'];return this['_battleLayoutStyle']=VisuMZ[_0x3ef15e(0x99e)][_0x3ef15e(0x795)][_0x3ef15e(0x27b)][_0x3ef15e(0x1e0)]['toLowerCase']()[_0x3ef15e(0x5a9)](),this[_0x3ef15e(0x564)]===_0x3ef15e(0x935)&&!Imported[_0x3ef15e(0x7fa)]&&(this[_0x3ef15e(0x564)]=_0x3ef15e(0x7a2)),this[_0x3ef15e(0x564)];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0xa2a)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x916)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x916)]=function(){const _0x413d9a=_0x534c3a,_0x343204=this['battleLayoutStyle']();switch(_0x343204){case _0x413d9a(0xaa4):return this['calcWindowHeight'](Math[_0x413d9a(0x9a7)](0x1,$gameParty[_0x413d9a(0x8ac)]()),!![]);break;default:return VisuMZ[_0x413d9a(0x99e)][_0x413d9a(0xa2a)][_0x413d9a(0x63a)](this);break;}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x1f4)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0xa52)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0xa52)]=function(){const _0x289e43=_0x534c3a,_0x51de12=this['battleLayoutStyle']();switch(_0x51de12){case _0x289e43(0x4a4):return this['helpWindowRectBorderStyle']();break;case'default':case _0x289e43(0xaa4):case'xp':case _0x289e43(0x1ab):default:return VisuMZ[_0x289e43(0x99e)][_0x289e43(0x1f4)][_0x289e43(0x63a)](this);break;}},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x1fe)]=function(){const _0x2b347c=_0x534c3a,_0x4c15be=this['battleLayoutStyle']();switch(_0x4c15be){case'xp':case _0x2b347c(0x1ab):return this[_0x2b347c(0x59b)]();break;case _0x2b347c(0x4a4):return this['statusWindowRectBorderStyle']();break;case _0x2b347c(0x7a2):case _0x2b347c(0xaa4):default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x4f9)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x944)],Scene_Battle[_0x534c3a(0x53c)]['partyCommandWindowRect']=function(){const _0x4b23ae=_0x534c3a,_0x29bec0=this[_0x4b23ae(0x1d5)]();switch(_0x29bec0){case'xp':case'portrait':return this[_0x4b23ae(0x9b1)]();break;case _0x4b23ae(0x4a4):return this[_0x4b23ae(0x532)]();case _0x4b23ae(0x7a2):case'list':default:return this[_0x4b23ae(0x39c)]();break;}},Scene_Battle['prototype'][_0x534c3a(0x39c)]=function(){const _0x3780d4=_0x534c3a,_0x40a527=VisuMZ['BattleCore']['Settings'][_0x3780d4(0x27b)],_0x43c4fd=_0x40a527['CommandWidth']||0xc0,_0x3c404f=this[_0x3780d4(0x916)](),_0x1d8ea5=this[_0x3780d4(0x7ae)]()?Graphics[_0x3780d4(0x29c)]-_0x43c4fd:0x0,_0x37607f=Graphics[_0x3780d4(0x29d)]-_0x3c404f;return new Rectangle(_0x1d8ea5,_0x37607f,_0x43c4fd,_0x3c404f);},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x855)]=function(){const _0x56cf8c=_0x534c3a;return this[_0x56cf8c(0x944)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x4d8)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x958)],Scene_Battle['prototype'][_0x534c3a(0x958)]=function(){const _0x1281b5=_0x534c3a,_0x246efd=this['battleLayoutStyle']();switch(_0x246efd){case'xp':case'portrait':case _0x1281b5(0x4a4):break;case _0x1281b5(0x7a2):case _0x1281b5(0xaa4):default:VisuMZ['BattleCore'][_0x1281b5(0x4d8)][_0x1281b5(0x63a)](this);break;}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x8e4)]=Scene_Battle['prototype'][_0x534c3a(0x312)],Scene_Battle['prototype'][_0x534c3a(0x312)]=function(){const _0x48a1b3=_0x534c3a;VisuMZ[_0x48a1b3(0x99e)]['Scene_Battle_startActorSelection'][_0x48a1b3(0x63a)](this),this[_0x48a1b3(0xa51)]();},VisuMZ['BattleCore']['Scene_Battle_startEnemySelection']=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x8a7)],Scene_Battle['prototype']['startEnemySelection']=function(){const _0x388072=_0x534c3a;VisuMZ[_0x388072(0x99e)][_0x388072(0x32a)][_0x388072(0x63a)](this),this['_enemyWindow'][_0x388072(0x743)](),this[_0x388072(0xa51)]();},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0xa51)]=function(){const _0x3291ad=_0x534c3a,_0x2e27fa=this[_0x3291ad(0x1d5)]();if(['xp',_0x3291ad(0x1ab),'border']['includes'](_0x2e27fa)){if(_0x3291ad(0xa2e)===_0x3291ad(0xa2e))this[_0x3291ad(0x223)][_0x3291ad(0x232)]();else{function _0x1c6bce(){const _0x378e80=_0x3291ad;if(!_0x5e7186[_0x378e80(0xa8a)]())return;const _0x428491=_0x29af9b[_0x378e80(0xa1d)]();_0x428491[_0x378e80(0x387)](_0x378e80(0x2d4));}}}(_0x2e27fa===_0x3291ad(0x4a4)||this[_0x3291ad(0x264)]())&&(this[_0x3291ad(0x4ee)][_0x3291ad(0x232)](),this[_0x3291ad(0x998)]['close']());},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x4a1)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x349)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x349)]=function(){const _0x295bb8=_0x534c3a;VisuMZ['BattleCore'][_0x295bb8(0x4a1)]['call'](this),this[_0x295bb8(0x5d5)]();},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0xa3d)]=function(){const _0x2ee56a=_0x534c3a;return['attack',_0x2ee56a(0x7d6),_0x2ee56a(0x167)][_0x2ee56a(0x96f)](this[_0x2ee56a(0x223)][_0x2ee56a(0x199)]());},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x5d0)]=Scene_Battle[_0x534c3a(0x53c)]['onActorCancel'],Scene_Battle[_0x534c3a(0x53c)]['onActorCancel']=function(){const _0x25c16c=_0x534c3a;if(this[_0x25c16c(0xa3d)]())this[_0x25c16c(0x186)]['show'](),this[_0x25c16c(0x8ae)][_0x25c16c(0x1d9)](),this[_0x25c16c(0x223)]['activate']();else{if(_0x25c16c(0xa5a)===_0x25c16c(0x6d5)){function _0x4bb8c2(){return!![];}}else VisuMZ[_0x25c16c(0x99e)][_0x25c16c(0x5d0)][_0x25c16c(0x63a)](this);}this[_0x25c16c(0x617)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x6e1)]=Scene_Battle['prototype'][_0x534c3a(0x506)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x506)]=function(){const _0xb3a6a3=_0x534c3a;VisuMZ[_0xb3a6a3(0x99e)]['Scene_Battle_onEnemyOk'][_0xb3a6a3(0x63a)](this),this[_0xb3a6a3(0x5d5)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x26f)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x65d)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x65d)]=function(){const _0x4e2929=_0x534c3a;if(this[_0x4e2929(0xa3d)]())this['_statusWindow'][_0x4e2929(0x97d)](),this[_0x4e2929(0xa6f)][_0x4e2929(0x1d9)](),this[_0x4e2929(0x223)][_0x4e2929(0x4e3)]();else{if(_0x4e2929(0x4eb)!==_0x4e2929(0x4eb)){function _0x347f73(){this['_cancelButton']['x']=0x8;}}else VisuMZ[_0x4e2929(0x99e)][_0x4e2929(0x26f)][_0x4e2929(0x63a)](this);}this['cancelTargetSelectionVisibility']();},Scene_Battle[_0x534c3a(0x53c)]['okTargetSelectionVisibility']=function(){const _0x1ca46d=_0x534c3a,_0x24e1be=this[_0x1ca46d(0x1d5)]();if(_0x24e1be===_0x1ca46d(0x4a4)||this[_0x1ca46d(0x264)]()){this[_0x1ca46d(0x4ee)]['open']();if(this['_skillWindow'][_0x1ca46d(0x433)]){if('awFjm'===_0x1ca46d(0x465)){function _0x58c7bb(){this['_canLose']=!![];}}else this[_0x1ca46d(0x4ee)][_0x1ca46d(0x97d)]();}this[_0x1ca46d(0x998)]['open']();if(this[_0x1ca46d(0x998)]['active']){if('AGGoz'===_0x1ca46d(0x1d2))this[_0x1ca46d(0x998)][_0x1ca46d(0x97d)]();else{function _0x412554(){const _0xfffa0=_0x1ca46d;return _0x39349b[_0xfffa0(0x7d7)]();}}}}},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x617)]=function(){const _0x20ffda=_0x534c3a,_0x544483=this['battleLayoutStyle']();['xp',_0x20ffda(0x1ab),_0x20ffda(0x4a4)][_0x20ffda(0x96f)](_0x544483)&&this[_0x20ffda(0x223)][_0x20ffda(0x4d4)](),this[_0x20ffda(0x5d5)]();},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x19c)]=function(){const _0x1a1e34=_0x534c3a,_0x2b214d=VisuMZ[_0x1a1e34(0x99e)]['Settings'][_0x1a1e34(0x27b)],_0x1d6d5f=Window_BattleStatus['prototype'][_0x1a1e34(0x2cd)](),_0x21d6a7=Graphics[_0x1a1e34(0x29c)]-(_0x2b214d[_0x1a1e34(0x584)]||0xc0),_0x3db1ed=this[_0x1a1e34(0x916)]()+_0x1d6d5f,_0x501fd3=this[_0x1a1e34(0x7ae)]()?0x0:Graphics[_0x1a1e34(0x29c)]-_0x21d6a7,_0x367205=Graphics[_0x1a1e34(0x29d)]-_0x3db1ed+_0x1d6d5f;return new Rectangle(_0x501fd3,_0x367205,_0x21d6a7,_0x3db1ed);},Scene_Battle[_0x534c3a(0x53c)]['statusWindowRectXPStyle']=function(){const _0x4cacc9=_0x534c3a,_0x50b1ee=Window_BattleStatus['prototype'][_0x4cacc9(0x2cd)](),_0x12d82=Graphics['boxWidth'],_0x256338=this[_0x4cacc9(0x916)]()+_0x50b1ee,_0x206e25=0x0,_0xe1516c=Graphics[_0x4cacc9(0x29d)]-_0x256338+_0x50b1ee;return new Rectangle(_0x206e25,_0xe1516c,_0x12d82,_0x256338);},Scene_Battle[_0x534c3a(0x53c)]['partyCommandWindowRectXPStyle']=function(){const _0x1dfb19=_0x534c3a,_0x36fcb1=Graphics['boxWidth']/0x2,_0x5a6c10=this['calcWindowHeight'](VisuMZ[_0x1dfb19(0x99e)]['Settings'][_0x1dfb19(0x27b)][_0x1dfb19(0x6b5)],!![]),_0x29deb3=Math[_0x1dfb19(0x8d4)]((Graphics[_0x1dfb19(0x29c)]-_0x36fcb1)/0x2),_0x5dd070=Graphics[_0x1dfb19(0x29d)]-_0x5a6c10-this[_0x1dfb19(0x59b)]()[_0x1dfb19(0x363)];return new Rectangle(_0x29deb3,_0x5dd070,_0x36fcb1,_0x5a6c10);},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x780)]=function(){const _0x4e3f8b=_0x534c3a,_0x247210=Graphics[_0x4e3f8b(0x456)],_0x335aa5=Math[_0x4e3f8b(0x8d4)]((Graphics[_0x4e3f8b(0x29c)]-_0x247210)/0x2),_0xaca400=this[_0x4e3f8b(0x7e9)](),_0x2f2b4e=(Graphics[_0x4e3f8b(0x363)]-Graphics[_0x4e3f8b(0x29d)])/-0x2;return new Rectangle(_0x335aa5,_0x2f2b4e,_0x247210,_0xaca400);},Scene_Battle[_0x534c3a(0x53c)]['statusWindowRectBorderStyle']=function(){const _0x2d457d=_0x534c3a,_0x397ac4=Graphics['width'],_0x2abdb8=Math[_0x2d457d(0x8d4)]((Graphics['boxWidth']-_0x397ac4)/0x2),_0x357aac=this[_0x2d457d(0x11c)](0x4,!![]),_0x4b6bd2=Graphics[_0x2d457d(0x29d)]-_0x357aac+(Graphics[_0x2d457d(0x363)]-Graphics[_0x2d457d(0x29d)])/0x2;return new Rectangle(_0x2abdb8,_0x4b6bd2,_0x397ac4,_0x357aac);},Scene_Battle[_0x534c3a(0x53c)]['partyCommandWindowRectBorderStyle']=function(){const _0x11347a=_0x534c3a,_0x50399e=Math[_0x11347a(0x922)](Graphics[_0x11347a(0x456)]/0x3),_0x1a49cd=this['isRightInputMode']()?(Graphics[_0x11347a(0x456)]+Graphics[_0x11347a(0x29c)])/0x2-_0x50399e:(Graphics[_0x11347a(0x456)]-Graphics[_0x11347a(0x29c)])/-0x2,_0x512451=this[_0x11347a(0x780)](),_0x332c77=_0x512451['y']+_0x512451[_0x11347a(0x363)],_0x3a202c=this[_0x11347a(0x18c)](),_0x45634a=_0x3a202c['y']-_0x332c77;return new Rectangle(_0x1a49cd,_0x332c77,_0x50399e,_0x45634a);},Scene_Battle[_0x534c3a(0x53c)]['skillItemWindowRectBorderStyle']=function(){const _0xb7f8eb=_0x534c3a,_0x17e97b=Math[_0xb7f8eb(0x8b7)](Graphics[_0xb7f8eb(0x456)]/0x3),_0x443ef7=Math[_0xb7f8eb(0x8d4)]((Graphics['boxWidth']-_0x17e97b)/0x2),_0x20e9bb=this[_0xb7f8eb(0x532)](),_0x3978ac=_0x20e9bb['y'],_0x587183=_0x20e9bb[_0xb7f8eb(0x363)];return new Rectangle(_0x443ef7,_0x3978ac,_0x17e97b,_0x587183);},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x9a1)]=function(){const _0x1eb832=_0x534c3a;this['_cancelButton']['y']=this['_helpWindow']['y']+this['_helpWindow'][_0x1eb832(0x363)];if(this['isRightInputMode']()){if(this[_0x1eb832(0x1d5)]()==='border'){if(_0x1eb832(0x282)==='sLCZd')this[_0x1eb832(0x6ee)]['x']=0x8;else{function _0x4f7b0c(){const _0x2028a5=_0x1eb832;if(!this[_0x2028a5(0x679)])return;this[_0x2028a5(0x205)]=this[_0x2028a5(0x679)][_0x2028a5(0x454)]();}}}else this[_0x1eb832(0x6ee)]['x']=-this[_0x1eb832(0x6ee)][_0x1eb832(0x456)]-0x4;}else{if(_0x1eb832(0x479)===_0x1eb832(0x710)){function _0x59c091(){const _0x5635ac=_0x1eb832;this[_0x5635ac(0x26a)]()?this[_0x5635ac(0x9f8)]():_0x4dd926['BattleCore'][_0x5635ac(0x7de)][_0x5635ac(0x63a)](this);}}else this['_cancelButton']['x']=Graphics['width']-(Graphics[_0x1eb832(0x456)]-Graphics[_0x1eb832(0x29c)])/0x2-this['_cancelButton'][_0x1eb832(0x456)]-0x4;}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x975)]=Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x478)],Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x478)]=function(){const _0x118236=_0x534c3a;if(this[_0x118236(0x1d5)]()===_0x118236(0x4a4))return this[_0x118236(0x766)]();else{if(this['isSkillItemWindowsMiddle']())return this[_0x118236(0x42f)]();else{if(_0x118236(0x802)===_0x118236(0x802))return VisuMZ[_0x118236(0x99e)][_0x118236(0x975)][_0x118236(0x63a)](this);else{function _0x332211(){const _0x33ec4b=_0x118236,_0x3c53f7=this[_0x33ec4b(0x754)](this['_distortionSprite']);this[_0x33ec4b(0x5dc)](this[_0x33ec4b(0x5d7)],_0x3c53f7),this['updateShadowVisibility']();}}}}},VisuMZ[_0x534c3a(0x99e)]['Scene_Battle_itemWindowRect']=Scene_Battle['prototype'][_0x534c3a(0x575)],Scene_Battle[_0x534c3a(0x53c)]['itemWindowRect']=function(){const _0xf11d1f=_0x534c3a;if(this[_0xf11d1f(0x1d5)]()===_0xf11d1f(0x4a4)){if('xUoAr'===_0xf11d1f(0xa10))return this[_0xf11d1f(0x766)]();else{function _0x43565a(){const _0x5b6d27=_0xf11d1f;_0x4ef451=_0x408b7b[_0x5b6d27(0x193)]((_0x42311f,_0x2e3eb8,_0x426553)=>_0x426553['indexOf'](_0x42311f)===_0x2e3eb8),_0x27ad60[_0x5b6d27(0xa8a)]()&&_0x3dd801[_0x5b6d27(0xa9a)]()&&(_0x259acb=!_0x4677a2),_0x58260b['BattleCore']['Game_Temp_requestAnimation'][_0x5b6d27(0x63a)](this,_0x1ada03,_0x5c98f4,_0x1b02f3),_0x3dc742['isSceneBattle']()&&_0x3b75f2[_0x5b6d27(0x6bf)][_0x5b6d27(0x20e)]();}}}else{if(this[_0xf11d1f(0x264)]())return this[_0xf11d1f(0x42f)]();else{if(_0xf11d1f(0x42b)===_0xf11d1f(0x89a)){function _0x1f92a6(){const _0x816b80=_0xf11d1f;_0x289f40['motionIdle']=_0x4cc631(_0x5e11a2['$1'])['toLowerCase']()[_0x816b80(0x5a9)]();}}else return VisuMZ[_0xf11d1f(0x99e)][_0xf11d1f(0x25e)][_0xf11d1f(0x63a)](this);}}},Scene_Battle['prototype'][_0x534c3a(0x264)]=function(){const _0x1d19e3=_0x534c3a;return VisuMZ[_0x1d19e3(0x99e)][_0x1d19e3(0x795)][_0x1d19e3(0x27b)]['SkillItemMiddleLayout'];},Scene_Battle['prototype'][_0x534c3a(0x42f)]=function(){const _0x18b376=_0x534c3a,_0x22d779=Sprite_Button['prototype'][_0x18b376(0x5ca)]()*0x2+0x4;let _0x22e44c=Graphics[_0x18b376(0x29c)]-_0x22d779;Imported[_0x18b376(0x9fc)]&&SceneManager[_0x18b376(0x1b3)]()&&(_0x22e44c+=_0x22d779);const _0x154622=this[_0x18b376(0x32b)](),_0x3fd030=Graphics['boxHeight']-_0x154622-this[_0x18b376(0x1fe)]()[_0x18b376(0x363)]+Window_BattleStatus[_0x18b376(0x53c)][_0x18b376(0x2cd)](),_0x587e2c=0x0;return new Rectangle(_0x587e2c,_0x154622,_0x22e44c,_0x3fd030);},Scene_Battle[_0x534c3a(0x53c)][_0x534c3a(0x675)]=function(){const _0x500eae=_0x534c3a;if(!VisuMZ['BattleCore'][_0x500eae(0x795)]['Enemy'][_0x500eae(0xa41)])return;this[_0x500eae(0x1c1)]=new Sprite(),this['_enemyNameContainer']['x']=this[_0x500eae(0x450)]['x'],this[_0x500eae(0x1c1)]['y']=this[_0x500eae(0x450)]['y'];const _0x5b75f9=this['children'][_0x500eae(0xaa8)](this['_windowLayer']);this[_0x500eae(0x5dc)](this['_enemyNameContainer'],_0x5b75f9);for(let _0x40d09a=0x0;_0x40d09a<0x8;_0x40d09a++){const _0x4ef104=new Window_EnemyName(_0x40d09a);this[_0x500eae(0x1c1)][_0x500eae(0x2cf)](_0x4ef104);}},Sprite_Battler['_motionSpeed']=VisuMZ[_0x534c3a(0x99e)]['Settings'][_0x534c3a(0x2a0)][_0x534c3a(0xa8f)],VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x46b)]=Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x3ca)],Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x3ca)]=function(){const _0x3525c5=_0x534c3a;VisuMZ[_0x3525c5(0x99e)]['Sprite_Battler_initMembers'][_0x3525c5(0x63a)](this),this['initMembersBattleCore']();if(this[_0x3525c5(0x1d7)]===Sprite_Enemy)this[_0x3525c5(0x8cf)]();this['createDistortionSprite']();},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x420)]=function(){const _0x14be9c=_0x534c3a;this[_0x14be9c(0x674)]=0x0,this[_0x14be9c(0x2df)]=0x0,this[_0x14be9c(0x67b)]=0x0,this[_0x14be9c(0x3a6)]=0x0,this[_0x14be9c(0x72e)]=0x0,this[_0x14be9c(0x11b)]=0x0,this[_0x14be9c(0x42e)]=_0x14be9c(0x6a4),this['_jumpHeight']=0x0,this[_0x14be9c(0x1be)]=0x0,this[_0x14be9c(0x970)]=0x0,this[_0x14be9c(0x468)]=0x0,this[_0x14be9c(0x911)]=0xff,this[_0x14be9c(0x660)]=0x0,this[_0x14be9c(0x8c8)]=0x0,this[_0x14be9c(0x543)]=_0x14be9c(0x6a4),this[_0x14be9c(0x728)]=0x0,this[_0x14be9c(0x86e)]=0x0,this[_0x14be9c(0x6d6)]=0x0,this['_angleWholeDuration']=0x0,this[_0x14be9c(0x25f)]='Linear',this[_0x14be9c(0x941)]=!![],this[_0x14be9c(0x1bf)]=0x0,this[_0x14be9c(0x1ae)]=0x0,this[_0x14be9c(0x828)]=0x0,this[_0x14be9c(0xa28)]=0x0,this[_0x14be9c(0x15c)]=0x0,this[_0x14be9c(0x1fc)]=0x0,this[_0x14be9c(0x329)]=_0x14be9c(0x6a4),this[_0x14be9c(0x870)]=0x1,this['_growY']=0x1,this[_0x14be9c(0x177)]=0x1,this[_0x14be9c(0x92f)]=0x1,this[_0x14be9c(0x3de)]=0x0,this[_0x14be9c(0x4f1)]=0x0,this[_0x14be9c(0x95c)]='Linear',this[_0x14be9c(0x7ba)]=0x1;},Sprite_Battler[_0x534c3a(0x53c)]['createShadowSprite']=function(){const _0xf83ffe=_0x534c3a;this[_0xf83ffe(0x5d7)]=new Sprite(),this['_shadowSprite'][_0xf83ffe(0xa72)]=ImageManager[_0xf83ffe(0x534)](_0xf83ffe(0x9e7)),this[_0xf83ffe(0x5d7)][_0xf83ffe(0xa72)][_0xf83ffe(0x74b)]=VisuMZ['BattleCore'][_0xf83ffe(0x795)][_0xf83ffe(0x2a0)][_0xf83ffe(0x365)],this['_shadowSprite'][_0xf83ffe(0x409)]['x']=0.5,this[_0xf83ffe(0x5d7)][_0xf83ffe(0x409)]['y']=0.5,this[_0xf83ffe(0x5d7)]['y']=-0x2,this['_shadowSprite'][_0xf83ffe(0x94d)]=![],this['addChild'](this[_0xf83ffe(0x5d7)]);},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x554)]=function(){const _0x284f3b=_0x534c3a;this[_0x284f3b(0xf8)]=new Sprite(),this[_0x284f3b(0xf8)][_0x284f3b(0x409)]['x']=0.5,this[_0x284f3b(0xf8)][_0x284f3b(0x409)]['y']=0.5,this[_0x284f3b(0x2cf)](this['_distortionSprite']);},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x2c6)]=function(){const _0x5ae84d=_0x534c3a;if(!this[_0x5ae84d(0xf8)])return;if(this['_shadowSprite']){if(_0x5ae84d(0x5f1)!==_0x5ae84d(0x1fd)){const _0x330f5b=this[_0x5ae84d(0x754)](this[_0x5ae84d(0xf8)]);this[_0x5ae84d(0x5dc)](this[_0x5ae84d(0x5d7)],_0x330f5b),this[_0x5ae84d(0xa18)]();}else{function _0x23cdf8(){return _0x5ac639(_0x489646['$1']);}}}this[_0x5ae84d(0x7dd)]&&this['_distortionSprite'][_0x5ae84d(0x2cf)](this['_svBattlerSprite']),this['_weaponSprite']&&this['_distortionSprite'][_0x5ae84d(0x2cf)](this[_0x5ae84d(0x39e)]),this['_mainSprite']&&this[_0x5ae84d(0xf8)]['addChild'](this['_mainSprite']),this[_0x5ae84d(0x8f9)]&&this[_0x5ae84d(0xf8)][_0x5ae84d(0x2cf)](this[_0x5ae84d(0x8f9)]);},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0xa18)]=function(){const _0xd7d1ff=_0x534c3a;if(!this[_0xd7d1ff(0x5d7)])return;if(this[_0xd7d1ff(0x679)]&&this[_0xd7d1ff(0x679)]['svBattlerShadowVisible']()){const _0x4d1442=this[_0xd7d1ff(0x5d7)][_0xd7d1ff(0xa72)];this['_shadowSprite'][_0xd7d1ff(0x819)](0x0,0x0,_0x4d1442[_0xd7d1ff(0x456)],_0x4d1442[_0xd7d1ff(0x363)]);}else this[_0xd7d1ff(0x5d7)][_0xd7d1ff(0x819)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x5d1)]=function(){const _0xc37dd7=_0x534c3a;return SceneManager[_0xc37dd7(0xa8a)]()?SceneManager['_scene'][_0xc37dd7(0x6bf)][_0xc37dd7(0x39d)]:this[_0xc37dd7(0x70b)];},Sprite_Battler['prototype'][_0x534c3a(0x207)]=function(_0x50ade3,_0x18a045){const _0x464131=_0x534c3a;if(!this[_0x464131(0x679)][_0x464131(0x1b9)]())return;const _0x52948e=VisuMZ[_0x464131(0x99e)][_0x464131(0x795)]['Damage'],_0x50d36d=new Sprite_Damage();_0x50d36d['_duration']=_0x52948e[_0x464131(0x27a)],this[_0x464131(0x204)](_0x50d36d),_0x50d36d[_0x464131(0x207)](_0x50ade3,_0x18a045),this['addDamageSprite'](_0x50d36d);},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x2a3)]=function(_0xcd062,_0x12ad77,_0x16324f){const _0x241450=_0x534c3a;if(!this[_0x241450(0x679)][_0x241450(0x1b9)]())return;const _0x5d8256=VisuMZ[_0x241450(0x99e)][_0x241450(0x795)]['Damage'],_0x13dca5=new Sprite_Damage();_0x13dca5[_0x241450(0x761)]=_0x5d8256[_0x241450(0x27a)],this[_0x241450(0x204)](_0x13dca5),_0x13dca5[_0x241450(0x2a3)](_0xcd062,_0x12ad77,_0x16324f),this[_0x241450(0x8ad)](_0x13dca5);},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0xa7d)]=function(){const _0x32ead7=_0x534c3a;if(!this[_0x32ead7(0x679)][_0x32ead7(0x98a)]())return;while(this[_0x32ead7(0x679)][_0x32ead7(0x98a)]()){if('AbHQT'!==_0x32ead7(0x35f))this['_battler']['isSpriteVisible']()&&this[_0x32ead7(0x732)]();else{function _0x18f086(){const _0x519676=_0x32ead7;_0x1d14d1[_0x519676(0x99e)]['BattleManager_updatePhase'][_0x519676(0x63a)](this,_0x3849e3);}}}this[_0x32ead7(0x679)][_0x32ead7(0x391)](),this[_0x32ead7(0x679)][_0x32ead7(0xef)]();},Sprite_Battler[_0x534c3a(0x53c)]['createDamageSprite']=function(){const _0x1cb43f=_0x534c3a,_0x1b2163=VisuMZ[_0x1cb43f(0x99e)]['Settings'][_0x1cb43f(0x6c4)],_0xfbd656=new Sprite_Damage();_0xfbd656['_duration']=_0x1b2163[_0x1cb43f(0x27a)],this[_0x1cb43f(0x204)](_0xfbd656),_0xfbd656[_0x1cb43f(0x627)](this[_0x1cb43f(0x679)]),_0xfbd656[_0x1cb43f(0x57e)](this['_battler']),this[_0x1cb43f(0x8ad)](_0xfbd656);},Sprite_Battler['prototype'][_0x534c3a(0x8ad)]=function(_0x3b47a3){const _0x48ba2c=_0x534c3a;this[_0x48ba2c(0x58c)][_0x48ba2c(0x3ba)](_0x3b47a3);if(this[_0x48ba2c(0x790)]()){if(_0x48ba2c(0x78d)===_0x48ba2c(0x78d))SceneManager['_scene']['_statusWindow'][_0x48ba2c(0x8ad)](_0x3b47a3,this[_0x48ba2c(0x679)]);else{function _0x5ead2a(){const _0x3ac677=_0x48ba2c;this[_0x3ac677(0x648)][_0x3ac677(0x8c4)]=![];}}}else{this[_0x48ba2c(0x5d1)]()[_0x48ba2c(0x2cf)](_0x3b47a3);if(SceneManager['isBattleFlipped']())_0x3b47a3[_0x48ba2c(0x43e)]['x']=-0x1;}},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x790)]=function(){const _0x335f9f=_0x534c3a;return!$gameSystem[_0x335f9f(0x4d6)]()&&this[_0x335f9f(0x679)]&&this[_0x335f9f(0x679)]['isActor']();},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x204)]=function(_0x11a583){const _0x2df1ba=_0x534c3a,_0x5da3a5=VisuMZ[_0x2df1ba(0x99e)]['Settings'][_0x2df1ba(0x6c4)],_0x3784f7=SceneManager[_0x2df1ba(0xa9a)]()?-0x1:0x1;let _0x258c60=this['x'],_0x2c3f93=this['y'];const _0x1cf5da=SceneManager['_scene']['_statusWindow'];if(_0x1cf5da&&this[_0x2df1ba(0x70b)]===_0x1cf5da){_0x258c60+=_0x1cf5da['x']-this[_0x2df1ba(0x943)]();const _0x229bb9=_0x1cf5da['lineHeight']()*0x3/0x4;_0x2c3f93=_0x1cf5da['y']+_0x229bb9,_0x2c3f93=Math['min'](_0x2c3f93,_0x1cf5da['y']+this['y']-this[_0x2df1ba(0x363)]+_0x229bb9);}_0x11a583['x']=Math['round'](_0x258c60+this[_0x2df1ba(0x943)]()*_0x3784f7),_0x11a583['y']=Math[_0x2df1ba(0x8d4)](_0x2c3f93+this[_0x2df1ba(0x1d4)]());if(_0x5da3a5[_0x2df1ba(0x814)])for(const _0x5c11ce of this[_0x2df1ba(0x58c)]){_0x5c11ce['x']+=_0x5da3a5[_0x2df1ba(0x489)]*_0x3784f7,_0x5c11ce['y']+=_0x5da3a5[_0x2df1ba(0x1ad)];}else{if(_0x2df1ba(0x590)===_0x2df1ba(0x590)){const _0x2114d0=this[_0x2df1ba(0x58c)][this[_0x2df1ba(0x58c)]['length']-0x1];_0x2114d0&&(_0x11a583['x']=_0x2114d0['x']+_0x5da3a5['PopupShiftX']*_0x3784f7,_0x11a583['y']=_0x2114d0['y']+_0x5da3a5[_0x2df1ba(0x1ad)]);}else{function _0x23893a(){const _0x1d8b2f=_0x2df1ba;return _0x39dfb3[_0x1d8b2f(0x7c4)]()[_0x1d8b2f(0x674)]-_0x97d6a5[_0x1d8b2f(0x7c4)]()[_0x1d8b2f(0x674)];}}}},VisuMZ['BattleCore']['Sprite_Battler_damageOffsetX']=Sprite_Battler['prototype']['damageOffsetX'],Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x943)]=function(){const _0x2e40d2=_0x534c3a;let _0x4ed8b6=VisuMZ['BattleCore'][_0x2e40d2(0x5e0)]['call'](this),_0x51862f=VisuMZ[_0x2e40d2(0x99e)]['Settings'][_0x2e40d2(0x6c4)][_0x2e40d2(0x4bf)]||0x0;return Math[_0x2e40d2(0x8d4)](_0x4ed8b6+_0x51862f);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0xec)]=Sprite_Battler['prototype'][_0x534c3a(0x1d4)],Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x1d4)]=function(){const _0xdc1e57=_0x534c3a;let _0x508658=VisuMZ[_0xdc1e57(0x99e)]['Sprite_Battler_damageOffsetY'][_0xdc1e57(0x63a)](this);switch(VisuMZ[_0xdc1e57(0x99e)][_0xdc1e57(0x795)][_0xdc1e57(0x6c4)]['PopupPosition']){case _0xdc1e57(0x6b9):_0x508658-=this[_0xdc1e57(0x363)]*this['scale']['y'];break;case _0xdc1e57(0x585):_0x508658-=this[_0xdc1e57(0x363)]*this[_0xdc1e57(0x43e)]['y']*0.5;break;}let _0x17ceb6=VisuMZ['BattleCore'][_0xdc1e57(0x795)][_0xdc1e57(0x6c4)][_0xdc1e57(0x121)]||0x0;return Math['round'](_0x508658+_0x17ceb6);},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x943)]=function(){const _0x13f078=_0x534c3a;return Sprite_Battler[_0x13f078(0x53c)][_0x13f078(0x943)][_0x13f078(0x63a)](this);},Sprite_Actor[_0x534c3a(0x53c)]['damageOffsetY']=function(){const _0x3e4fd5=_0x534c3a;return Sprite_Battler['prototype'][_0x3e4fd5(0x1d4)][_0x3e4fd5(0x63a)](this);},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x6ea)]=function(_0x53c8a5){const _0x17a404=_0x534c3a;this['isShownOnBattlePortrait']()?SceneManager['_scene']['_statusWindow'][_0x17a404(0x4fd)](_0x53c8a5):(this[_0x17a404(0x5d1)]()[_0x17a404(0x5b7)](_0x53c8a5),this[_0x17a404(0x58c)][_0x17a404(0x46f)](_0x53c8a5),_0x53c8a5[_0x17a404(0x806)]());},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x19b)]=Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x1f2)],Sprite_Battler[_0x534c3a(0x53c)]['setHome']=function(_0x4946a4,_0x26ac58){const _0x17d764=_0x534c3a,_0x2eec83=VisuMZ[_0x17d764(0x99e)][_0x17d764(0x795)];if(this['constructor']===Sprite_Actor){if(_0x17d764(0x48a)!=='lfDBM')_0x4946a4+=_0x2eec83[_0x17d764(0x2a0)][_0x17d764(0x69d)]||0x0,_0x26ac58+=_0x2eec83[_0x17d764(0x2a0)]['OffsetY']||0x0;else{function _0x16853b(){const _0x95d9f4=_0x17d764,_0x5632c3=_0x36844f(_0x4142c9['$1'])[_0x95d9f4(0x4bc)](/[\r\n]+/)[_0x95d9f4(0x46f)]('');_0xdc5212['motionIdle']=_0x470817[_0x95d9f4(0x9d0)](_0x5632c3);}}}else{if(this[_0x17d764(0x1d7)]===Sprite_Enemy){if('anGOB'===_0x17d764(0x6f9)){function _0x2bf16c(){const _0xf35db=_0x17d764;if(_0x230e37['ActionItemMsg'])this[_0xf35db(0x17e)](_0x5e78d9[_0xf35db(0x955)],_0xef971e,_0x174207);}}else _0x4946a4+=_0x2eec83[_0x17d764(0x53f)][_0x17d764(0x69d)]||0x0,_0x26ac58+=_0x2eec83['Enemy']['OffsetY']||0x0;}}VisuMZ[_0x17d764(0x99e)][_0x17d764(0x19b)]['call'](this,_0x4946a4,_0x26ac58);},VisuMZ[_0x534c3a(0x99e)]['Sprite_Battler_update']=Sprite_Battler['prototype'][_0x534c3a(0x59d)],Sprite_Battler[_0x534c3a(0x53c)]['update']=function(){const _0x5769f9=_0x534c3a;VisuMZ[_0x5769f9(0x99e)][_0x5769f9(0x5c3)][_0x5769f9(0x63a)](this),!this['_battler']&&this[_0x5769f9(0x29a)]&&(this[_0x5769f9(0x29a)][_0x5769f9(0x94d)]=![]);},VisuMZ['BattleCore']['Sprite_Battler_updateMain']=Sprite_Battler['prototype']['updateMain'],Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x6aa)]=function(){const _0x2c72e1=_0x534c3a;this[_0x2c72e1(0x44a)](),this[_0x2c72e1(0x15d)](),this[_0x2c72e1(0x376)](),this['updateFlip'](),this['updateHpGaugePosition'](),VisuMZ[_0x2c72e1(0x99e)][_0x2c72e1(0x81c)]['call'](this);if(this['constructor']===Sprite_Enemy)this[_0x2c72e1(0x73c)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x143)]=Sprite_Battler[_0x534c3a(0x53c)]['updatePosition'],Sprite_Battler[_0x534c3a(0x53c)]['updatePosition']=function(){const _0x252ab8=_0x534c3a;VisuMZ['BattleCore']['Sprite_Battler_updatePosition'][_0x252ab8(0x63a)](this),this['updatePositionBattleCore'](),this[_0x252ab8(0x9ff)]();},Sprite_Battler['prototype']['updatePositionBattleCore']=function(){const _0x1d0544=_0x534c3a;this[_0x1d0544(0x674)]=this['x'],this[_0x1d0544(0x2df)]=this['y'],this['updateFloat'](),this[_0x1d0544(0xd4)](),this['x']+=this[_0x1d0544(0x7bd)](),this['y']+=this[_0x1d0544(0x4e9)](),this['x']=Math[_0x1d0544(0x922)](this['x']),this['y']=Math['floor'](this['y']);},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x7bd)]=function(){let _0x4231a1=0x0;return _0x4231a1;},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x4e9)]=function(){const _0x31ae6c=_0x534c3a;let _0x49d92e=0x0;this['_battler']&&!this[_0x31ae6c(0x679)][_0x31ae6c(0x8ca)]()&&(_0x49d92e-=this[_0x31ae6c(0x67b)],_0x49d92e-=this[_0x31ae6c(0x508)]);if(this['_distortionSprite']&&this[_0x31ae6c(0x1d7)]!==Sprite_SvEnemy){const _0x27b864=this['_distortionSprite'][_0x31ae6c(0x43e)]['y'];_0x49d92e-=(_0x27b864-0x1)*this[_0x31ae6c(0x363)];}return _0x49d92e;},Sprite_Battler[_0x534c3a(0x53c)]['updateFlip']=function(){const _0x2f7649=_0x534c3a,_0x337178=this[_0x2f7649(0x679)]&&this[_0x2f7649(0x679)][_0x2f7649(0x214)]();this[_0x2f7649(0x7ba)]=(_0x337178?-0x1:0x1)*Math[_0x2f7649(0x55a)](this[_0x2f7649(0x43e)]['x']);},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x65b)]=function(_0x34c636,_0x1e15ef,_0x3e5867){const _0x281db1=_0x534c3a;if(!this[_0x281db1(0x2f9)]())return;if(this[_0x281db1(0x3a6)]===_0x34c636)return;this[_0x281db1(0x3a6)]=_0x34c636,this['_floatDuration']=_0x1e15ef,this['_floatWholeDuration']=_0x1e15ef,this[_0x281db1(0x42e)]=_0x3e5867||_0x281db1(0x6a4);if(_0x1e15ef<=0x0)this[_0x281db1(0x67b)]=_0x34c636;},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x68d)]=function(){const _0x3f8085=_0x534c3a;if(this[_0x3f8085(0x72e)]<=0x0)return;const _0x4ef1b4=this[_0x3f8085(0x72e)],_0x5ad3b4=this[_0x3f8085(0x11b)],_0x55d205=this[_0x3f8085(0x42e)];Imported[_0x3f8085(0x9fc)]?this['_floatHeight']=this['applyEasing'](this['_floatHeight'],this[_0x3f8085(0x3a6)],_0x4ef1b4,_0x5ad3b4,_0x55d205):this[_0x3f8085(0x67b)]=(this['_floatHeight']*(_0x4ef1b4-0x1)+this[_0x3f8085(0x3a6)])/_0x4ef1b4;this['_floatDuration']--;if(this[_0x3f8085(0x72e)]<=0x0)this['onFloatEnd']();},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x8a4)]=function(){const _0x23863f=_0x534c3a;this[_0x23863f(0x67b)]=this['_targetFloatHeight'];},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x356)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x534c3a(0x53c)]['startJump']=function(_0x1966f3,_0x110ecd){const _0x4d1865=_0x534c3a;if(!this[_0x4d1865(0x2f9)]())return;if(_0x110ecd<=0x0)return;this[_0x4d1865(0x1be)]=_0x1966f3,this[_0x4d1865(0x970)]=_0x110ecd,this[_0x4d1865(0x468)]=_0x110ecd;},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0xd4)]=function(){const _0x56b47a=_0x534c3a;if(this['_jumpDuration']<=0x0)return;const _0x368820=this[_0x56b47a(0x468)]-this[_0x56b47a(0x970)],_0x403656=this[_0x56b47a(0x468)]/0x2,_0x28caa3=this[_0x56b47a(0x1be)],_0x306a05=-_0x28caa3/Math[_0x56b47a(0x23c)](_0x403656,0x2);this[_0x56b47a(0x508)]=_0x306a05*Math[_0x56b47a(0x23c)](_0x368820-_0x403656,0x2)+_0x28caa3,this[_0x56b47a(0x970)]--;if(this[_0x56b47a(0x970)]<=0x0)return this[_0x56b47a(0xa14)]();},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0xa14)]=function(){const _0x3905ca=_0x534c3a;this[_0x3905ca(0x508)]=0x0;},Sprite_Battler[_0x534c3a(0x53c)]['isJumping']=function(){return this['_jumpDuration']>0x0;},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x8f5)]=function(_0x3a7171,_0x31f637,_0x49997c){const _0x508f30=_0x534c3a;if(this[_0x508f30(0x911)]===_0x3a7171)return;this[_0x508f30(0x911)]=_0x3a7171,this[_0x508f30(0x660)]=_0x31f637,this[_0x508f30(0x8c8)]=_0x31f637,this[_0x508f30(0x543)]=_0x49997c||'Linear';if(_0x31f637<=0x0)this['opacity']=_0x3a7171;},Sprite_Battler[_0x534c3a(0x53c)]['updateOpacity']=function(){const _0x345418=_0x534c3a;if(this['_opacityDuration']<=0x0)return;const _0xa25ab4=this[_0x345418(0x660)],_0x53045d=this[_0x345418(0x8c8)],_0x1d105e=this[_0x345418(0x543)];if(Imported['VisuMZ_0_CoreEngine']){if(_0x345418(0x735)===_0x345418(0x327)){function _0x188591(){const _0x43d3ac=_0x345418;this[_0x43d3ac(0x12b)][_0x43d3ac(0xa72)][_0x43d3ac(0x74b)]!==this[_0x43d3ac(0x679)][_0x43d3ac(0x61c)]()&&(this[_0x43d3ac(0x12b)]['bitmap'][_0x43d3ac(0x74b)]=this[_0x43d3ac(0x679)]['battlerSmoothImage']());}}else this[_0x345418(0x52c)]=this[_0x345418(0x4a0)](this['opacity'],this[_0x345418(0x911)],_0xa25ab4,_0x53045d,_0x1d105e);}else{if(_0x345418(0x258)===_0x345418(0x258))this['opacity']=(this[_0x345418(0x52c)]*(_0xa25ab4-0x1)+this[_0x345418(0x911)])/_0xa25ab4;else{function _0x296731(){const _0x5f1956=_0x345418;return this[_0x5f1956(0x389)][_0xf95ef9];}}}this[_0x345418(0x660)]--;if(this[_0x345418(0x660)]<=0x0)this[_0x345418(0x54b)]();},Sprite_Battler[_0x534c3a(0x53c)]['onOpacityEnd']=function(){const _0x3b7aa0=_0x534c3a;this['opacity']=this[_0x3b7aa0(0x911)];},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x25d)]=function(){const _0x286f2b=_0x534c3a;return this[_0x286f2b(0x660)]>0x0;},Sprite_Battler[_0x534c3a(0x53c)]['updateShadow']=function(){const _0xa6cb16=_0x534c3a;this[_0xa6cb16(0x5d7)]['visible']=this[_0xa6cb16(0x679)][_0xa6cb16(0x5a1)](),this[_0xa6cb16(0x762)]();},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x762)]=function(){const _0x4801b8=_0x534c3a;if(!this[_0x4801b8(0x5d7)])return;this[_0x4801b8(0x5d7)]['y']=this['_baseY']-this['y']-0x2;},Sprite_Battler[_0x534c3a(0x53c)]['updateShadowScale']=function(){const _0x5eb090=_0x534c3a;if(!this[_0x5eb090(0x679)])return;this[_0x5eb090(0x205)]=this[_0x5eb090(0x679)][_0x5eb090(0x454)]();},Game_BattlerBase['prototype'][_0x534c3a(0x454)]=function(){const _0x2c1faf=_0x534c3a,_0xcd9b4d=this[_0x2c1faf(0x1e7)]()?this[_0x2c1faf(0x4c5)]():this[_0x2c1faf(0x602)]();if(_0xcd9b4d){const _0x2472f6=_0xcd9b4d[_0x2c1faf(0x650)];if(_0x2472f6['match'](/<SIDEVIEW SHADOW SCALE:[ ](\d+)([%％])>/i)){if('rFbdZ'===_0x2c1faf(0x31d))return Number(RegExp['$1'])*0.01;else{function _0x45b746(){const _0x348c42=_0x2c1faf;this[_0x348c42(0x961)](_0x348c42(0x3ce));}}}else{if(_0x2472f6[_0x2c1faf(0x5ed)](/<SIDEVIEW SHADOW SCALE:[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x534c3a(0x53c)]['updateScale']=function(){const _0x51892f=_0x534c3a;if(this[_0x51892f(0x1d7)]===Sprite_SvEnemy)return;this['updateGrow'](),this[_0x51892f(0x1dc)]();},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x1dc)]=function(){const _0x3c8e33=_0x534c3a,_0x2931a8=this[_0x3c8e33(0xf8)];if(_0x2931a8){if(_0x3c8e33(0x2ce)===_0x3c8e33(0x249)){function _0x3b1279(){const _0x1031b2=_0x3c8e33;this[_0x1031b2(0x3d0)](),this[_0x1031b2(0x407)]();}}else _0x2931a8['scale']['x']=this['mainSpriteScaleX'](),_0x2931a8['scale']['y']=this[_0x3c8e33(0x338)]();}},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x87f)]=function(){const _0x57f36a=_0x534c3a;let _0x85c3a0=0x1;return _0x85c3a0*=this['_flipScaleX'],_0x85c3a0*=this[_0x57f36a(0x870)],_0x85c3a0;},Sprite_Battler['prototype'][_0x534c3a(0x338)]=function(){const _0x13cdea=_0x534c3a;return 0x1*this[_0x13cdea(0x4db)];},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x7f5)]=function(){const _0x221d53=_0x534c3a;return this[_0x221d53(0x456)]*this[_0x221d53(0x87f)]();},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x8fd)]=function(){const _0x572c5e=_0x534c3a;return this[_0x572c5e(0x363)]*this[_0x572c5e(0x338)]();},Sprite_Battler['prototype']['startGrow']=function(_0x15ccba,_0x33b37a,_0x16cb4b,_0x10152f){const _0x6cbbb=_0x534c3a;if(!this[_0x6cbbb(0x2f9)]())return;if(!this['_distortionSprite'])return;if(this['_targetGrowX']===_0x15ccba&&this[_0x6cbbb(0x92f)]===_0x33b37a)return;this[_0x6cbbb(0x177)]=_0x15ccba,this[_0x6cbbb(0x92f)]=_0x33b37a,this[_0x6cbbb(0x3de)]=_0x16cb4b,this['_growWholeDuration']=_0x16cb4b,this[_0x6cbbb(0x95c)]=_0x10152f||_0x6cbbb(0x6a4),_0x16cb4b<=0x0&&(this[_0x6cbbb(0x870)]=this[_0x6cbbb(0x177)],this[_0x6cbbb(0x4db)]=this[_0x6cbbb(0x92f)]);},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x213)]=function(){const _0x3e2661=_0x534c3a;if(this[_0x3e2661(0x3de)]<=0x0)return;if(!this[_0x3e2661(0xf8)])return;const _0x28445c=this[_0x3e2661(0x3de)],_0x41b0ad=this[_0x3e2661(0x4f1)],_0x364844=this['_growEasing'];Imported[_0x3e2661(0x9fc)]?(this[_0x3e2661(0x870)]=this['applyEasing'](this[_0x3e2661(0x870)],this[_0x3e2661(0x177)],_0x28445c,_0x41b0ad,_0x364844),this[_0x3e2661(0x4db)]=this[_0x3e2661(0x4a0)](this['_growY'],this[_0x3e2661(0x92f)],_0x28445c,_0x41b0ad,_0x364844)):(this[_0x3e2661(0x870)]=(this[_0x3e2661(0x870)]*(_0x28445c-0x1)+this[_0x3e2661(0x177)])/_0x28445c,this[_0x3e2661(0x4db)]=(this[_0x3e2661(0x4db)]*(_0x28445c-0x1)+this[_0x3e2661(0x92f)])/_0x28445c);this[_0x3e2661(0x3de)]--;if(this[_0x3e2661(0x3de)]<=0x0)this[_0x3e2661(0x271)]();},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x271)]=function(){const _0x1fcad2=_0x534c3a;this[_0x1fcad2(0x870)]=this['_targetGrowX'],this[_0x1fcad2(0x4db)]=this[_0x1fcad2(0x92f)];},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x3dc)]=function(){return this['_growDuration']>0x0;},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0xa83)]=function(_0x402c24,_0x460e12,_0x27106b,_0x3047c9){const _0x385c0f=_0x534c3a;if(!this[_0x385c0f(0x2f9)]())return;if(!this[_0x385c0f(0xf8)])return;if(this[_0x385c0f(0x828)]===_0x402c24&&this[_0x385c0f(0xa28)]===_0x460e12)return;this[_0x385c0f(0x828)]=_0x402c24,this['_targetSkewY']=_0x460e12,this[_0x385c0f(0x15c)]=_0x27106b,this[_0x385c0f(0x1fc)]=_0x27106b,this[_0x385c0f(0x329)]=_0x3047c9||_0x385c0f(0x6a4),_0x27106b<=0x0&&(this[_0x385c0f(0xf8)]['skew']['x']=this[_0x385c0f(0x828)],this['_distortionSprite'][_0x385c0f(0x4a7)]['y']=this[_0x385c0f(0xa28)]);},Sprite_Battler[_0x534c3a(0x53c)]['updateSkew']=function(){const _0x2b71b4=_0x534c3a;if(this[_0x2b71b4(0x15c)]<=0x0)return;if(!this[_0x2b71b4(0xf8)])return;const _0x2364f9=this[_0x2b71b4(0x15c)],_0x1a2b97=this[_0x2b71b4(0x1fc)],_0x5028e6=this[_0x2b71b4(0x329)],_0x575c0b=this[_0x2b71b4(0xf8)];Imported[_0x2b71b4(0x9fc)]?(_0x575c0b[_0x2b71b4(0x4a7)]['x']=this[_0x2b71b4(0x4a0)](_0x575c0b['skew']['x'],this['_targetSkewX'],_0x2364f9,_0x1a2b97,_0x5028e6),_0x575c0b[_0x2b71b4(0x4a7)]['y']=this[_0x2b71b4(0x4a0)](_0x575c0b[_0x2b71b4(0x4a7)]['y'],this[_0x2b71b4(0xa28)],_0x2364f9,_0x1a2b97,_0x5028e6)):(_0x575c0b[_0x2b71b4(0x4a7)]['x']=(_0x575c0b[_0x2b71b4(0x4a7)]['x']*(_0x2364f9-0x1)+this[_0x2b71b4(0x828)])/_0x2364f9,_0x575c0b[_0x2b71b4(0x4a7)]['y']=(_0x575c0b[_0x2b71b4(0x4a7)]['y']*(_0x2364f9-0x1)+this[_0x2b71b4(0xa28)])/_0x2364f9);this[_0x2b71b4(0x15c)]--;if(this['_skewDuration']<=0x0)this[_0x2b71b4(0x13f)]();},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x13f)]=function(){const _0x10b56c=_0x534c3a;this[_0x10b56c(0xf8)][_0x10b56c(0x4a7)]['x']=this['_targetSkewX'],this[_0x10b56c(0xf8)]['skew']['y']=this[_0x10b56c(0xa28)];},Sprite_Battler['prototype'][_0x534c3a(0x708)]=function(){const _0x14bfe4=_0x534c3a;return this[_0x14bfe4(0x15c)]>0x0;},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0xa84)]=function(_0x18cf26,_0x49d96b,_0x33633b,_0x3c1599){const _0x9fd751=_0x534c3a;if(!this[_0x9fd751(0x2f9)]())return;if(!this[_0x9fd751(0xf8)])return;if(this[_0x9fd751(0x86e)]===_0x18cf26)return;this[_0x9fd751(0x86e)]=_0x18cf26,this[_0x9fd751(0x6d6)]=_0x49d96b,this[_0x9fd751(0x6af)]=_0x49d96b,this[_0x9fd751(0x25f)]=_0x33633b||_0x9fd751(0x6a4),this['_angleRevertOnFinish']=_0x3c1599,this['_angleRevertOnFinish']===undefined&&(this['_angleRevertOnFinish']=!![]),_0x49d96b<=0x0&&(this[_0x9fd751(0x728)]=_0x18cf26,this[_0x9fd751(0x941)]&&(this[_0x9fd751(0x86e)]=0x0,this['_currentAngle']=0x0));},Sprite_Battler[_0x534c3a(0x53c)]['updateSpin']=function(){const _0xf9eb63=_0x534c3a;this[_0xf9eb63(0x3d0)](),this['applyAngleChange']();},Sprite_Battler['prototype'][_0x534c3a(0x3d0)]=function(){const _0x53d78c=_0x534c3a;if(this[_0x53d78c(0x6d6)]<=0x0)return;const _0x2b6aac=this[_0x53d78c(0x6d6)],_0x52b5d5=this[_0x53d78c(0x6af)],_0x2857f4=this['_angleEasing'];Imported[_0x53d78c(0x9fc)]?this['_currentAngle']=this[_0x53d78c(0x4a0)](this[_0x53d78c(0x728)],this[_0x53d78c(0x86e)],_0x2b6aac,_0x52b5d5,_0x2857f4):this['_currentAngle']=(this['_currentAngle']*(_0x2b6aac-0x1)+this[_0x53d78c(0x86e)])/_0x2b6aac;this[_0x53d78c(0x6d6)]--;if(this[_0x53d78c(0x6d6)]<=0x0)this[_0x53d78c(0xa8c)]();},Sprite_Battler['prototype'][_0x534c3a(0xa8c)]=function(){const _0x3110fb=_0x534c3a;this[_0x3110fb(0x728)]=this['_targetAngle'],this['_angleRevertOnFinish']&&(this[_0x3110fb(0x86e)]=0x0,this[_0x3110fb(0x728)]=0x0);},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x86f)]=function(){const _0x50a758=_0x534c3a;return this[_0x50a758(0x6d6)]>0x0;},Sprite_Battler[_0x534c3a(0x53c)]['applyAngleChange']=function(){const _0x40ad7b=_0x534c3a;if(!this[_0x40ad7b(0xf8)])return;const _0x535c45=this[_0x40ad7b(0x728)],_0x11db93=this['scale']['x'],_0x22ae54=this[_0x40ad7b(0x679)]['isActor']()?-0x1:0x1;this[_0x40ad7b(0xf8)][_0x40ad7b(0x4c6)]=_0x535c45*_0x11db93*_0x22ae54;const _0x286526=this[_0x40ad7b(0xf8)]['scale']['y'];this[_0x40ad7b(0xf8)]['y']=this[_0x40ad7b(0x363)]*-0.5*(0x2-_0x286526);const _0x15997a=[this['_mainSprite'],this[_0x40ad7b(0x7dd)],this[_0x40ad7b(0x8f9)]];for(const _0x2b43ae of _0x15997a){if(!_0x2b43ae)continue;_0x2b43ae['y']=this[_0x40ad7b(0x363)]*0.5;}this['_shadowSprite']&&(this[_0x40ad7b(0x205)]=this[_0x40ad7b(0x205)]??0x1,this[_0x40ad7b(0x5d7)]['scale']['x']=this[_0x40ad7b(0xf8)]['scale']['x']*this[_0x40ad7b(0x205)],this[_0x40ad7b(0x5d7)]['scale']['y']=this['_distortionSprite']['scale']['y']*this['_shadowScale']);},VisuMZ['BattleCore']['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x83e)],Sprite_Actor['prototype'][_0x534c3a(0x83e)]=function(){const _0x29f2ff=_0x534c3a;VisuMZ['BattleCore']['Sprite_Actor_createStateSprite'][_0x29f2ff(0x63a)](this);if(VisuMZ['BattleCore'][_0x29f2ff(0x795)][_0x29f2ff(0x79b)]['ShowActorGauge']){if(_0x29f2ff(0xa1a)!==_0x29f2ff(0x6ac))this[_0x29f2ff(0x5cb)]();else{function _0x1c5abd(){const _0x4cae43=_0x29f2ff;_0x4c410e[_0x4cae43(0x180)]=_0xa4b119(_0x3f42ef['$1']);}}}},VisuMZ['BattleCore'][_0x534c3a(0x109)]=Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x488)],Sprite_Enemy[_0x534c3a(0x53c)]['createStateIconSprite']=function(){const _0x32b6d1=_0x534c3a;VisuMZ['BattleCore'][_0x32b6d1(0x795)][_0x32b6d1(0x79b)]['ShowEnemyGauge']&&this[_0x32b6d1(0x5cb)](),VisuMZ[_0x32b6d1(0x99e)][_0x32b6d1(0x109)][_0x32b6d1(0x63a)](this);},Sprite_Battler['prototype']['createHpGaugeSprite']=function(){const _0x3dadaa=_0x534c3a;if(!ConfigManager[_0x3dadaa(0x182)])return;if(this[_0x3dadaa(0x1d7)]===Sprite_SvEnemy)return;const _0xf55ac4=VisuMZ[_0x3dadaa(0x99e)]['Settings']['HpGauge'],_0xcd957d=new Sprite_HpGauge();_0xcd957d[_0x3dadaa(0x409)]['x']=_0xf55ac4[_0x3dadaa(0x8b1)],_0xcd957d['anchor']['y']=_0xf55ac4[_0x3dadaa(0x90d)],_0xcd957d['scale']['x']=_0xcd957d[_0x3dadaa(0x43e)]['y']=_0xf55ac4[_0x3dadaa(0x878)],this[_0x3dadaa(0x29a)]=_0xcd957d,this['addChild'](this[_0x3dadaa(0x29a)]);},VisuMZ['BattleCore'][_0x534c3a(0x808)]=Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x749)],Sprite_Battler['prototype']['setBattler']=function(_0x25c96e){const _0xf7a057=_0x534c3a,_0x12cbb8=this[_0xf7a057(0x679)];VisuMZ[_0xf7a057(0x99e)][_0xf7a057(0x808)][_0xf7a057(0x63a)](this,_0x25c96e),this[_0xf7a057(0x47b)](_0x25c96e);if(_0x12cbb8!==_0x25c96e)this[_0xf7a057(0x5dd)]();},Sprite_Battler[_0x534c3a(0x53c)]['setupHpGaugeSprite']=function(_0x4f8853){const _0x59e122=_0x534c3a;if(!_0x4f8853)return;if(!this['_hpGaugeSprite'])return;if(_0x4f8853[_0x59e122(0x1e7)]()){}else{if(_0x4f8853['isEnemy']()){if(_0x59e122(0x296)!=='VlpNx'){if(this[_0x59e122(0x1d7)]===Sprite_SvEnemy&&!_0x4f8853[_0x59e122(0x5a1)]())return;}else{function _0x18c344(){const _0x584dc8=_0x59e122;if(_0x52bba7['match'](/(.*):[ ](\d+)/i)){const _0x5360aa=_0x3b4beb(_0x3d2c6b['$1'])['trim'](),_0x3e1354=_0x4c8a09(_0x3f7050['$2']);_0x1ba337[_0x5360aa]=_0x3e1354,_0x4daf38+=_0x3e1354;}else{if(_0x5da3e2['match'](/(.*):[ ](\d+\.?\d+)/i)){const _0x18b3fa=_0x58cc64(_0x5313d7['$1'])[_0x584dc8(0x5a9)](),_0x147613=_0x3695e9(_0x36495b['$2']);_0x5a8415[_0x18b3fa]=_0x147613,_0x58746b+=_0x147613;}else _0x3f1a39!==''&&(_0x202322[_0x2b904c]=0x1,_0x2cf912++);}}}}}this[_0x59e122(0x29a)][_0x59e122(0x627)](_0x4f8853,'hp');},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x3b7)]=function(){const _0x3ece1f=_0x534c3a;if(!this['_battler'])return;if(!this[_0x3ece1f(0x29a)])return;const _0x1073fd=VisuMZ['BattleCore'][_0x3ece1f(0x795)]['HpGauge'],_0x53cc9e=this[_0x3ece1f(0x29a)];_0x53cc9e[_0x3ece1f(0x94d)]=this[_0x3ece1f(0xa57)]();const _0x3e9ceb=_0x1073fd['OffsetX'],_0x1bc2d4=_0x1073fd[_0x3ece1f(0xa49)];_0x53cc9e['x']=_0x3e9ceb,_0x53cc9e['x']+=this[_0x3ece1f(0x679)]['battleUIOffsetX'](),_0x53cc9e['y']=-this[_0x3ece1f(0x363)]+_0x1bc2d4,_0x53cc9e['y']+=this[_0x3ece1f(0x679)]['battleUIOffsetY']();},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0xa57)]=function(){const _0x441d4b=_0x534c3a;if(!this[_0x441d4b(0x679)])return![];if(this['_battler'][_0x441d4b(0x1e7)]())return!![];const _0x13e6e2=this[_0x441d4b(0x679)][_0x441d4b(0x602)]()[_0x441d4b(0x650)];if(_0x13e6e2['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x13e6e2[_0x441d4b(0x5ed)](/<HIDE HP GAUGE>/i))return![];const _0x1f1e3d=VisuMZ['BattleCore'][_0x441d4b(0x795)][_0x441d4b(0x79b)];if(_0x1f1e3d[_0x441d4b(0x373)]){if('Ahheg'===_0x441d4b(0x27c)){function _0xc481f4(){const _0x33df0c=_0x441d4b;if(!_0x1669c5[_0x33df0c(0x2a6)]()){const _0x4a4583=_0x470ad6[_0x33df0c(0x388)](_0x4c46e1['x'],_0x322707['y']);if(this[_0x33df0c(0x389)]&&this[_0x33df0c(0x389)][_0x4a4583])return this[_0x33df0c(0x389)][_0x4a4583];}return _0x3be997[_0x33df0c(0x99e)][_0x33df0c(0x626)]['call'](this);}}else{if(_0x1f1e3d['BTestBypass']&&BattleManager[_0x441d4b(0x2a6)]())return!![];if(this[_0x441d4b(0x679)]['_visualHpGauge_JustDied'])return![];return this[_0x441d4b(0x679)]['hasBeenDefeatedBefore']();}}return!![];},VisuMZ['BattleCore']['Sprite_Battler_isMoving']=Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x51e)],Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x51e)]=function(){const _0xdea747=_0x534c3a;if(!this[_0xdea747(0x679)])return![];return VisuMZ[_0xdea747(0x99e)][_0xdea747(0x7f2)][_0xdea747(0x63a)](this);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x285)]=Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x594)],Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x594)]=function(_0x30424d,_0x5c365d,_0x369cbf){const _0x54b9a3=_0x534c3a;this[_0x54b9a3(0x2f9)]()&&VisuMZ[_0x54b9a3(0x99e)][_0x54b9a3(0x285)]['call'](this,_0x30424d,_0x5c365d,_0x369cbf);},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x2f9)]=function(){const _0x3cc99e=_0x534c3a;if(this[_0x3cc99e(0x679)]&&this['_battler'][_0x3cc99e(0x43f)]())return![];if(this[_0x3cc99e(0x679)]&&!this[_0x3cc99e(0x679)][_0x3cc99e(0x25a)]())return![];return $gameSystem[_0x3cc99e(0x4d6)]();},Sprite_Battler[_0x534c3a(0x53c)]['stepForward']=function(){},Sprite_Battler[_0x534c3a(0x53c)]['stepBack']=function(){const _0x18c227=_0x534c3a;this[_0x18c227(0x594)](0x0,0x0,0xc);},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x954)]=function(){},Sprite_Battler[_0x534c3a(0x53c)][_0x534c3a(0x7fb)]=function(){const _0x51694e=_0x534c3a,_0x3c167d=VisuMZ['BattleCore'][_0x51694e(0x795)][_0x51694e(0x2a0)],_0x4ab877=this[_0x51694e(0x679)]&&this[_0x51694e(0x679)][_0x51694e(0x1e7)]()?0x1:-0x1,_0x180b98=this[_0x51694e(0x674)]-this[_0x51694e(0x97e)]+_0x4ab877*_0x3c167d['FlinchDistanceX'],_0x510401=this['_baseY']-this[_0x51694e(0x5c2)]+_0x4ab877*_0x3c167d['FlinchDistanceY'],_0x43cc42=_0x3c167d[_0x51694e(0x218)];this[_0x51694e(0x594)](_0x180b98,_0x510401,_0x43cc42);},VisuMZ[_0x534c3a(0x99e)]['Sprite_Actor_initMembers']=Sprite_Actor['prototype'][_0x534c3a(0x3ca)],Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x3ca)]=function(){const _0x323f4c=_0x534c3a;VisuMZ['BattleCore'][_0x323f4c(0x771)][_0x323f4c(0x63a)](this),this[_0x323f4c(0x2c6)]();},Sprite_Actor['prototype'][_0x534c3a(0x539)]=function(){const _0x50e8a7=_0x534c3a;return this[_0x50e8a7(0xf8)]||this[_0x50e8a7(0x12b)]||this;},VisuMZ['BattleCore'][_0x534c3a(0x7b2)]=Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x589)],Sprite_Actor['prototype'][_0x534c3a(0x589)]=function(){},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x422)]=function(_0x27a1de){const _0x41403e=_0x534c3a;if(SceneManager[_0x41403e(0x484)]())return;if(!_0x27a1de)return;if(!_0x27a1de[_0x41403e(0x2f9)]())return;VisuMZ[_0x41403e(0x99e)]['Sprite_Actor_moveToStartPosition'][_0x41403e(0x63a)](this);},VisuMZ['BattleCore']['Sprite_Actor_setActorHome']=Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x54f)],Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x54f)]=function(_0x791690){const _0x3bd790=_0x534c3a;if(VisuMZ['BattleCore'][_0x3bd790(0x795)][_0x3bd790(0x2a0)][_0x3bd790(0xa04)])VisuMZ[_0x3bd790(0x99e)][_0x3bd790(0x795)][_0x3bd790(0x2a0)][_0x3bd790(0xa04)][_0x3bd790(0x63a)](this,_0x791690);else{if(_0x3bd790(0x281)!==_0x3bd790(0x281)){function _0x5be962(){const _0x3a4c30=_0x3bd790;_0x15b0ab=_0x4d6047[_0x3a4c30(0x378)];}}else VisuMZ[_0x3bd790(0x99e)][_0x3bd790(0x9fa)][_0x3bd790(0x63a)](this,_0x791690);}},VisuMZ[_0x534c3a(0x99e)]['Sprite_Actor_setBattler']=Sprite_Actor['prototype'][_0x534c3a(0x749)],Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x749)]=function(_0x1909fa){const _0x59d02f=_0x534c3a;VisuMZ[_0x59d02f(0x99e)][_0x59d02f(0x55c)][_0x59d02f(0x63a)](this,_0x1909fa),this['setBattlerBattleCore'](_0x1909fa);},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x719)]=function(_0x2d36ef){const _0x53d68a=_0x534c3a;if(!_0x2d36ef)return;if(!this['_mainSprite'])return;this[_0x53d68a(0x12b)][_0x53d68a(0x409)]['x']=this['_actor'][_0x53d68a(0x924)](),this[_0x53d68a(0x12b)][_0x53d68a(0x409)]['y']=this[_0x53d68a(0x84f)]['svBattlerAnchorY'](),this[_0x53d68a(0xa18)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x416)]=Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x59d)],Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x59d)]=function(){const _0x2bbded=_0x534c3a;VisuMZ[_0x2bbded(0x99e)]['Sprite_Actor_update'][_0x2bbded(0x63a)](this);if(this[_0x2bbded(0x84f)]){if(_0x2bbded(0x80b)!==_0x2bbded(0x80b)){function _0x56ee02(){const _0x2392d7=_0x2bbded;return _0x4acc7c['weapons']()[_0x2392d7(0x4a2)]||0x1;}}else this[_0x2bbded(0x38b)](),this[_0x2bbded(0x7e6)]();}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x429)]=Sprite_Actor['prototype']['updateBitmap'],Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x2f2)]=function(){const _0x1305be=_0x534c3a;VisuMZ[_0x1305be(0x99e)][_0x1305be(0x429)]['call'](this),this[_0x1305be(0x12b)]&&this[_0x1305be(0x12b)][_0x1305be(0xa72)]&&this[_0x1305be(0x679)]&&(this[_0x1305be(0x12b)][_0x1305be(0xa72)][_0x1305be(0x74b)]!==this['_battler'][_0x1305be(0x61c)]()&&(this[_0x1305be(0x12b)][_0x1305be(0xa72)][_0x1305be(0x74b)]=this[_0x1305be(0x679)][_0x1305be(0x61c)]()));},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x4ae)]=Sprite_Actor['prototype'][_0x534c3a(0x73c)],Sprite_Actor['prototype'][_0x534c3a(0x73c)]=function(){const _0x3c1d4e=_0x534c3a;VisuMZ[_0x3c1d4e(0x99e)][_0x3c1d4e(0x4ae)][_0x3c1d4e(0x63a)](this),this[_0x3c1d4e(0x471)]();},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x471)]=function(){const _0x3f506f=_0x534c3a;if(!this[_0x3f506f(0x12b)])return;if(!this[_0x3f506f(0x5d7)])return;this['updateShadowVisibility'](),this[_0x3f506f(0x762)]();},Sprite_Actor['prototype'][_0x534c3a(0x38b)]=function(){const _0xb5269b=_0x534c3a;this[_0xb5269b(0x3d2)]['scale']['x']=0x1/(this['scale']['x']||0.001),this[_0xb5269b(0x3d2)][_0xb5269b(0x43e)]['y']=0x1/(this[_0xb5269b(0x43e)]['y']||0.001);},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x7e6)]=function(){const _0x34c496=_0x534c3a;if(!$gameSystem[_0x34c496(0x4d6)]()&&this[_0x34c496(0x1d7)]===Sprite_Actor){if(_0x34c496(0x818)!==_0x34c496(0x4c9)){const _0x522a64=Scene_Battle[_0x34c496(0x53c)][_0x34c496(0x1d5)]();[_0x34c496(0x7a2),_0x34c496(0xaa4),_0x34c496(0x1ab),_0x34c496(0x4a4)]['includes'](_0x522a64)&&(this[_0x34c496(0x52c)]=0x0);}else{function _0x497c1a(){const _0x217eef=_0x34c496;this[_0x217eef(0x26e)]();}}}},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x26e)]=function(){const _0x2aec82=_0x534c3a,_0x12c92=this[_0x2aec82(0x84f)];if(_0x12c92){const _0x2bbfcc=_0x12c92['stateMotionIndex']();if(_0x12c92[_0x2aec82(0x3e3)]()||_0x12c92['isActing']())this[_0x2aec82(0x1bc)](_0x2aec82(0x4b7));else{if(_0x2bbfcc===0x3)this[_0x2aec82(0x1bc)]('dead');else{if(_0x2bbfcc===0x2)this[_0x2aec82(0x1bc)](_0x2aec82(0x2b4));else{if(this[_0x2aec82(0x4bb)])this[_0x2aec82(0x1bc)](_0x2aec82(0x61f));else{if(_0x12c92[_0x2aec82(0x947)]())this[_0x2aec82(0x1bc)](_0x2aec82(0x41c));else{if(_0x12c92[_0x2aec82(0x1a0)]()){if(_0x2aec82(0x305)===_0x2aec82(0x3e8)){function _0xfd745d(){const _0x5a4665=_0x2aec82;if(_0x4d045a[_0x5a4665(0x99e)][_0x5a4665(0x795)][_0x5a4665(0xa01)][_0x5a4665(0x8cc)])return _0x1d6a97['BattleCore'][_0x5a4665(0x795)]['BattleLog'][_0x5a4665(0x8cc)][_0x5a4665(0x63a)](this);return _0x5ed726[_0x5a4665(0x99e)][_0x5a4665(0x250)][_0x5a4665(0x63a)](this);}}else this['startMotion']('chant');}else{if(_0x12c92[_0x2aec82(0x5f2)]()||_0x12c92[_0x2aec82(0x527)]()){if(_0x2aec82(0x94f)!=='pigeu')this[_0x2aec82(0x1bc)](_0x2aec82(0x7d6));else{function _0x53a25f(){const _0x5c9a34=_0x2aec82;this[_0x5c9a34(0x6be)]['x']=this[_0x5c9a34(0x456)],this[_0x5c9a34(0x2de)]=this['width']*0x3/0x4;}}}else{if(_0x2bbfcc===0x1){if(_0x2aec82(0x996)!==_0x2aec82(0x996)){function _0x40c305(){const _0xcfa423=_0x2aec82;_0x4f02d0['BattleCore']['Window_Options_addGeneralOptions']['call'](this),this[_0xcfa423(0x861)](),this['addShowHpGaugeCommand']();}}else this[_0x2aec82(0x1bc)](_0x2aec82(0x28e));}else{if(_0x12c92[_0x2aec82(0x30c)]()){if(_0x2aec82(0x552)!==_0x2aec82(0x89b))this['startMotion'](_0x2aec82(0x58f));else{function _0x27f7ed(){const _0x3e0d95=_0x2aec82;_0x270008['push'](this[_0x3e0d95(0xa6e)]()[_0x3e0d95(0x3a3)]());}}}else{if(_0x12c92[_0x2aec82(0xa11)]())this[_0x2aec82(0x1bc)](_0x2aec82(0x4b7));else{if(_0x12c92['currentAction']()){if('mbvkN'===_0x2aec82(0xa95)){function _0x123a3b(){const _0x5257a7=_0x2aec82;this[_0x5257a7(0x2de)]+=_0x53dfae[_0x5257a7(0x9b2)](),this[_0x5257a7(0x6be)]['y']+=_0x198173[_0x5257a7(0x558)]();}}else this[_0x2aec82(0x1bc)](_0x2aec82(0x41c));}else this[_0x2aec82(0x1bc)]('walk');}}}}}}}}}}}},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x954)]=function(){const _0x5512f4=_0x534c3a,_0x5795a4=0xa,_0x281fbc=0x12c*_0x5795a4,_0x53deba=0x1e*_0x5795a4;this[_0x5512f4(0x594)](_0x281fbc,0x0,_0x53deba);},Sprite_Actor['prototype'][_0x534c3a(0x99a)]=function(){const _0x360058=_0x534c3a;Sprite_Battler[_0x360058(0x53c)][_0x360058(0x99a)][_0x360058(0x63a)](this);},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x644)]=function(){const _0x2a2a0e=_0x534c3a;return Sprite_Battler[_0x2a2a0e(0xa1f)];},Sprite_Weapon[_0x534c3a(0x53c)][_0x534c3a(0x906)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x7a3)]=function(){},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x37a)]=function(){},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x74a)]=function(){const _0x24aacf=_0x534c3a;if(this['_motion']&&++this[_0x24aacf(0x786)]>=this[_0x24aacf(0x644)]()){if(_0x24aacf(0x561)==='GBdsc'){if(this[_0x24aacf(0x2da)]['loop'])this[_0x24aacf(0x315)]=(this['_pattern']+0x1)%0x4;else{if(this[_0x24aacf(0x315)]<0x2)this[_0x24aacf(0x315)]++;else{if('UDsow'!=='UDsow'){function _0x1acfac(){const _0x48b96d=_0x24aacf;this['_skillWindow']['close'](),this[_0x48b96d(0x998)][_0x48b96d(0x232)]();}}else this[_0x24aacf(0x26e)]();}}this[_0x24aacf(0x786)]=0x0;}else{function _0x6e21d3(){const _0x120313=_0x24aacf;return _0x253f9c[_0x120313(0x35a)];}}}},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x49e)]=function(_0x1b9a6f){const _0x18f3fa=_0x534c3a;if(_0x1b9a6f===_0x18f3fa(0x2af))this[_0x18f3fa(0x192)]=!![];if(this[_0x18f3fa(0x679)]&&this[_0x18f3fa(0x679)]['isDead']()){if(_0x18f3fa(0x2f5)!==_0x18f3fa(0x19a)){this[_0x18f3fa(0x2da)]=Sprite_Actor[_0x18f3fa(0x62d)][_0x18f3fa(0x88e)];return;}else{function _0x591065(){const _0x3285ed=_0x18f3fa;return _0x472464[_0x3285ed(0x99e)][_0x3285ed(0x795)][_0x3285ed(0x6c4)][_0x3285ed(0xc8)][_0x3285ed(0x63a)](this,_0x2da44e,_0x5b58a8);}}}const _0x2dd729=Sprite_Actor['MOTIONS'][_0x1b9a6f];this['_motion']=_0x2dd729,this[_0x18f3fa(0x786)]=0x0,this[_0x18f3fa(0x315)]=0x0;},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x198)]=function(_0x3e0e58){const _0x3d0452=_0x534c3a;this['adjustWeaponSpriteOffset'](),this[_0x3d0452(0x39e)]['setup'](_0x3e0e58),this[_0x3d0452(0x84f)][_0x3d0452(0x84e)]();},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x1bd)]=function(){const _0x4cc8d3=_0x534c3a;let _0x568603=-0x10,_0x5e80e1=this['height']*0.5;const _0x50ef5a=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x1bd2a8=this['_battler']['traitObjects']()['map'](_0x40ac4b=>_0x40ac4b&&_0x40ac4b[_0x4cc8d3(0x650)][_0x4cc8d3(0x5ed)](_0x50ef5a)?Number(RegExp['$1']):0x0),_0x2513eb=this[_0x4cc8d3(0x679)]['traitObjects']()[_0x4cc8d3(0x406)](_0x28ddaa=>_0x28ddaa&&_0x28ddaa[_0x4cc8d3(0x650)][_0x4cc8d3(0x5ed)](_0x50ef5a)?Number(RegExp['$2']):0x0);_0x568603=_0x1bd2a8[_0x4cc8d3(0x9c3)]((_0x33bc98,_0x4856f3)=>_0x33bc98+_0x4856f3,_0x568603),_0x5e80e1=_0x2513eb['reduce']((_0x25392f,_0x39a038)=>_0x25392f+_0x39a038,_0x5e80e1),this[_0x4cc8d3(0x39e)]['x']=_0x568603,this['_weaponSprite']['y']=_0x5e80e1,this[_0x4cc8d3(0x39e)]['update']();},Sprite_Weapon[_0x534c3a(0x53c)][_0x534c3a(0x627)]=function(_0x3b80b7){const _0x28bf50=_0x534c3a;this[_0x28bf50(0x637)]=_0x3b80b7,this['_animationCount']=-0x1,this[_0x28bf50(0x315)]=0x0,this['loadBitmap'](),this[_0x28bf50(0x20d)]();},Sprite_Actor[_0x534c3a(0x53c)]['updateTargetPosition']=function(){},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x604)]=function(){const _0x8bfb64=_0x534c3a,_0x59bc61=VisuMZ['BattleCore']['Settings'][_0x8bfb64(0x189)],_0x402f6a=_0x59bc61[_0x8bfb64(0x542)],_0x364310=_0x59bc61[_0x8bfb64(0x16f)],_0x3204f0=_0x59bc61['StepDuration'];this['startMove'](-_0x402f6a,-_0x364310,_0x3204f0);},VisuMZ['BattleCore'][_0x534c3a(0xa43)]=Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x20d)],Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x20d)]=function(){const _0x35c19c=_0x534c3a;this['applyFreezeMotionFrames'](),VisuMZ['BattleCore'][_0x35c19c(0xa43)][_0x35c19c(0x63a)](this);},Sprite_Actor[_0x534c3a(0x53c)][_0x534c3a(0x2b5)]=function(){const _0x21c0e3=_0x534c3a;if(this[_0x21c0e3(0x679)]&&this[_0x21c0e3(0x679)][_0x21c0e3(0x4d1)]){if('mcrWB'!==_0x21c0e3(0x27e)){function _0x574ed6(){const _0x57c6a1=_0x21c0e3,_0x196ccc=this[_0x57c6a1(0x1e7)]()?this['actor']():this[_0x57c6a1(0x602)]();if(_0x196ccc){const _0x56e9bf=_0x196ccc[_0x57c6a1(0x650)];if(_0x56e9bf[_0x57c6a1(0x5ed)](/<SIDEVIEW SHADOW SCALE:[ ](\d+)([%％])>/i))return _0x28ee6a(_0x12135e['$1'])*0.01;else{if(_0x56e9bf[_0x57c6a1(0x5ed)](/<SIDEVIEW SHADOW SCALE:[ ](.*)>/i))return _0x33f0f8(_0x4ad308['$1'])||0x0;}}return 0x1;}}else{const _0x465da4=this[_0x21c0e3(0x679)][_0x21c0e3(0x4d1)];this[_0x21c0e3(0x2da)]=Sprite_Actor['MOTIONS'][_0x465da4[_0x21c0e3(0x9df)]],this[_0x21c0e3(0x315)]=_0x465da4['pattern'];const _0xc141ac=this[_0x21c0e3(0x39e)];_0xc141ac[_0x21c0e3(0xa13)](_0x465da4[_0x21c0e3(0x5b2)],_0x465da4[_0x21c0e3(0x6a3)]),this['adjustWeaponSpriteOffset']();}}},Sprite_Weapon['prototype'][_0x534c3a(0xa13)]=function(_0x3b28bd,_0x40683a){const _0x55aec8=_0x534c3a;this[_0x55aec8(0x637)]=_0x3b28bd,this[_0x55aec8(0x691)]=-Infinity,this['_pattern']=_0x40683a,this['loadBitmap'](),this[_0x55aec8(0x20d)]();},Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x3ca)]=function(){const _0x23d16d=_0x534c3a;Sprite_Battler[_0x23d16d(0x53c)]['initMembers']['call'](this),this['_enemy']=null,this['_appeared']=![],this[_0x23d16d(0x151)]='',this['_battlerHue']=0x0,this['_effectType']=null,this[_0x23d16d(0x153)]=0x0,this[_0x23d16d(0x869)]=0x0,this['createMainSprite'](),this[_0x23d16d(0x488)]();},VisuMZ[_0x534c3a(0x99e)]['Sprite_Enemy_update']=Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x59d)],Sprite_Enemy[_0x534c3a(0x53c)]['update']=function(){const _0x52dd80=_0x534c3a;VisuMZ[_0x52dd80(0x99e)]['Sprite_Enemy_update'][_0x52dd80(0x63a)](this),this['updateShadowVisibility']();},Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x525)]=function(){const _0x5c23c0=_0x534c3a;this[_0x5c23c0(0x12b)]=new Sprite(),this[_0x5c23c0(0x12b)][_0x5c23c0(0x409)]['x']=0.5,this[_0x5c23c0(0x12b)]['anchor']['y']=0x1,this[_0x5c23c0(0x2cf)](this[_0x5c23c0(0x12b)]),this[_0x5c23c0(0x2c6)]();},Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x539)]=function(){const _0x4bc70a=_0x534c3a;return this[_0x4bc70a(0xf8)]||this[_0x4bc70a(0x12b)]||this;},Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x7c3)]=function(_0x2ee818){const _0x47a3a8=_0x534c3a;this['bitmap']=new Bitmap(0x1,0x1),$gameSystem['isSideView']()?this['_mainSprite'][_0x47a3a8(0xa72)]=ImageManager[_0x47a3a8(0x276)](_0x2ee818):this['_mainSprite'][_0x47a3a8(0xa72)]=ImageManager['loadEnemy'](_0x2ee818),this['_mainSprite'][_0x47a3a8(0xa72)][_0x47a3a8(0x374)](this[_0x47a3a8(0x9b9)][_0x47a3a8(0x15a)](this));},Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x9b9)]=function(){const _0x46f6eb=_0x534c3a,_0x4afda8=this[_0x46f6eb(0x12b)][_0x46f6eb(0xa72)];_0x4afda8&&(this[_0x46f6eb(0xa72)]=new Bitmap(_0x4afda8['width'],_0x4afda8[_0x46f6eb(0x363)]));},VisuMZ['BattleCore'][_0x534c3a(0xa77)]=Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x848)],Sprite_Enemy['prototype'][_0x534c3a(0x848)]=function(_0x33ecbd){const _0x110f0e=_0x534c3a;this[_0x110f0e(0x12b)]&&this[_0x110f0e(0x12b)]['setHue'](_0x33ecbd);},VisuMZ['BattleCore'][_0x534c3a(0x449)]=Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x6df)],Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x6df)]=function(){const _0x54af61=_0x534c3a;if(this['allowCollapse']()){if(_0x54af61(0x3ad)!==_0x54af61(0x3ad)){function _0x4a21cd(){const _0x22abaa=_0x54af61;_0x54bcc7[_0x22abaa(0x99e)][_0x22abaa(0x7de)][_0x22abaa(0x63a)](this);}}else VisuMZ[_0x54af61(0x99e)][_0x54af61(0x449)][_0x54af61(0x63a)](this);}else{if(_0x54af61(0x994)!==_0x54af61(0x994)){function _0x4acbe8(){const _0x3f1299=_0x54af61;_0x4b2080=_0x1f63ee||0x1,_0x3dbe19--;const _0x1bcd57=this[_0x3f1299(0x5eb)](),_0x5b27f4=_0x1bcd57[_0x4e9a10]?_0x1bcd57[_0x3829fe][_0x3f1299(0x6d4)]:0x0;return _0x356f26[_0x3f1299(0x964)][_0x5b27f4];}}else this[_0x54af61(0x722)]=!this[_0x54af61(0x8ff)][_0x54af61(0x745)](),!this[_0x54af61(0x722)]&&(this['opacity']=0x0);}},VisuMZ['BattleCore'][_0x534c3a(0x827)]=Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x9d7)],Sprite_Enemy[_0x534c3a(0x53c)]['updateCollapse']=function(){const _0x2ef62e=_0x534c3a;if(this[_0x2ef62e(0xa38)]())VisuMZ[_0x2ef62e(0x99e)]['Sprite_Enemy_updateCollapse'][_0x2ef62e(0x63a)](this);},Sprite_Enemy['prototype'][_0x534c3a(0x20d)]=function(){const _0x566be9=_0x534c3a;Sprite_Battler[_0x566be9(0x53c)]['updateFrame'][_0x566be9(0x63a)](this);const _0x3c446b=this['mainSprite']()||this;if(!_0x3c446b)return;if(!_0x3c446b[_0x566be9(0xa72)]){if(_0x566be9(0x5e3)!=='OTxtK'){function _0x16c48b(){const _0xf4eb88=_0x566be9;if(_0x32f759>_0x3af001[_0xf4eb88(0x674)])_0x5b8308=!![];if(_0x358be6<_0x362a9e['_baseX'])_0x3acde0=![];}}else _0x3c446b['bitmap']=new Bitmap(this['width'],this[_0x566be9(0x363)]);}if(this[_0x566be9(0x28a)]===_0x566be9(0x42a)){if(_0x566be9(0x796)===_0x566be9(0x796))this[_0x566be9(0x12b)][_0x566be9(0x819)](0x0,0x0,this['_mainSprite'][_0x566be9(0x456)],this[_0x566be9(0x153)]);else{function _0xa3e7b7(){const _0x168a98=_0x566be9;return _0x124a95['BattleCore']['Scene_Battle_itemWindowRect'][_0x168a98(0x63a)](this);}}}else{if(_0x566be9(0x9e2)!==_0x566be9(0x8fb))_0x3c446b['setFrame'](0x0,0x0,_0x3c446b[_0x566be9(0xa72)][_0x566be9(0x456)],this[_0x566be9(0xa72)][_0x566be9(0x363)]);else{function _0xab7885(){const _0x14208a=_0x566be9;_0x388d4[_0x14208a(0x819)](0x0,0x0,_0x115206[_0x14208a(0xa72)][_0x14208a(0x456)],this[_0x14208a(0xa72)][_0x14208a(0x363)]);}}}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x712)]=Sprite_Enemy['prototype'][_0x534c3a(0x354)],Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x354)]=function(){const _0x4b62a7=_0x534c3a;if(this['allowCollapse']())VisuMZ[_0x4b62a7(0x99e)]['Sprite_Enemy_updateBossCollapse']['call'](this);},Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x51e)]=function(){const _0x2a4704=_0x534c3a;return Sprite_Battler[_0x2a4704(0x53c)][_0x2a4704(0x51e)][_0x2a4704(0x63a)](this);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x57f)]=Sprite_Enemy['prototype'][_0x534c3a(0x38b)],Sprite_Enemy[_0x534c3a(0x53c)]['updateStateSprite']=function(){const _0x29a357=_0x534c3a;VisuMZ[_0x29a357(0x99e)][_0x29a357(0x57f)][_0x29a357(0x63a)](this),this[_0x29a357(0x7dc)]();},Sprite_Enemy['prototype'][_0x534c3a(0x7dc)]=function(){const _0x39eaab=_0x534c3a,_0x436bdc=VisuMZ[_0x39eaab(0x99e)]['Settings'][_0x39eaab(0x53f)];if(_0x436bdc['NameAttachStateIcon']&&!_0x436bdc[_0x39eaab(0xa41)]){if(_0x39eaab(0x746)===_0x39eaab(0xa70)){function _0x4fa4c0(){const _0x575f72=_0x39eaab;this[_0x575f72(0x26a)]()?delete _0x855ad5[_0x575f72(0x369)]['cancel']:_0x1e6d3f[_0x575f72(0x587)](_0x575f72(0x366),this[_0x575f72(0x24c)][_0x575f72(0x15a)](this));}}else{this[_0x39eaab(0x476)][_0x39eaab(0x52c)]=0x0;return;}}this['_stateIconSprite']['x']=0x0,this[_0x39eaab(0x476)]['x']+=this[_0x39eaab(0x679)][_0x39eaab(0x277)](),this['_stateIconSprite']['y']=-this[_0x39eaab(0xa72)][_0x39eaab(0x363)]-this[_0x39eaab(0x476)][_0x39eaab(0x363)],this[_0x39eaab(0x476)]['y']+=this['_battler'][_0x39eaab(0x832)](),this[_0x39eaab(0x476)][_0x39eaab(0x43e)]['x']=0x1/(this[_0x39eaab(0x43e)]['x']||0.001),this[_0x39eaab(0x476)][_0x39eaab(0x43e)]['y']=0x1/(this[_0x39eaab(0x43e)]['y']||0.001),this[_0x39eaab(0x5a1)]()&&(this['_svBattlerSprite'][_0x39eaab(0x3d2)][_0x39eaab(0x43e)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x39eaab(0x7dd)]['_stateSprite'][_0x39eaab(0x43e)]['y']=0x1/(this[_0x39eaab(0x43e)]['y']||0.001));},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x55e)]=Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x749)],Sprite_Enemy['prototype'][_0x534c3a(0x749)]=function(_0x2ba351){const _0x31f19e=_0x534c3a;VisuMZ[_0x31f19e(0x99e)][_0x31f19e(0x55e)]['call'](this,_0x2ba351),this[_0x31f19e(0x3e9)](_0x2ba351);},Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x3e9)]=function(_0x6e99f6){const _0x292820=_0x534c3a;!this[_0x292820(0x7dd)]&&(this[_0x292820(0x7dd)]=new Sprite_SvEnemy(_0x6e99f6),this[_0x292820(0x2c6)]()),this['_svBattlerSprite']['setBattler'](_0x6e99f6);},Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x5a1)]=function(){const _0x26e997=_0x534c3a;return this['_enemy']&&this['_enemy'][_0x26e997(0x5a1)]();},VisuMZ[_0x534c3a(0x99e)]['Sprite_Enemy_loadBitmap']=Sprite_Enemy[_0x534c3a(0x53c)]['loadBitmap'],Sprite_Enemy[_0x534c3a(0x53c)]['loadBitmap']=function(_0x2fb92d){const _0xd6667b=_0x534c3a;if(this[_0xd6667b(0x5a1)]()){if(_0xd6667b(0x9de)==='ysWno'){function _0x2dfb57(){const _0x4862a1=_0xd6667b;this[_0x4862a1(0x7dd)][_0x4862a1(0x26e)]();}}else{const _0x2d9e12=this['_enemy'][_0xd6667b(0x3cd)]();this[_0xd6667b(0xa72)]=new Bitmap(_0x2d9e12[_0xd6667b(0x456)],_0x2d9e12[_0xd6667b(0x363)]);}}else{if(_0xd6667b(0x2eb)!==_0xd6667b(0x2ae))VisuMZ[_0xd6667b(0x99e)][_0xd6667b(0x7da)][_0xd6667b(0x63a)](this,_0x2fb92d);else{function _0x581202(){const _0xc3e833=_0xd6667b;_0x461edb[_0xc3e833(0x517)]=_0x4a1a74(_0x3d53e2['$1'])[_0xc3e833(0x6c5)]()['trim']();}}}},Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0xa38)]=function(){const _0x125b0c=_0x534c3a;return this['hasSvBattler']()?this[_0x125b0c(0x8ff)][_0x125b0c(0xa38)]():!![];},Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x26e)]=function(){const _0x2bb18d=_0x534c3a;this[_0x2bb18d(0x5a1)]()&&this['_svBattlerSprite']['refreshMotion']();},Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x49e)]=function(_0x33aaf3){const _0xc8895=_0x534c3a;if(this[_0xc8895(0x5a1)]())this[_0xc8895(0x7dd)][_0xc8895(0x49e)](_0x33aaf3);},Sprite_Enemy[_0x534c3a(0x53c)]['forceWeaponAnimation']=function(_0x193706){const _0x277e90=_0x534c3a;if(this['hasSvBattler']())this[_0x277e90(0x7dd)][_0x277e90(0x198)](_0x193706);},Sprite_Enemy[_0x534c3a(0x53c)][_0x534c3a(0x604)]=function(){const _0x10a38e=_0x534c3a,_0x549ceb=VisuMZ['BattleCore'][_0x10a38e(0x795)][_0x10a38e(0x189)],_0x34013f=_0x549ceb[_0x10a38e(0x542)],_0x284fda=_0x549ceb['StepDistanceY'],_0x4700de=_0x549ceb['StepDuration'];this[_0x10a38e(0x594)](_0x34013f,_0x284fda,_0x4700de);};function Sprite_SvEnemy(){const _0x40fc3f=_0x534c3a;this[_0x40fc3f(0x96e)](...arguments);}Sprite_SvEnemy[_0x534c3a(0x53c)]=Object['create'](Sprite_Actor[_0x534c3a(0x53c)]),Sprite_SvEnemy[_0x534c3a(0x53c)]['constructor']=Sprite_SvEnemy,Sprite_SvEnemy['prototype'][_0x534c3a(0x96e)]=function(_0x4c21e1){const _0x22e79b=_0x534c3a;Sprite_Actor[_0x22e79b(0x53c)]['initialize'][_0x22e79b(0x63a)](this,_0x4c21e1),this[_0x22e79b(0x43e)]['x']=-0x1,this[_0x22e79b(0x3d2)]['scale']['x']=-0x1;},Sprite_SvEnemy['prototype'][_0x534c3a(0x8cf)]=function(){},Sprite_SvEnemy[_0x534c3a(0x53c)][_0x534c3a(0x589)]=function(){},Sprite_SvEnemy['prototype'][_0x534c3a(0x54f)]=function(_0x5109a6){},Sprite_SvEnemy[_0x534c3a(0x53c)]['updateShadow']=function(){},Sprite_SvEnemy[_0x534c3a(0x53c)][_0x534c3a(0x762)]=function(){},Sprite_SvEnemy[_0x534c3a(0x53c)][_0x534c3a(0x38b)]=function(){const _0x58e65d=_0x534c3a;this[_0x58e65d(0x3d2)][_0x58e65d(0x94d)]=![];},Sprite_SvEnemy[_0x534c3a(0x53c)]['updateBitmap']=function(){const _0x47b3af=_0x534c3a;Sprite_Battler['prototype']['updateBitmap'][_0x47b3af(0x63a)](this);const _0x5d253f=this[_0x47b3af(0x84f)][_0x47b3af(0x613)]();if(this[_0x47b3af(0x151)]!==_0x5d253f){if(_0x47b3af(0x3ac)===_0x47b3af(0x793)){function _0x470917(){const _0x23998f=_0x47b3af;this[_0x23998f(0x986)](_0xc4c58f,_0x5cfd55['x'],_0x40595d['y'],_0x1c3d80);}}else this[_0x47b3af(0x151)]=_0x5d253f,this[_0x47b3af(0x12b)]['bitmap']=ImageManager[_0x47b3af(0x9ef)](_0x5d253f);}if(this[_0x47b3af(0x12b)]&&this['_mainSprite'][_0x47b3af(0xa72)]&&this[_0x47b3af(0x679)]){if(_0x47b3af(0x102)==='qiSZA'){function _0x5ac475(){const _0x3e8f9d=_0x47b3af;this[_0x3e8f9d(0x86e)]=0x0,this[_0x3e8f9d(0x728)]=0x0;}}else{if(this[_0x47b3af(0x12b)]['bitmap'][_0x47b3af(0x74b)]!==this[_0x47b3af(0x679)][_0x47b3af(0x61c)]()){if(_0x47b3af(0x382)!==_0x47b3af(0x967))this[_0x47b3af(0x12b)][_0x47b3af(0xa72)][_0x47b3af(0x74b)]=this[_0x47b3af(0x679)][_0x47b3af(0x61c)]();else{function _0x20cff2(){const _0x84cc44=_0x47b3af,_0x5033ab=new _0x2914d8(0x0,0x0,_0x110b04[_0x84cc44(0x456)],_0x3e65d8[_0x84cc44(0x363)]);this[_0x84cc44(0xa67)]=new _0x4d8340(_0x5033ab),this[_0x84cc44(0xa67)][_0x84cc44(0x52c)]=0x0,this['addChild'](this[_0x84cc44(0xa67)]),this[_0x84cc44(0x7a0)]();}}}}}},Sprite_SvEnemy[_0x534c3a(0x53c)][_0x534c3a(0x954)]=function(){},Sprite_SvEnemy[_0x534c3a(0x53c)][_0x534c3a(0x594)]=function(_0x5b6329,_0x28c565,_0xc7b451){const _0x4fb3b0=_0x534c3a;if(this[_0x4fb3b0(0x70b)])this[_0x4fb3b0(0x70b)][_0x4fb3b0(0x594)](_0x5b6329,_0x28c565,_0xc7b451);},Sprite_SvEnemy[_0x534c3a(0x53c)]['refreshMotion']=function(){const _0x35dde0=_0x534c3a,_0xe12dbc=this[_0x35dde0(0x84f)];if(_0xe12dbc){const _0x39b84f=_0xe12dbc['stateMotionIndex']();if(_0xe12dbc[_0x35dde0(0x3e3)]()||_0xe12dbc[_0x35dde0(0x5bf)]()){if(_0x35dde0(0x988)!==_0x35dde0(0x988)){function _0x3e7b0b(){const _0x8833ca=_0x35dde0;if(!(_0x4ea8dd[_0x8833ca(0x99e)][_0x8833ca(0x795)][_0x8833ca(0x67e)][_0x8833ca(0x418)]??!![]))return;const _0x45b749=this[_0x8833ca(0x3d1)](_0x360806);if(![_0x8833ca(0x439),'guard',_0x8833ca(0x167)][_0x8833ca(0x96f)](_0x45b749))return;const _0x48f1dc=this[_0x8833ca(0x586)](_0x8cf02e);let _0x3ee4d4=null;if(_0x45b749===_0x8833ca(0x439))_0x3ee4d4=_0x50d6ab[this['_actor'][_0x8833ca(0xf4)]()];else _0x45b749==='guard'?_0x3ee4d4=_0xe7f54f[this[_0x8833ca(0x84f)][_0x8833ca(0x608)]()]:_0x3ee4d4=_0x9ad278[this[_0x8833ca(0x142)][_0x56841b]['ext']];this[_0x8833ca(0x611)](this['_actor'],_0x3ee4d4,_0x48f1dc['x'],_0x48f1dc['y'],_0x48f1dc[_0x8833ca(0x456)]);}}else this[_0x35dde0(0x1bc)](_0x35dde0(0x4b7));}else{if(_0x39b84f===0x3){if(_0x35dde0(0x358)!==_0x35dde0(0x358)){function _0x5b967b(){return _0x17cf8b(_0x1f1a21['$2']);}}else this['startMotion']('dead');}else{if(_0x39b84f===0x2)this[_0x35dde0(0x1bc)](_0x35dde0(0x2b4));else{if(_0xe12dbc[_0x35dde0(0x1a0)]()){if(_0x35dde0(0x559)==='nbVQi'){function _0x2453b7(){const _0x3b5abb=_0x35dde0;for(const _0x3f24e9 of _0x5a4cfe){const _0x3c19c5=_0xd37119[0x0][_0x3b5abb(0x8e9)](_0x3f24e9[0x0],_0x2d5e59[0x0]),_0x4a1537=_0x3203d1[0x1][_0x3b5abb(0x8e9)](_0x3f24e9[0x1],_0x256386[0x1])[_0x3b5abb(0x5a9)](),_0x9ed35d=new _0x2313c1(_0x25c3b4[_0x3b5abb(0x8e9)](_0x4a1537),'i');_0x1850c6[_0x3c19c5]=_0x9ed35d;}}}else this['startMotion'](_0x35dde0(0x600));}else{if(_0xe12dbc[_0x35dde0(0x5f2)]()||_0xe12dbc['isGuardWaiting']())this['startMotion'](_0x35dde0(0x7d6));else{if(_0x39b84f===0x1)this[_0x35dde0(0x1bc)](_0x35dde0(0x28e));else{if(_0xe12dbc[_0x35dde0(0x30c)]()){if('RLGRj'!==_0x35dde0(0x57a)){function _0x10dc4a(){const _0x395e4d=_0x35dde0;this['_cancelButton']['x']=_0x37164d['width']-(_0x566b77[_0x395e4d(0x456)]-_0x5d351e[_0x395e4d(0x29c)])/0x2-this[_0x395e4d(0x6ee)][_0x395e4d(0x456)]-0x4;}}else this[_0x35dde0(0x1bc)](_0x35dde0(0x58f));}else{if(_0xe12dbc[_0x35dde0(0xa11)]())this[_0x35dde0(0x1bc)](_0x35dde0(0x4b7));else{if(_0x35dde0(0x129)!==_0x35dde0(0x767))this[_0x35dde0(0x1bc)](_0xe12dbc[_0x35dde0(0x3cd)]()[_0x35dde0(0x517)]||_0x35dde0(0x4b7));else{function _0x428d1c(){const _0x27cba3=_0x35dde0,_0x417210=new _0x2e2620();_0x417210[_0x27cba3(0xa72)]=_0x262d73[_0x27cba3(0x534)](_0x83e75c[_0x27cba3(0x5b5)]),_0x417210['x']=_0x47b2d6[_0x27cba3(0x9ee)]||0x0,_0x417210['y']=_0x4a202f['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0x27cba3(0x2cf)](_0x417210),this[_0x27cba3(0x683)]=_0x417210;}}}}}}}}}}}},Sprite_SvEnemy['prototype']['inHomePosition']=function(){const _0x397818=_0x534c3a;if(this[_0x397818(0x70b)])return this[_0x397818(0x70b)][_0x397818(0x9e4)]===0x0&&this[_0x397818(0x70b)][_0x397818(0x4fa)]===0x0;else{if(_0x397818(0x3e7)!==_0x397818(0x160))return!![];else{function _0x58ec54(){const _0x5b3300=_0x397818;this[_0x5b3300(0x5cb)]();}}}},Sprite_SvEnemy['prototype'][_0x534c3a(0xa23)]=function(){},Sprite_Damage[_0x534c3a(0x53c)][_0x534c3a(0x57e)]=function(_0x1e4996){const _0x59fd26=_0x534c3a,_0x3cf141=_0x1e4996[_0x59fd26(0x1ed)]()||_0x1e4996[_0x59fd26(0x8db)]();if(_0x3cf141[_0x59fd26(0x8ef)]||_0x3cf141[_0x59fd26(0x647)])this['_colorType']=0x0,this[_0x59fd26(0x6f7)]();else{if(_0x3cf141[_0x59fd26(0x7cb)]){if(_0x59fd26(0x3c9)!==_0x59fd26(0x3c9)){function _0x3f91dc(){const _0x2f9aa3=_0x59fd26;if(!_0xc69eb[_0x2f9aa3(0xa8a)]())return;_0x34a915[_0x2f9aa3(0x96b)](_0x27f92a,_0x60ab1c);const _0x17bbbd=_0x49c135['_action'];if(!_0x17bbbd)return;let _0x3a2575=_0x1b7ab6[_0x2f9aa3(0x588)];_0x17bbbd[_0x2f9aa3(0x785)](_0x3a2575);}}else this[_0x59fd26(0xa9f)]=_0x3cf141[_0x59fd26(0x973)]>=0x0?0x0:0x1,this['createDigits'](_0x3cf141[_0x59fd26(0x973)]);}else{if(_0x1e4996[_0x59fd26(0x582)]()&&_0x3cf141[_0x59fd26(0x894)]!==0x0){if(_0x59fd26(0x247)!==_0x59fd26(0x247)){function _0x574247(){const _0x28e124=_0x59fd26;this[_0x28e124(0xa5c)][_0x28e124(0x3ba)](_0x28e124(0x87c),_0x55980d[_0x28e124(0x485)][_0x28e124(0x8e9)](_0x3138ac[_0x28e124(0x180)]())),this[_0x28e124(0xa5c)]['push']('wait');}}else this[_0x59fd26(0xa9f)]=_0x3cf141[_0x59fd26(0x894)]>=0x0?0x2:0x3,this[_0x59fd26(0x8b6)](_0x3cf141[_0x59fd26(0x894)]);}}}_0x3cf141[_0x59fd26(0xa36)]&&this[_0x59fd26(0x9e9)]();},Sprite_Damage[_0x534c3a(0x53c)][_0x534c3a(0x627)]=function(_0x10f00e){},Sprite_Damage[_0x534c3a(0x53c)][_0x534c3a(0x8b6)]=function(_0x10223b){const _0xa37fe5=_0x534c3a;let _0x30dd4c=this[_0xa37fe5(0x12e)](_0x10223b);const _0x12807a=this[_0xa37fe5(0x85f)](),_0x131804=Math[_0xa37fe5(0x922)](_0x12807a*0.75);for(let _0x1f04d8=0x0;_0x1f04d8<_0x30dd4c[_0xa37fe5(0x4a2)];_0x1f04d8++){if(_0xa37fe5(0x9c8)!==_0xa37fe5(0x833)){const _0x2fcdd9=this['createChildSprite'](_0x131804,_0x12807a);_0x2fcdd9['bitmap'][_0xa37fe5(0xed)](_0x30dd4c[_0x1f04d8],0x0,0x0,_0x131804,_0x12807a,_0xa37fe5(0x585)),_0x2fcdd9['x']=(_0x1f04d8-(_0x30dd4c[_0xa37fe5(0x4a2)]-0x1)/0x2)*_0x131804,_0x2fcdd9['dy']=-_0x1f04d8;}else{function _0x1656f9(){const _0x29faf0=_0x345b5e(_0x44e618['$1']);_0x43c6fd['requestFauxAnimation']([this],_0x29faf0,![],![]);}}}},Sprite_Damage['prototype']['createString']=function(_0x121a77){const _0x5ae4f9=_0x534c3a;let _0x5db704=Math[_0x5ae4f9(0x55a)](_0x121a77)[_0x5ae4f9(0x851)]();if(this[_0x5ae4f9(0x6e5)]()){if(_0x5ae4f9(0x5aa)===_0x5ae4f9(0x5aa))_0x5db704=VisuMZ[_0x5ae4f9(0x9a0)](_0x5db704);else{function _0x10384e(){const _0x1f3661=_0x5ae4f9;return _0x4f5299[_0x1f3661(0x99e)]['Settings']['AutoBattle'][_0x1f3661(0x328)];}}}const _0x478ad1=VisuMZ[_0x5ae4f9(0x99e)]['Settings'][_0x5ae4f9(0x6c4)];let _0x577bdb='',_0x5078c1='';switch(this[_0x5ae4f9(0xa9f)]){case 0x0:_0x577bdb=_0x478ad1[_0x5ae4f9(0x8a5)]||_0x5ae4f9(0x14b),_0x5078c1=TextManager['hp'];if(_0x121a77===0x0)_0x577bdb='%1';break;case 0x1:_0x577bdb=_0x478ad1['hpHealingFmt']||_0x5ae4f9(0x98b),_0x5078c1=TextManager['hp'];break;case 0x2:_0x577bdb=_0x478ad1['mpDamageFmt']||'-%1\x20MP',_0x5078c1=TextManager['mp'];break;case 0x3:_0x577bdb=_0x478ad1[_0x5ae4f9(0x3f1)]||_0x5ae4f9(0x82c),_0x5078c1=TextManager['mp'];break;}return _0x577bdb[_0x5ae4f9(0x8e9)](_0x5db704,_0x5078c1)[_0x5ae4f9(0x5a9)]();},Sprite_Damage[_0x534c3a(0x53c)][_0x534c3a(0x6e5)]=function(){const _0x588834=_0x534c3a;if(Imported[_0x588834(0x9fc)]){if(_0x588834(0xa82)!==_0x588834(0x4f7))return VisuMZ[_0x588834(0x179)][_0x588834(0x795)][_0x588834(0x35c)]['DigitGroupingDamageSprites'];else{function _0x2f6b20(){const _0x379115=_0x588834;return _0x379115(0x643)[_0x379115(0x8e9)](_0x2f7b74(_0x43d6e1['$1']));}}}else return![];},Sprite_Damage[_0x534c3a(0x53c)]['setupCriticalEffect']=function(){const _0x40c675=_0x534c3a,_0x30aa50=VisuMZ[_0x40c675(0x99e)]['Settings'][_0x40c675(0x6c4)];this['_flashColor']=_0x30aa50[_0x40c675(0xa22)][_0x40c675(0x5d8)](0x0),this[_0x40c675(0x91a)]=_0x30aa50[_0x40c675(0x963)];},Sprite_Damage['prototype']['setupTextPopup']=function(_0x5644fb,_0x50e532){const _0x4b5535=_0x534c3a;this[_0x4b5535(0x174)]=_0x50e532[_0x4b5535(0x1de)]||[0x0,0x0,0x0,0x0],this[_0x4b5535(0x174)]=JsonEx[_0x4b5535(0x537)](this[_0x4b5535(0x174)]),this['_flashDuration']=_0x50e532['flashDuration']||0x0;const _0x1a91e2=this[_0x4b5535(0x85f)](),_0x3c6064=Math['floor'](_0x1a91e2*0x1e),_0x152ef0=this[_0x4b5535(0x6de)](_0x3c6064,_0x1a91e2);_0x152ef0[_0x4b5535(0xa72)][_0x4b5535(0x678)]=ColorManager[_0x4b5535(0x263)](_0x50e532['textColor']),_0x152ef0[_0x4b5535(0xa72)][_0x4b5535(0xed)](_0x5644fb,0x0,0x0,_0x3c6064,_0x1a91e2,_0x4b5535(0x585)),_0x152ef0['dy']=0x0;},Sprite_Damage[_0x534c3a(0x53c)]['setupIconTextPopup']=function(_0x25545d,_0x130abe,_0x28bd90){const _0x5dbcd6=_0x534c3a,_0x20f953=Math[_0x5dbcd6(0x9a7)](this[_0x5dbcd6(0x85f)](),ImageManager[_0x5dbcd6(0x726)]),_0x21c3f3=Math[_0x5dbcd6(0x922)](_0x20f953*0x1e),_0x8451b3=this[_0x5dbcd6(0x6de)](_0x21c3f3,_0x20f953),_0x464e33=ImageManager['iconWidth']/0x2,_0xa971cd=_0x8451b3['bitmap'][_0x5dbcd6(0x985)](_0x130abe+'\x20');_0x8451b3[_0x5dbcd6(0xa72)][_0x5dbcd6(0x678)]=ColorManager[_0x5dbcd6(0x263)](_0x28bd90[_0x5dbcd6(0x678)]),_0x8451b3[_0x5dbcd6(0xa72)]['drawText'](_0x130abe,_0x464e33,0x0,_0x21c3f3-_0x464e33,_0x20f953,_0x5dbcd6(0x585));const _0x11c1f1=Math[_0x5dbcd6(0x8d4)]((_0x20f953-ImageManager[_0x5dbcd6(0x726)])/0x2),_0x275662=_0x21c3f3/0x2-ImageManager[_0x5dbcd6(0x9a9)]-_0xa971cd/0x2+_0x464e33/0x2,_0x4bd0ad=ImageManager['loadSystem'](_0x5dbcd6(0x2c3)),_0x484eb9=ImageManager[_0x5dbcd6(0x9a9)],_0x3847b0=ImageManager[_0x5dbcd6(0x726)],_0x31db40=_0x25545d%0x10*_0x484eb9,_0x41387d=Math[_0x5dbcd6(0x922)](_0x25545d/0x10)*_0x3847b0;_0x8451b3[_0x5dbcd6(0xa72)][_0x5dbcd6(0x6b7)](_0x4bd0ad,_0x31db40,_0x41387d,_0x484eb9,_0x3847b0,_0x275662,_0x11c1f1),this[_0x5dbcd6(0x174)]=_0x28bd90[_0x5dbcd6(0x1de)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx['makeDeepCopy'](this[_0x5dbcd6(0x174)]),this['_flashDuration']=_0x28bd90[_0x5dbcd6(0x563)]||0x0,_0x8451b3['dy']=0x0;},VisuMZ['BattleCore'][_0x534c3a(0x737)]=Sprite_StateIcon[_0x534c3a(0x53c)][_0x534c3a(0x20d)],Sprite_StateIcon['prototype'][_0x534c3a(0x20d)]=function(){const _0x28c3ed=_0x534c3a;VisuMZ['BattleCore'][_0x28c3ed(0x737)][_0x28c3ed(0x63a)](this),this[_0x28c3ed(0x52c)]=this[_0x28c3ed(0x4fb)]>0x0?0xff:0x0;},VisuMZ['BattleCore'][_0x534c3a(0x5e9)]=Sprite_Weapon[_0x534c3a(0x53c)]['loadBitmap'],Sprite_Weapon['prototype'][_0x534c3a(0x7c3)]=function(){const _0x1f5f2a=_0x534c3a;VisuMZ['BattleCore']['Sprite_Weapon_loadBitmap'][_0x1f5f2a(0x63a)](this),this[_0x1f5f2a(0xa72)]&&(this[_0x1f5f2a(0xa72)]['smooth']=VisuMZ[_0x1f5f2a(0x99e)][_0x1f5f2a(0x795)][_0x1f5f2a(0x2a0)]['SmoothImage']);};function Sprite_HpGauge(){const _0x2e33fc=_0x534c3a;this[_0x2e33fc(0x96e)](...arguments);}Sprite_HpGauge[_0x534c3a(0x53c)]=Object[_0x534c3a(0x7f8)](Sprite_Gauge[_0x534c3a(0x53c)]),Sprite_HpGauge[_0x534c3a(0x53c)][_0x534c3a(0x1d7)]=Sprite_HpGauge,Sprite_HpGauge[_0x534c3a(0x53c)][_0x534c3a(0x96e)]=function(){const _0x451871=_0x534c3a;Sprite_Gauge['prototype'][_0x451871(0x96e)][_0x451871(0x63a)](this);},Sprite_HpGauge[_0x534c3a(0x53c)]['gaugeX']=function(){return 0x0;},Sprite_HpGauge[_0x534c3a(0x53c)]['redraw']=function(){const _0x19a78b=_0x534c3a;this[_0x19a78b(0xa72)][_0x19a78b(0x48e)]();const _0x31a89b=this[_0x19a78b(0x32c)]();!isNaN(_0x31a89b)&&this[_0x19a78b(0x612)]();};function Sprite_EnemyName(){const _0x32daf3=_0x534c3a;this[_0x32daf3(0x96e)](...arguments);}Sprite_EnemyName[_0x534c3a(0x53c)]=Object['create'](Sprite_Name[_0x534c3a(0x53c)]),Sprite_EnemyName[_0x534c3a(0x53c)]['constructor']=Sprite_EnemyName,Sprite_EnemyName['prototype'][_0x534c3a(0x96e)]=function(){const _0x356270=_0x534c3a;Sprite_Name[_0x356270(0x53c)][_0x356270(0x96e)]['call'](this),this['createAttachedSprites']();},Sprite_EnemyName[_0x534c3a(0x53c)]['initMembers']=function(){const _0x5eb11a=_0x534c3a;Sprite_Name[_0x5eb11a(0x53c)]['initMembers'][_0x5eb11a(0x63a)](this),this[_0x5eb11a(0x52c)]=0x0,this[_0x5eb11a(0x50d)]=null,this[_0x5eb11a(0x409)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName[_0x534c3a(0x53c)][_0x534c3a(0x52e)]=function(){const _0x40152b=_0x534c3a;if(VisuMZ[_0x40152b(0x99e)][_0x40152b(0x795)]['Enemy']['NameAttachStateIcon']){if(_0x40152b(0x646)!==_0x40152b(0x646)){function _0x5cc319(){const _0x38dbf0=_0x40152b;_0x748d83[_0x266a1c]===0x1&&this[_0x38dbf0(0xa94)]!==_0x129db9&&(_0x501604[_0x27454a]=null);}}else this[_0x40152b(0x476)]=new Sprite_StateIcon(),this['addChild'](this[_0x40152b(0x476)]);}},Sprite_EnemyName[_0x534c3a(0x53c)][_0x534c3a(0x856)]=function(){const _0x7b9a9=_0x534c3a;return Graphics[_0x7b9a9(0x29c)];},Sprite_EnemyName[_0x534c3a(0x53c)]['bitmapHeight']=function(){const _0x25a424=_0x534c3a;return this[_0x25a424(0x14c)]=this[_0x25a424(0x14c)]||Window_Base[_0x25a424(0x53c)][_0x25a424(0x952)]()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName[_0x534c3a(0x53c)][_0x534c3a(0x85f)]=function(){const _0x5b8af3=_0x534c3a;return VisuMZ[_0x5b8af3(0x99e)][_0x5b8af3(0x795)][_0x5b8af3(0x53f)][_0x5b8af3(0x441)]||$gameSystem[_0x5b8af3(0xa2d)]();},Sprite_EnemyName[_0x534c3a(0x53c)]['linkSprite']=function(_0x2ab297){const _0x5cdd89=_0x534c3a;this[_0x5cdd89(0x50d)]=_0x2ab297;},Sprite_EnemyName[_0x534c3a(0x53c)][_0x534c3a(0x59d)]=function(){const _0x43d258=_0x534c3a;Sprite_Name['prototype'][_0x43d258(0x59d)]['call'](this),this[_0x43d258(0x572)](),this[_0x43d258(0x36e)](),this['updateAttachedSprites'](),this[_0x43d258(0x9ff)]();},Sprite_EnemyName[_0x534c3a(0x53c)]['redraw']=function(){const _0x5b0662=_0x534c3a;this['_cacheTextWidth']=undefined;const _0x3113b2=this[_0x5b0662(0x180)](),_0x5ce408=this[_0x5b0662(0x856)](),_0x41ecc5=Window_Base['prototype'][_0x5b0662(0x952)]();this[_0x5b0662(0x48b)](),this['bitmap'][_0x5b0662(0x48e)](),this['bitmap']['drawText'](_0x3113b2,0x0,0x0,_0x5ce408,_0x41ecc5,_0x5b0662(0x585));},Sprite_EnemyName[_0x534c3a(0x53c)][_0x534c3a(0x572)]=function(){const _0x5dc3f5=_0x534c3a;if(!this[_0x5dc3f5(0x50d)])return;if(this[_0x5dc3f5(0x679)]!==this[_0x5dc3f5(0x50d)]['_battler']){if('GBSGR'===_0x5dc3f5(0x267)){function _0x2a593a(){const _0x4313f7=_0x5dc3f5;this[_0x4313f7(0x849)]=0x8;}}else this[_0x5dc3f5(0x627)](this[_0x5dc3f5(0x50d)][_0x5dc3f5(0x679)]);}},Sprite_EnemyName[_0x534c3a(0x53c)]['updatePosition']=function(){const _0xe2f55c=_0x534c3a;if(!this[_0xe2f55c(0x50d)])return;this[_0xe2f55c(0x14c)]=this['_lineHeight']||Window_Base[_0xe2f55c(0x53c)][_0xe2f55c(0x952)](),this['x']=this[_0xe2f55c(0x50d)][_0xe2f55c(0x674)],this['y']=this['_linkedSprite'][_0xe2f55c(0x2df)]-this[_0xe2f55c(0x14c)]*0.5;const _0x1fc10b=VisuMZ[_0xe2f55c(0x99e)][_0xe2f55c(0x795)][_0xe2f55c(0x53f)];this['x']+=_0x1fc10b[_0xe2f55c(0x658)]||0x0,this['y']+=_0x1fc10b['NameOffsetY']||0x0;},Sprite_EnemyName['prototype'][_0x534c3a(0x905)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x534c3a(0x53c)][_0x534c3a(0x6ce)]=function(){const _0x252e1c=_0x534c3a;if(!this['_stateIconSprite'])return;this['_battler']!==this[_0x252e1c(0x476)]['_battler']&&this['_stateIconSprite'][_0x252e1c(0x627)](this[_0x252e1c(0x679)]);const _0x58d6ff=this[_0x252e1c(0x1b8)]();this['_lineHeight']=this[_0x252e1c(0x14c)]||Window_Base[_0x252e1c(0x53c)][_0x252e1c(0x952)](),this[_0x252e1c(0x476)]['x']=Math[_0x252e1c(0x8d4)]((_0x58d6ff+ImageManager[_0x252e1c(0x9a9)])/0x2)+0x8,this[_0x252e1c(0x476)]['y']=this[_0x252e1c(0x14c)]/0x2;const _0x33a675=VisuMZ['BattleCore']['Settings'][_0x252e1c(0x53f)];this[_0x252e1c(0x476)]['x']+=_0x33a675[_0x252e1c(0x2fe)]||0x0,this['_stateIconSprite']['y']+=_0x33a675['AttachStateOffsetY']||0x0;},Sprite_EnemyName['prototype'][_0x534c3a(0x9ff)]=function(){const _0xf06160=_0x534c3a,_0x2baeab=this[_0xf06160(0x591)]();if(_0x2baeab&&this[_0xf06160(0x52c)]<0xff)this['opacity']+=0x10;else!_0x2baeab&&this[_0xf06160(0x52c)]>0x0&&(this[_0xf06160(0x52c)]-=0x10);},Sprite_EnemyName[_0x534c3a(0x53c)][_0x534c3a(0x591)]=function(){const _0x260895=_0x534c3a;if(!this['_battler'])return![];else{if(this[_0x260895(0x679)][_0x260895(0x43f)]())return![];else{if(!this[_0x260895(0x679)][_0x260895(0x760)]()){if(_0x260895(0x188)!==_0x260895(0x932))return![];else{function _0x2d4ef3(){const _0x34332b=_0x260895;return _0x53c4f2[_0x34332b(0x99e)]['Settings']['Actor'][_0x34332b(0x90d)];}}}else{if(this['compatibilityVisible']())return!![];else{if(this[_0x260895(0x8b3)]())return!![];else{if(SceneManager[_0x260895(0x76b)][_0x260895(0xa6f)]&&SceneManager['_scene'][_0x260895(0xa6f)][_0x260895(0x433)]&&SceneManager[_0x260895(0x76b)][_0x260895(0xa6f)][_0x260895(0x629)][_0x260895(0x96f)](this['_battler']))return!![];else{if(this[_0x260895(0x52c)]>0x0)return![];}}}}}}},Sprite_EnemyName['prototype']['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x534c3a(0x53c)]['isAlwaysVisible']=function(){const _0x1355e6=_0x534c3a;return VisuMZ['BattleCore'][_0x1355e6(0x795)][_0x1355e6(0x53f)][_0x1355e6(0x3f5)];},Sprite_EnemyName['prototype'][_0x534c3a(0x1b8)]=function(){const _0x5368af=_0x534c3a;if(!this['_battler'])return 0x0;if(this[_0x5368af(0x399)])return this[_0x5368af(0x399)];const _0x266efb=this['name']();return this[_0x5368af(0x48b)](),this[_0x5368af(0x399)]=this[_0x5368af(0xa72)]['measureTextWidth'](_0x266efb)||0x1,this[_0x5368af(0x399)];},VisuMZ['BattleCore'][_0x534c3a(0x1da)]=Sprite_Battleback[_0x534c3a(0x53c)][_0x534c3a(0x686)],Sprite_Battleback['prototype'][_0x534c3a(0x686)]=function(){const _0x35b133=_0x534c3a,_0x3e10ad=VisuMZ[_0x35b133(0x99e)]['Settings']['Battleback'];if(!_0x3e10ad){if(_0x35b133(0xa7c)!==_0x35b133(0xa7c)){function _0xd323a8(){const _0x367454=_0x35b133;if(!_0x22ec02)return![];if(!_0x3946dd[_0x367454(0x5e7)])return![];if(_0xa2a927[_0x367454(0x5e7)][_0x367454(0x119)]!==0x0)return![];if(!_0x2c44ed[_0x367454(0x432)][0x0])return![];if(!_0x4dd072[_0x367454(0x432)][0x0]['isActor']())return![];if(_0x370b50[_0x367454(0x4d6)]())return![];if(!this[_0x367454(0x628)]())return![];return _0x2bf194['prototype']['battleLayoutStyle']()==='portrait';}}else return VisuMZ[_0x35b133(0x99e)]['Sprite_Battleback_adjustPosition'][_0x35b133(0x63a)](this);}const _0x252bb7=String(_0x3e10ad['DefaultStyle'])||'MZ';switch(_0x252bb7){case'MZ':VisuMZ[_0x35b133(0x99e)][_0x35b133(0x1da)][_0x35b133(0x63a)](this);break;case'1:1':this[_0x35b133(0x2c2)]();break;case _0x35b133(0x38f):this[_0x35b133(0x3ed)]();break;case _0x35b133(0x768):this[_0x35b133(0x48d)]();break;case _0x35b133(0x765):this[_0x35b133(0x2ff)]();break;}},Sprite_Battleback[_0x534c3a(0x53c)]['adjustPosition_1for1']=function(){const _0x4278d1=_0x534c3a;this[_0x4278d1(0x456)]=Graphics[_0x4278d1(0x456)],this[_0x4278d1(0x363)]=Graphics[_0x4278d1(0x363)];const _0x7ade4c=0x1;this[_0x4278d1(0x43e)]['x']=_0x7ade4c,this['scale']['y']=_0x7ade4c,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x534c3a(0x3ed)]=function(){const _0x17dbe9=_0x534c3a;this['width']=Graphics[_0x17dbe9(0x456)],this[_0x17dbe9(0x363)]=Graphics[_0x17dbe9(0x363)];const _0x5c7261=this[_0x17dbe9(0x456)]/this[_0x17dbe9(0xa72)][_0x17dbe9(0x456)],_0x2b59f6=this[_0x17dbe9(0x363)]/this[_0x17dbe9(0xa72)][_0x17dbe9(0x363)],_0x8dc7f4=Math['max'](_0x5c7261,_0x2b59f6);this[_0x17dbe9(0x43e)]['x']=_0x8dc7f4,this[_0x17dbe9(0x43e)]['y']=_0x8dc7f4,this['x']=(Graphics[_0x17dbe9(0x456)]-this['width'])/0x2,this['y']=Graphics[_0x17dbe9(0x363)]-this['height'];},Sprite_Battleback[_0x534c3a(0x53c)][_0x534c3a(0x48d)]=function(){const _0x52b540=_0x534c3a;this[_0x52b540(0x456)]=Graphics[_0x52b540(0x456)],this[_0x52b540(0x363)]=Graphics[_0x52b540(0x363)];const _0x5c499c=Math[_0x52b540(0x623)](0x1,this[_0x52b540(0x456)]/this[_0x52b540(0xa72)]['width']),_0x4399f7=Math[_0x52b540(0x623)](0x1,this['height']/this['bitmap'][_0x52b540(0x363)]),_0x52e7f4=Math[_0x52b540(0x9a7)](_0x5c499c,_0x4399f7);this['scale']['x']=_0x52e7f4,this['scale']['y']=_0x52e7f4,this['x']=(Graphics['width']-this[_0x52b540(0x456)])/0x2,this['y']=Graphics[_0x52b540(0x363)]-this['height'];},Sprite_Battleback['prototype']['adjustPosition_ScaleUp']=function(){const _0x808e30=_0x534c3a;this[_0x808e30(0x456)]=Graphics[_0x808e30(0x456)],this['height']=Graphics[_0x808e30(0x363)];const _0x3e0cb1=Math[_0x808e30(0x9a7)](0x1,this[_0x808e30(0x456)]/this[_0x808e30(0xa72)][_0x808e30(0x456)]),_0x422f31=Math[_0x808e30(0x9a7)](0x1,this['height']/this[_0x808e30(0xa72)][_0x808e30(0x363)]),_0x16cab8=Math[_0x808e30(0x9a7)](_0x3e0cb1,_0x422f31);this['scale']['x']=_0x16cab8,this[_0x808e30(0x43e)]['y']=_0x16cab8,this['x']=(Graphics[_0x808e30(0x456)]-this[_0x808e30(0x456)])/0x2,this['y']=Graphics['height']-this[_0x808e30(0x363)];},Spriteset_Battle[_0x534c3a(0x53c)]['isFlipped']=function(){const _0x4a9eef=_0x534c3a;if(!$gameSystem[_0x4a9eef(0x4d6)]())return![];return![];},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x20f)]=function(){return 0x0;},Spriteset_Battle[_0x534c3a(0x53c)]['animationNextDelay']=function(){return 0x0;},VisuMZ['BattleCore'][_0x534c3a(0x1ea)]=Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x58d)],Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x58d)]=function(){const _0x1fd8b0=_0x534c3a;VisuMZ[_0x1fd8b0(0x99e)][_0x1fd8b0(0x1ea)][_0x1fd8b0(0x63a)](this),this[_0x1fd8b0(0x6f0)](),this[_0x1fd8b0(0x7f9)](),this['createEnemyNames']();},VisuMZ['BattleCore'][_0x534c3a(0x3d4)]=Spriteset_Battle['prototype']['update'],Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x59d)]=function(){const _0x4a447c=_0x534c3a;VisuMZ[_0x4a447c(0x99e)]['Spriteset_Battle_update']['call'](this),this[_0x4a447c(0x1e4)]();},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x6f0)]=function(){const _0x332340=_0x534c3a;this[_0x332340(0x5be)]=new Weather(),this[_0x332340(0xea)][_0x332340(0x2cf)](this['_weather']);},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x1e4)]=function(){const _0x349c2e=_0x534c3a;this[_0x349c2e(0x5be)]['type']=$gameScreen[_0x349c2e(0x6ab)](),this[_0x349c2e(0x5be)][_0x349c2e(0xa46)]=$gameScreen[_0x349c2e(0x448)]();},Game_Interpreter[_0x534c3a(0x53c)]['command236']=function(_0x55a21d){const _0x202eb0=_0x534c3a;$gameScreen[_0x202eb0(0x19d)](_0x55a21d[0x0],_0x55a21d[0x1],_0x55a21d[0x2]);if(_0x55a21d[0x3])this[_0x202eb0(0x41c)](_0x55a21d[0x2]);return!![];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x9a2)]=Game_Interpreter[_0x534c3a(0x53c)]['command283'],Game_Interpreter[_0x534c3a(0x53c)][_0x534c3a(0xa08)]=function(_0x3578b7){const _0x55a037=_0x534c3a;if(SceneManager['isSceneBattle']()){if(_0x55a037(0x642)===_0x55a037(0xdf)){function _0x1ac95b(){const _0x4f6f4a=_0x55a037,_0x112577=_0x1c694e[_0x4f6f4a(0x99e)][_0x4f6f4a(0x795)][_0x4f6f4a(0x871)],_0x255655=_0x112577[_0x4f6f4a(0xa27)];_0x255655&&_0x56fa19['BattleCore']['CheckMapBattleEventValid'](_0x255655)&&(this[_0x4f6f4a(0x7d8)]=!![],_0x397c33[_0x4f6f4a(0x821)](_0x112577[_0x4f6f4a(0xa27)]),_0x5986b9[_0x4f6f4a(0x6d0)](),_0x5b2bce[_0x4f6f4a(0x6cf)][_0x4f6f4a(0x4f2)]=!![]),_0x112577[_0x4f6f4a(0x1ff)]>0x0&&(this[_0x4f6f4a(0x838)]=!![]);}}else return SceneManager[_0x55a037(0x76b)]['_spriteset']['changeBattlebacks'](_0x3578b7[0x0],_0x3578b7[0x1]),!![];}else{if(_0x55a037(0x64d)===_0x55a037(0x64d))return VisuMZ[_0x55a037(0x99e)][_0x55a037(0x9a2)][_0x55a037(0x63a)](this,_0x3578b7);else{function _0x32d6a1(){const _0x4cb6dd=_0x55a037,_0x420200=this['_actor']['skillTypes'](),_0x42f6db=_0x420200[_0x4cb6dd(0x193)](_0xc3b97d=>_0x17c64c[_0x4cb6dd(0x41e)](_0x37e0db)[_0x4cb6dd(0x96f)](_0xc3b97d));return _0x42f6db['length']<=0x0;}}}},Spriteset_Battle[_0x534c3a(0x53c)]['updateBattlebackBitmap']=function(_0x3d920c,_0x4465ec){_0x3d920c['bitmap']=_0x4465ec;},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x661)]=function(_0x5baa6a,_0x363da){const _0x195251=_0x534c3a;_0x5baa6a=_0x5baa6a||'',_0x363da=_0x363da||'';_0x5baa6a===''&&_0x363da===''&&(_0x5baa6a=this[_0x195251(0xa31)][_0x195251(0x37c)](),_0x363da=this['_back2Sprite'][_0x195251(0x57b)]());const _0x2c56b0=ImageManager[_0x195251(0x864)](_0x5baa6a),_0x3b4b5a=ImageManager[_0x195251(0x549)](_0x363da);_0x2c56b0['addLoadListener'](this['updateBattlebackBitmap1'][_0x195251(0x15a)](this,this[_0x195251(0xa31)],this[_0x195251(0x2a7)],_0x2c56b0,_0x3b4b5a));},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x24f)]=function(_0x3762b5,_0x36b81a,_0xd8113b,_0x190aa5){const _0x29ddb6=_0x534c3a;_0x190aa5[_0x29ddb6(0x374)](this[_0x29ddb6(0x392)][_0x29ddb6(0x15a)](this,_0x3762b5,_0x36b81a,_0xd8113b,_0x190aa5));},Spriteset_Battle['prototype'][_0x534c3a(0x392)]=function(_0xf49b5d,_0x219e2c,_0x7768c8,_0x32b13b){const _0x38cfc8=_0x534c3a;_0xf49b5d[_0x38cfc8(0xa72)]=_0x7768c8,_0x219e2c['bitmap']=_0x32b13b,_0xf49b5d[_0x38cfc8(0x686)](),_0x219e2c[_0x38cfc8(0x686)]();},VisuMZ[_0x534c3a(0x99e)]['Spriteset_Battle_createBattleField']=Spriteset_Battle['prototype'][_0x534c3a(0x402)],Spriteset_Battle[_0x534c3a(0x53c)]['createBattleField']=function(){const _0x27a2d9=_0x534c3a;VisuMZ['BattleCore'][_0x27a2d9(0x505)][_0x27a2d9(0x63a)](this),this['createBattleFieldBattleCore']();},Spriteset_Battle['prototype'][_0x534c3a(0x614)]=function(){const _0x4d11c8=_0x534c3a;this[_0x4d11c8(0x9f4)](),this[_0x4d11c8(0x11f)](),this[_0x4d11c8(0x2e4)](),this[_0x4d11c8(0x67f)]();},Spriteset_Battle[_0x534c3a(0x53c)]['createBattleFieldContainer']=function(){const _0x123c0a=_0x534c3a;this[_0x123c0a(0xa97)]=new Sprite(),this[_0x123c0a(0xea)][_0x123c0a(0x2cf)](this[_0x123c0a(0xa97)]);},Spriteset_Battle['prototype'][_0x534c3a(0x11f)]=function(){const _0x4e62a6=_0x534c3a;this[_0x4e62a6(0x605)]=new Sprite(),this[_0x4e62a6(0xea)][_0x4e62a6(0x2cf)](this['_animationContainer']);},Spriteset_Battle[_0x534c3a(0x53c)]['createDamageContainer']=function(){const _0x111644=_0x534c3a;this['_damageContainer']=new Sprite(),this['_damageContainer']['x']=this[_0x111644(0xea)]['x'],this[_0x111644(0x39d)]['y']=this[_0x111644(0xea)]['y'],this['addChild'](this['_damageContainer']);},Spriteset_Battle[_0x534c3a(0x53c)]['adjustFlippedBattlefield']=function(){const _0x4d3fc5=_0x534c3a;if(!this[_0x4d3fc5(0x62c)]())return;this[_0x4d3fc5(0xa97)][_0x4d3fc5(0x43e)]['x']=-0x1,this[_0x4d3fc5(0xa97)]['x']=this[_0x4d3fc5(0xea)][_0x4d3fc5(0x456)],this['_animationContainer'][_0x4d3fc5(0x43e)]['x']=-0x1,this[_0x4d3fc5(0x605)]['x']=this[_0x4d3fc5(0xea)]['width'],this[_0x4d3fc5(0x39d)][_0x4d3fc5(0x43e)]['x']=-0x1,this[_0x4d3fc5(0x39d)]['x']=this[_0x4d3fc5(0xea)]['x']+this['_battleField'][_0x4d3fc5(0x456)];},Spriteset_Battle[_0x534c3a(0x53c)]['createEnemies']=function(){const _0x26fda2=_0x534c3a;if(Imported[_0x26fda2(0x9fc)]&&VisuMZ[_0x26fda2(0x179)]['Settings']['UI'][_0x26fda2(0x359)]){if('lYkpI'!==_0x26fda2(0x616))this[_0x26fda2(0x18e)]();else{function _0x35cec9(){const _0x1ccc8f=_0x26fda2;if(!this['isConfused']()&&_0x3d649d[_0x1ccc8f(0x253)])return!![];return _0xe79fbc['prototype'][_0x1ccc8f(0x540)][_0x1ccc8f(0x63a)](this);}}}const _0x2b6b1a=$gameTroop[_0x26fda2(0x8a8)](),_0x283dd5=[];for(const _0x45af0f of _0x2b6b1a){if('hjfXR'==='rJERa'){function _0x253148(){const _0x408543=_0x26fda2;_0x3d0571[_0x408543(0x53c)][_0x408543(0xf1)]['call'](this,_0x2e204e);}}else _0x283dd5[_0x26fda2(0x3ba)](new Sprite_Enemy(_0x45af0f));}_0x283dd5['sort'](this[_0x26fda2(0x638)][_0x26fda2(0x15a)](this));for(const _0x5adc45 of _0x283dd5){this['_battlerContainer'][_0x26fda2(0x2cf)](_0x5adc45);}this[_0x26fda2(0x30b)]=_0x283dd5;},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x50f)]=function(){const _0x21d810=_0x534c3a;this[_0x21d810(0x831)]=[];for(let _0x4faf2c=0x0;_0x4faf2c<$gameParty[_0x21d810(0x8ac)]();_0x4faf2c++){const _0x58ca67=$gameParty[_0x21d810(0x668)]()[_0x4faf2c],_0x249696=new Sprite_Actor();_0x249696[_0x21d810(0x422)](_0x58ca67),_0x249696[_0x21d810(0x749)](_0x58ca67),_0x249696[_0x21d810(0x59d)](),this[_0x21d810(0x831)][_0x21d810(0x3ba)](_0x249696),this[_0x21d810(0xa97)]['addChild'](_0x249696);}},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x697)]=function(_0x4ffb11,_0x3b6217,_0x294780,_0x1ea9c6){const _0x3b03e9=_0x534c3a,_0x457392=this[_0x3b03e9(0x5e5)](_0x3b6217),_0x3294e9=new(_0x457392?Sprite_AnimationMV:Sprite_Animation)(),_0xa8560e=this[_0x3b03e9(0x813)](_0x4ffb11);if(this[_0x3b03e9(0x91e)](_0x4ffb11[0x0])){if('zHdFZ'!==_0x3b03e9(0x741))_0x294780=!_0x294780;else{function _0x8aa08d(){const _0x192c5a=_0x3b03e9;this[_0x192c5a(0x1bc)](_0x51a75a['svBattlerData']()['motionIdle']||'walk');}}}_0x3294e9[_0x3b03e9(0x432)]=_0x4ffb11,_0x3294e9[_0x3b03e9(0x627)](_0xa8560e,_0x3b6217,_0x294780,_0x1ea9c6),this[_0x3b03e9(0x5c0)](_0x3294e9);},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x5c0)]=function(_0x3006db){const _0x2b5d63=_0x534c3a;this[_0x2b5d63(0x64e)](_0x3006db)?this[_0x2b5d63(0x628)]()['addChild'](_0x3006db):this[_0x2b5d63(0x605)][_0x2b5d63(0x2cf)](_0x3006db),this[_0x2b5d63(0x164)][_0x2b5d63(0x3ba)](_0x3006db);},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x64e)]=function(_0x23ec41){const _0x46c713=_0x534c3a;if(!_0x23ec41)return![];if(!_0x23ec41['_animation'])return![];if(_0x23ec41[_0x46c713(0x5e7)][_0x46c713(0x119)]!==0x0)return![];if(!_0x23ec41[_0x46c713(0x432)][0x0])return![];if(!_0x23ec41[_0x46c713(0x432)][0x0][_0x46c713(0x1e7)]())return![];if($gameSystem[_0x46c713(0x4d6)]())return![];if(!this[_0x46c713(0x628)]())return![];return Window_BattleStatus[_0x46c713(0x53c)][_0x46c713(0x1d5)]()===_0x46c713(0x1ab);},Spriteset_Battle['prototype'][_0x534c3a(0x628)]=function(){const _0x26f963=_0x534c3a;if(!SceneManager['_scene'])return;if(!SceneManager[_0x26f963(0x76b)]['_statusWindow'])return;if(!SceneManager[_0x26f963(0x76b)][_0x26f963(0x186)]['_effectsContainer'])return;return SceneManager[_0x26f963(0x76b)][_0x26f963(0x186)][_0x26f963(0x8d1)];},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x3a1)]=function(_0x260dcf){const _0x5510f0=_0x534c3a;this[_0x5510f0(0x17d)](_0x260dcf);for(const _0xd48efd of _0x260dcf['targetObjects']){_0xd48efd[_0x5510f0(0x530)]&&_0xd48efd['endAnimation']();}_0x260dcf[_0x5510f0(0x806)]();},Spriteset_Battle['prototype']['removeAnimationFromContainer']=function(_0x4a15cc){const _0x11e0fc=_0x534c3a;this[_0x11e0fc(0x164)][_0x11e0fc(0x46f)](_0x4a15cc);if(this[_0x11e0fc(0x64e)](_0x4a15cc)){if('YicIH'===_0x11e0fc(0x50a))this[_0x11e0fc(0x628)]()['removeChild'](_0x4a15cc);else{function _0x40f0dd(){const _0x259e8e=_0x11e0fc,_0x3dacdd=this[_0x259e8e(0x7c4)]();if(_0x3dacdd&&_0x417778)_0x3dacdd[_0x259e8e(0x604)]();return;}}}else this[_0x11e0fc(0x605)]['removeChild'](_0x4a15cc);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x533)]=Spriteset_Battle['prototype'][_0x534c3a(0x5f5)],Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x5f5)]=function(){const _0x29fc7c=_0x534c3a;VisuMZ['BattleCore'][_0x29fc7c(0x533)][_0x29fc7c(0x63a)](this),this[_0x29fc7c(0x266)]();},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x266)]=function(){const _0x4f4241=_0x534c3a;this[_0x4f4241(0xa97)]['children'][_0x4f4241(0xa92)](this[_0x4f4241(0x9ca)][_0x4f4241(0x15a)](this)),this[_0x4f4241(0x7b3)]();},Spriteset_Battle[_0x534c3a(0x53c)]['compareBattlerSprites']=function(_0x290e68,_0xd285b){const _0x23971b=_0x534c3a;if(VisuMZ[_0x23971b(0x99e)]['Settings'][_0x23971b(0x2a0)][_0x23971b(0x993)]){if(_0x290e68[_0x23971b(0x679)]&&_0xd285b[_0x23971b(0x679)]){if(_0x290e68['_battler']['isActor']()&&_0xd285b[_0x23971b(0x679)]['isEnemy']()){if(_0x23971b(0x635)!==_0x23971b(0x635)){function _0x408146(){const _0x4f4cec=_0x23971b;this[_0x4f4cec(0x315)]++;}}else return 0x1;}else{if(_0xd285b['_battler'][_0x23971b(0x1e7)]()&&_0x290e68[_0x23971b(0x679)][_0x23971b(0x405)]()){if(_0x23971b(0x649)!==_0x23971b(0x649)){function _0x5e95e1(){const _0x496e52=_0x23971b;_0x4d2d15+=_0x19544f,_0x31f97b+=_0x218955[_0x496e52(0x1e7)]()?-_0x11537c:_0x5204b4;}}else return-0x1;}}}}return _0x290e68['_baseY']!==_0xd285b[_0x23971b(0x2df)]?_0x290e68[_0x23971b(0x2df)]-_0xd285b['_baseY']:_0xd285b[_0x23971b(0x652)]-_0x290e68[_0x23971b(0x652)];},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x7b3)]=function(){const _0x1a8c62=_0x534c3a;if(!VisuMZ[_0x1a8c62(0x99e)][_0x1a8c62(0x795)][_0x1a8c62(0x2a0)]['PrioritySortActive'])return;const _0x4a25ed=BattleManager[_0x1a8c62(0x90c)];if(_0x4a25ed){if(_0x4a25ed[_0x1a8c62(0x1e7)]()&&!$gameSystem['isSideView']())return;const _0x25c1b4=_0x4a25ed[_0x1a8c62(0x7c4)]();if(_0x25c1b4&&_0x4a25ed['isActor']())this[_0x1a8c62(0xa97)][_0x1a8c62(0x2cf)](_0x25c1b4);}},Spriteset_Battle[_0x534c3a(0x53c)]['processEscape']=function(){const _0x520d58=_0x534c3a;for(const _0x371cc7 of $gameParty[_0x520d58(0x2b8)]()){if('wpSpS'!==_0x520d58(0x385)){function _0x12c5f8(){const _0x2142b3=_0x520d58;if(this['_borderPortraitDuration']>0x0){const _0x499548=this[_0x2142b3(0xaa7)],_0x5700b8=this[_0x2142b3(0x6be)];_0x5700b8['x']=(_0x5700b8['x']*(_0x499548-0x1)+this[_0x2142b3(0x2de)])/_0x499548,_0x5700b8['opacity']=(_0x5700b8['opacity']*(_0x499548-0x1)+0xff)/_0x499548,this['_borderPortraitDuration']--;}}}else{if(!_0x371cc7)continue;if(!_0x371cc7[_0x520d58(0x7c4)]())continue;_0x371cc7[_0x520d58(0x7c4)]()[_0x520d58(0x4bb)]=!![],_0x371cc7['battler']()[_0x520d58(0x954)]();}}},Spriteset_Battle['prototype'][_0x534c3a(0x7f9)]=function(){const _0x2d0ba6=_0x534c3a;this[_0x2d0ba6(0x434)]=new Sprite(),this[_0x2d0ba6(0xea)][_0x2d0ba6(0x2cf)](this[_0x2d0ba6(0x434)]);},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x4b2)]=function(){const _0x4df088=_0x534c3a;if(VisuMZ[_0x4df088(0x99e)]['Settings'][_0x4df088(0x53f)][_0x4df088(0xa41)])return;this['_enemyNameContainer']=new Sprite(),this[_0x4df088(0x434)]['addChild'](this[_0x4df088(0x1c1)]);for(const _0x290531 of this[_0x4df088(0x30b)]){const _0x4ae9ef=new Sprite_EnemyName();this[_0x4df088(0x1c1)]['addChild'](_0x4ae9ef),_0x4ae9ef[_0x4df088(0x951)](_0x290531);}},Spriteset_Battle['prototype'][_0x534c3a(0xaac)]=function(){return![];},Spriteset_Battle[_0x534c3a(0x53c)]['isAnyoneFloating']=function(){const _0x450c1d=_0x534c3a;return this[_0x450c1d(0x4fc)]()[_0x450c1d(0x316)](_0x4fa90a=>_0x4fa90a[_0x450c1d(0x356)]());},Spriteset_Battle['prototype']['isAnyoneJumping']=function(){const _0x4400ab=_0x534c3a;return this['battlerSprites']()[_0x4400ab(0x316)](_0x3d6590=>_0x3d6590[_0x4400ab(0x221)]());},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0xe3)]=function(){const _0xf2b864=_0x534c3a;return this[_0xf2b864(0x4fc)]()['some'](_0x13e27d=>_0x13e27d['isGrowing']());},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x97f)]=function(){const _0x773721=_0x534c3a;return this[_0x773721(0x4fc)]()['some'](_0xbbff9e=>_0xbbff9e[_0x773721(0x708)]());},Spriteset_Battle[_0x534c3a(0x53c)][_0x534c3a(0x757)]=function(){const _0x4a12e8=_0x534c3a;return this[_0x4a12e8(0x4fc)]()[_0x4a12e8(0x316)](_0x1eefee=>_0x1eefee[_0x4a12e8(0x86f)]());},Spriteset_Battle[_0x534c3a(0x53c)]['isAnyoneChangingOpacity']=function(){const _0xd95f86=_0x534c3a;return this[_0xd95f86(0x4fc)]()[_0xd95f86(0x316)](_0x3c0642=>_0x3c0642['isChangingOpacity']());},VisuMZ['BattleCore'][_0x534c3a(0x889)]=Window_ItemList['prototype'][_0x534c3a(0x22a)],Window_ItemList[_0x534c3a(0x53c)][_0x534c3a(0x22a)]=function(){const _0x50cd20=_0x534c3a;if(SceneManager[_0x50cd20(0xa8a)]()){if(SceneManager[_0x50cd20(0x76b)][_0x50cd20(0x1d5)]()===_0x50cd20(0x4a4))return VisuMZ[_0x50cd20(0x99e)][_0x50cd20(0x795)][_0x50cd20(0x27b)][_0x50cd20(0x6c1)];else{if(_0x50cd20(0x5ad)!==_0x50cd20(0x49f))return VisuMZ[_0x50cd20(0x99e)][_0x50cd20(0x795)]['BattleLayout']['SkillItemStandardCols'];else{function _0x38eb3d(){const _0x29887a=_0x50cd20;if(_0xe745d[_0x29887a(0x61a)]()[_0x29887a(0x6f5)]>0x0)return!![];this[_0x29887a(0x772)]='';}}}}else return VisuMZ[_0x50cd20(0x99e)]['Window_ItemList_maxCols'][_0x50cd20(0x63a)](this);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0xd2)]=Window_SkillList[_0x534c3a(0x53c)][_0x534c3a(0x22a)],Window_SkillList[_0x534c3a(0x53c)][_0x534c3a(0x22a)]=function(){const _0x1e30ab=_0x534c3a;if(SceneManager[_0x1e30ab(0xa8a)]()){if(SceneManager[_0x1e30ab(0x76b)][_0x1e30ab(0x1d5)]()===_0x1e30ab(0x4a4)){if(_0x1e30ab(0x7ad)===_0x1e30ab(0x7ad))return VisuMZ[_0x1e30ab(0x99e)]['Settings'][_0x1e30ab(0x27b)][_0x1e30ab(0x6c1)];else{function _0x2f4c85(){const _0x15e635=_0x1e30ab;if(!_0x384ef8[_0x15e635(0x5ae)]())return;_0x6329c6[_0x15e635(0x8aa)](this[_0x15e635(0x7ac)][_0x15e635(0x406)](_0x3ee0a8=>_0x3ee0a8[_0x15e635(0x180)])['join']('\x0a'));}}}else return VisuMZ[_0x1e30ab(0x99e)][_0x1e30ab(0x795)][_0x1e30ab(0x27b)][_0x1e30ab(0x929)];}else return VisuMZ[_0x1e30ab(0x99e)][_0x1e30ab(0xd2)][_0x1e30ab(0x63a)](this);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x86a)]=Window_Options[_0x534c3a(0x53c)][_0x534c3a(0x35d)],Window_Options[_0x534c3a(0x53c)][_0x534c3a(0x35d)]=function(){const _0x1f9dc9=_0x534c3a;VisuMZ[_0x1f9dc9(0x99e)][_0x1f9dc9(0x86a)][_0x1f9dc9(0x63a)](this),this['addAutoBattleCommands'](),this[_0x1f9dc9(0x7b0)]();},Window_Options[_0x534c3a(0x53c)][_0x534c3a(0x861)]=function(){const _0x3715d6=_0x534c3a;if(VisuMZ[_0x3715d6(0x99e)]['Settings'][_0x3715d6(0x52b)][_0x3715d6(0x7ff)]){if(_0x3715d6(0x472)===_0x3715d6(0x872)){function _0x4e1d1c(){const _0x122c4d=_0x3715d6;this['battleStatusWindowAnimationContainer']()[_0x122c4d(0x5b7)](_0x25aa94);}}else this['addBattleCoreAutoBattleStartupCommand'](),this[_0x3715d6(0x408)]();}},Window_Options[_0x534c3a(0x53c)]['addShowHpGaugeCommand']=function(){const _0x113002=_0x534c3a;if(!VisuMZ[_0x113002(0x99e)]['Settings'][_0x113002(0x79b)][_0x113002(0x882)])return;const _0x2226f8=TextManager[_0x113002(0x182)],_0x51d188=_0x113002(0x182);this['addCommand'](_0x2226f8,_0x51d188);},Window_Options[_0x534c3a(0x53c)]['addBattleCoreAutoBattleStartupCommand']=function(){const _0x1c9995=TextManager['autoBattleStart'],_0x17e27c='autoBattleAtStart';this['addCommand'](_0x1c9995,_0x17e27c);},Window_Options['prototype'][_0x534c3a(0x408)]=function(){const _0x588419=_0x534c3a,_0x54f115=TextManager[_0x588419(0x234)],_0x12209d='autoBattleUseSkills';this['addCommand'](_0x54f115,_0x12209d);},VisuMZ['BattleCore'][_0x534c3a(0xa75)]=Window_Options[_0x534c3a(0x53c)][_0x534c3a(0x4e7)],Window_Options['prototype'][_0x534c3a(0x4e7)]=function(_0xe3d719){const _0x3afe5f=_0x534c3a,_0x57d367=this['commandSymbol'](_0xe3d719);if(_0x57d367===_0x3afe5f(0xa5d)){if(_0x3afe5f(0x502)!==_0x3afe5f(0x502)){function _0x16ba7e(){const _0x46ec39=_0x3afe5f;_0x4fdbb7=_0x2164cc['replace'](/\x1I\[(\d+)\]/gi,''),_0xa2ef35=_0x13b957[_0x46ec39(0x283)](/\\I\[(\d+)\]/gi,'');}}else return this[_0x3afe5f(0x632)]();}else return VisuMZ[_0x3afe5f(0x99e)][_0x3afe5f(0xa75)][_0x3afe5f(0x63a)](this,_0xe3d719);},Window_Options[_0x534c3a(0x53c)][_0x534c3a(0x632)]=function(){const _0x2a923d=_0x534c3a,_0x260c05=VisuMZ[_0x2a923d(0x99e)][_0x2a923d(0x795)][_0x2a923d(0x52b)],_0x51e565=this[_0x2a923d(0x550)](_0x2a923d(0xa5d));return _0x51e565?_0x260c05['StyleON']:_0x260c05[_0x2a923d(0x361)];},Window_ShopStatus[_0x534c3a(0x53c)][_0x534c3a(0x44b)]=function(){const _0x50b33f=_0x534c3a,_0xcbce7b=DataManager['getDamageStyle'](this[_0x50b33f(0x139)]),_0x5d8418=VisuMZ['DamageStyles'][_0xcbce7b];if(!_0x5d8418)return this[_0x50b33f(0x243)]();const _0x10fa0c=_0x50b33f(0x4ca)[_0x50b33f(0x8e9)](this[_0x50b33f(0x139)][_0x50b33f(0x8fc)][_0x50b33f(0x88f)]),_0x5eec06=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item'][_0x50b33f(0x8fc)]['type']];return _0x5d8418[_0x10fa0c][_0x50b33f(0x8e9)](_0x5eec06);},Window_ShopStatus[_0x534c3a(0x53c)][_0x534c3a(0x61b)]=function(){const _0x4a9bed=_0x534c3a,_0x334527=DataManager[_0x4a9bed(0xa25)](this[_0x4a9bed(0x139)]),_0x6cce66=VisuMZ[_0x4a9bed(0x12c)][_0x334527];if(!_0x6cce66)return this[_0x4a9bed(0x753)]();return _0x6cce66[_0x4a9bed(0x3bf)]['call'](this);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x752)]=Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x96e)],Window_PartyCommand['prototype'][_0x534c3a(0x96e)]=function(_0x58a636){const _0x46c99a=_0x534c3a;VisuMZ[_0x46c99a(0x99e)][_0x46c99a(0x752)]['call'](this,_0x58a636),this[_0x46c99a(0x2e5)](_0x58a636);},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x2e5)]=function(_0x1e47a1){const _0x4a6d3f=_0x534c3a,_0xf1c43d=new Rectangle(0x0,0x0,_0x1e47a1['width'],_0x1e47a1[_0x4a6d3f(0x363)]);this[_0x4a6d3f(0xa67)]=new Window_Base(_0xf1c43d),this[_0x4a6d3f(0xa67)][_0x4a6d3f(0x52c)]=0x0,this['addChild'](this[_0x4a6d3f(0xa67)]),this[_0x4a6d3f(0x7a0)]();},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0xa8d)]=function(){const _0x561e38=_0x534c3a;Window_Command[_0x561e38(0x53c)][_0x561e38(0xa8d)][_0x561e38(0x63a)](this);if(this[_0x561e38(0xa67)])this[_0x561e38(0x7a0)]();},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x7a0)]=function(){const _0x87398b=_0x534c3a,_0x483bb9=this['_commandNameWindow'];_0x483bb9[_0x87398b(0x3d6)][_0x87398b(0x48e)]();const _0x5a5019=this[_0x87398b(0x24d)](this[_0x87398b(0x6d2)]());if(_0x5a5019===_0x87398b(0x92c)&&this[_0x87398b(0x76f)]()>0x0){if(_0x87398b(0x490)!==_0x87398b(0x490)){function _0x915f42(){const _0x524416=_0x87398b;this[_0x524416(0x687)]();}}else{const _0x8909c6=this[_0x87398b(0x586)](this[_0x87398b(0x6d2)]());let _0x5013aa=this[_0x87398b(0x7b5)](this[_0x87398b(0x6d2)]());_0x5013aa=_0x5013aa['replace'](/\\I\[(\d+)\]/gi,''),_0x483bb9[_0x87398b(0x27f)](),this[_0x87398b(0x9ed)](_0x5013aa,_0x8909c6),this[_0x87398b(0x875)](_0x5013aa,_0x8909c6),this[_0x87398b(0x2ac)](_0x5013aa,_0x8909c6);}}},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x9ed)]=function(_0x32bbd2,_0x21eb0b){},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x875)]=function(_0x2c65f3,_0x35358d){const _0x3f15f4=_0x534c3a,_0x56aef4=this[_0x3f15f4(0xa67)];_0x56aef4[_0x3f15f4(0xed)](_0x2c65f3,0x0,_0x35358d['y'],_0x56aef4[_0x3f15f4(0xa40)],_0x3f15f4(0x585));},Window_PartyCommand[_0x534c3a(0x53c)]['commandNameWindowCenter']=function(_0x59c629,_0x3a5d32){const _0x34cb9b=_0x534c3a,_0x23f1b9=this['_commandNameWindow'],_0x3f7afd=$gameSystem[_0x34cb9b(0x836)](),_0x289674=_0x3a5d32['x']+Math[_0x34cb9b(0x922)](_0x3a5d32[_0x34cb9b(0x456)]/0x2)+_0x3f7afd;_0x23f1b9['x']=_0x23f1b9[_0x34cb9b(0x456)]/-0x2+_0x289674,_0x23f1b9['y']=Math[_0x34cb9b(0x922)](_0x3a5d32[_0x34cb9b(0x363)]/0x2);},Window_PartyCommand[_0x534c3a(0x53c)]['makeCommandList']=function(){const _0x577e3e=_0x534c3a;this[_0x577e3e(0x9bb)](),this['addAutoBattleCommand'](),this[_0x577e3e(0x286)](),this[_0x577e3e(0xf0)](),this[_0x577e3e(0x331)]();},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x9bb)]=function(){const _0x4324be=_0x534c3a,_0x139cc5=this['commandStyle'](),_0x50f4de=VisuMZ['BattleCore']['Settings'][_0x4324be(0x5d9)][_0x4324be(0x8b5)],_0x268f1e=_0x139cc5===_0x4324be(0x357)?TextManager[_0x4324be(0xa24)]:_0x4324be(0x35b)[_0x4324be(0x8e9)](_0x50f4de,TextManager[_0x4324be(0xa24)]),_0x387c51=this[_0x4324be(0x9db)]();this[_0x4324be(0x5c6)](_0x268f1e,_0x4324be(0xa24),_0x387c51);},Window_PartyCommand[_0x534c3a(0x53c)]['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x810)]=function(){const _0x21bcfd=_0x534c3a;if(!this[_0x21bcfd(0x655)]())return;const _0x14599f=this[_0x21bcfd(0x31e)](),_0x22041f=VisuMZ['BattleCore'][_0x21bcfd(0x795)][_0x21bcfd(0x5d9)][_0x21bcfd(0xa8e)],_0x1bafac=_0x14599f==='text'?TextManager['autoBattle']:_0x21bcfd(0x35b)[_0x21bcfd(0x8e9)](_0x22041f,TextManager[_0x21bcfd(0x764)]),_0x3d26a8=this[_0x21bcfd(0x487)]();this[_0x21bcfd(0x5c6)](_0x1bafac,_0x21bcfd(0x764),_0x3d26a8);},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x655)]=function(){const _0x561a8d=_0x534c3a;return VisuMZ[_0x561a8d(0x99e)][_0x561a8d(0x795)]['PartyCmd']['CommandAddAutoBattle'];},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x487)]=function(){return!![];},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x286)]=function(){},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0xf0)]=function(){const _0x3a4a80=_0x534c3a;if(!this[_0x3a4a80(0x33c)]())return;const _0x191a3a=this[_0x3a4a80(0x31e)](),_0x37187b=VisuMZ[_0x3a4a80(0x99e)][_0x3a4a80(0x795)][_0x3a4a80(0x5d9)][_0x3a4a80(0x161)],_0x5d8084=_0x191a3a==='text'?TextManager['options']:'\x5cI[%1]%2'[_0x3a4a80(0x8e9)](_0x37187b,TextManager[_0x3a4a80(0x8a6)]),_0xf81caa=this[_0x3a4a80(0x32f)]();this[_0x3a4a80(0x5c6)](_0x5d8084,_0x3a4a80(0x8a6),_0xf81caa);},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x33c)]=function(){const _0x169ee4=_0x534c3a;return VisuMZ[_0x169ee4(0x99e)][_0x169ee4(0x795)][_0x169ee4(0x5d9)][_0x169ee4(0x3ff)];},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x32f)]=function(){return!![];},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x331)]=function(){const _0x1bb90c=_0x534c3a,_0x51fadb=this['commandStyle'](),_0x18e3f5=VisuMZ[_0x1bb90c(0x99e)][_0x1bb90c(0x795)][_0x1bb90c(0x5d9)][_0x1bb90c(0x99d)],_0xae2fbd=_0x51fadb===_0x1bb90c(0x357)?TextManager[_0x1bb90c(0x61f)]:_0x1bb90c(0x35b)['format'](_0x18e3f5,TextManager[_0x1bb90c(0x61f)]),_0x50575f=this[_0x1bb90c(0x440)]();this[_0x1bb90c(0x5c6)](_0xae2fbd,'escape',_0x50575f);},Window_PartyCommand['prototype'][_0x534c3a(0x440)]=function(){const _0x11c9c9=_0x534c3a;return BattleManager[_0x11c9c9(0x7d7)]();},Window_PartyCommand[_0x534c3a(0x53c)]['itemTextAlign']=function(){const _0x423d3b=_0x534c3a;return VisuMZ[_0x423d3b(0x99e)][_0x423d3b(0x795)][_0x423d3b(0x5d9)]['CmdTextAlign'];},Window_PartyCommand['prototype'][_0x534c3a(0xf1)]=function(_0x2431dc){const _0x48d408=_0x534c3a,_0x442796=this[_0x48d408(0x24d)](_0x2431dc);if(_0x442796===_0x48d408(0x68a)){if(_0x48d408(0x3d8)!==_0x48d408(0x3d8)){function _0x4562b4(){return!![];}}else this[_0x48d408(0x844)](_0x2431dc);}else _0x442796===_0x48d408(0x92c)?this[_0x48d408(0x208)](_0x2431dc):Window_Command[_0x48d408(0x53c)][_0x48d408(0xf1)][_0x48d408(0x63a)](this,_0x2431dc);},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x31e)]=function(){const _0x136a2a=_0x534c3a;return VisuMZ[_0x136a2a(0x99e)][_0x136a2a(0x795)][_0x136a2a(0x5d9)][_0x136a2a(0x4e6)];},Window_PartyCommand[_0x534c3a(0x53c)]['commandStyleCheck']=function(_0x313bf5){const _0x222a61=_0x534c3a;if(_0x313bf5<0x0)return'text';const _0x11247f=this[_0x222a61(0x31e)]();if(_0x11247f!==_0x222a61(0x425))return _0x11247f;else{if(this[_0x222a61(0x76f)]()>0x0){if('XvkbF'==='XvkbF'){const _0x54fe0e=this[_0x222a61(0x7b5)](_0x313bf5);if(_0x54fe0e[_0x222a61(0x5ed)](/\\I\[(\d+)\]/i)){const _0x590483=this['itemLineRect'](_0x313bf5),_0x400d79=this[_0x222a61(0x7eb)](_0x54fe0e)['width'];if(_0x400d79<=_0x590483[_0x222a61(0x456)]){if('DCwmr'==='DCwmr')return _0x222a61(0x68a);else{function _0xb11388(){const _0x45a89c=_0x222a61,_0x48f6ef=_0x194a48[_0x45a89c(0x99e)][_0x45a89c(0x795)][_0x45a89c(0xa01)];_0x48f6ef[_0x45a89c(0x919)]&&this[_0x45a89c(0x3ba)]('addText','<CENTER>%1'['format'](_0x257858[_0x45a89c(0x7ec)](_0x53fcdc)));if(_0x4f3cf3[_0x45a89c(0x6a6)](_0x4db609)){if(_0x48f6ef[_0x45a89c(0x607)])this[_0x45a89c(0x17e)](_0x4dfcf2['message1'],_0x1d5d4d,_0x1aed51);if(_0x48f6ef[_0x45a89c(0xe8)])this['displayItemMessage'](_0x3c6741[_0x45a89c(0xaab)],_0x465116,_0x15e157);}else{if(_0x48f6ef['ActionItemMsg'])this[_0x45a89c(0x17e)](_0x1fb4ea[_0x45a89c(0x955)],_0x529e28,_0x115cd4);}}}}else return'icon';}}else{function _0x51a10c(){const _0x2798d8=_0x222a61;this[_0x2798d8(0x96e)](...arguments);}}}}return'text';},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x844)]=function(_0x33eca1){const _0xc71b5c=_0x534c3a,_0x504e25=this[_0xc71b5c(0x586)](_0x33eca1),_0x2fa2fd=this['commandName'](_0x33eca1),_0x1590b5=this[_0xc71b5c(0x7eb)](_0x2fa2fd)[_0xc71b5c(0x456)];this[_0xc71b5c(0x966)](this['isCommandEnabled'](_0x33eca1));const _0x4efabf=this[_0xc71b5c(0x8e7)]();if(_0x4efabf===_0xc71b5c(0xd6))this['drawTextEx'](_0x2fa2fd,_0x504e25['x']+_0x504e25[_0xc71b5c(0x456)]-_0x1590b5,_0x504e25['y'],_0x1590b5);else{if(_0x4efabf===_0xc71b5c(0x585)){const _0x273a16=_0x504e25['x']+Math[_0xc71b5c(0x922)]((_0x504e25[_0xc71b5c(0x456)]-_0x1590b5)/0x2);this[_0xc71b5c(0x986)](_0x2fa2fd,_0x273a16,_0x504e25['y'],_0x1590b5);}else this[_0xc71b5c(0x986)](_0x2fa2fd,_0x504e25['x'],_0x504e25['y'],_0x1590b5);}},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x208)]=function(_0x58585d){const _0x1d985f=_0x534c3a;this[_0x1d985f(0x7b5)](_0x58585d)[_0x1d985f(0x5ed)](/\\I\[(\d+)\]/i);const _0x85fe63=Number(RegExp['$1'])||0x0,_0x23e6d4=this[_0x1d985f(0x586)](_0x58585d),_0x2e710b=_0x23e6d4['x']+Math[_0x1d985f(0x922)]((_0x23e6d4[_0x1d985f(0x456)]-ImageManager[_0x1d985f(0x9a9)])/0x2),_0x5ceb68=_0x23e6d4['y']+(_0x23e6d4['height']-ImageManager[_0x1d985f(0x726)])/0x2;this[_0x1d985f(0x336)](_0x85fe63,_0x2e710b,_0x5ceb68);},Window_PartyCommand['prototype']['hide']=function(){},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x4e3)]=function(){const _0x44c2f8=_0x534c3a;Window_Command['prototype']['activate'][_0x44c2f8(0x63a)](this);const _0x3ba050=this[_0x44c2f8(0x1d5)]();_0x3ba050===_0x44c2f8(0x4a4)&&this[_0x44c2f8(0x2f0)]();},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x1d5)]=function(){const _0x407c26=_0x534c3a;if(this[_0x407c26(0x564)])return this[_0x407c26(0x564)];return this[_0x407c26(0x564)]=SceneManager['_scene'][_0x407c26(0x1d5)](),this[_0x407c26(0x564)];},Window_PartyCommand[_0x534c3a(0x53c)][_0x534c3a(0x744)]=function(){const _0x2d26ca=_0x534c3a,_0x11642c=VisuMZ[_0x2d26ca(0x99e)]['Settings']['PartyCmd'],_0x3421d2=this[_0x2d26ca(0x199)]();switch(_0x3421d2){case _0x2d26ca(0xa24):this[_0x2d26ca(0x4cd)][_0x2d26ca(0x3c7)](_0x11642c[_0x2d26ca(0x290)]);break;case _0x2d26ca(0x764):this[_0x2d26ca(0x4cd)][_0x2d26ca(0x3c7)](_0x11642c['HelpAutoBattle']);break;case _0x2d26ca(0x8a6):this['_helpWindow']['setText'](_0x11642c['HelpOptions']);break;case _0x2d26ca(0x61f):this[_0x2d26ca(0x4cd)][_0x2d26ca(0x3c7)](_0x11642c['HelpEscape']);break;default:this['_helpWindow'][_0x2d26ca(0x3c7)]('');break;}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x8d5)]=Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x96e)],Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x96e)]=function(_0x1833ce){const _0x3e2463=_0x534c3a;VisuMZ[_0x3e2463(0x99e)][_0x3e2463(0x8d5)][_0x3e2463(0x63a)](this,_0x1833ce),this[_0x3e2463(0x2e5)](_0x1833ce);},Window_ActorCommand[_0x534c3a(0x53c)]['createCommandNameWindow']=function(_0x39ef8a){const _0x5947f9=_0x534c3a,_0x442d28=new Rectangle(0x0,0x0,_0x39ef8a[_0x5947f9(0x456)],_0x39ef8a['height']);this[_0x5947f9(0xa67)]=new Window_Base(_0x442d28),this[_0x5947f9(0xa67)][_0x5947f9(0x52c)]=0x0,this[_0x5947f9(0x2cf)](this[_0x5947f9(0xa67)]),this[_0x5947f9(0x7a0)]();},Window_ActorCommand[_0x534c3a(0x53c)]['callUpdateHelp']=function(){const _0x44388d=_0x534c3a;Window_Command[_0x44388d(0x53c)]['callUpdateHelp']['call'](this);if(this[_0x44388d(0xa67)])this[_0x44388d(0x7a0)]();},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x7a0)]=function(){const _0x4c9c6a=_0x534c3a,_0x319eb3=this[_0x4c9c6a(0xa67)];_0x319eb3[_0x4c9c6a(0x3d6)][_0x4c9c6a(0x48e)]();const _0x6e7df4=this[_0x4c9c6a(0x24d)](this[_0x4c9c6a(0x6d2)]());if(_0x6e7df4===_0x4c9c6a(0x92c)&&this[_0x4c9c6a(0x76f)]()>0x0){const _0x1a5869=this['itemLineRect'](this[_0x4c9c6a(0x6d2)]());let _0x3b8bae=this[_0x4c9c6a(0x7b5)](this[_0x4c9c6a(0x6d2)]());_0x3b8bae=_0x3b8bae[_0x4c9c6a(0x283)](/\\I\[(\d+)\]/gi,''),_0x319eb3[_0x4c9c6a(0x27f)](),this[_0x4c9c6a(0x9ed)](_0x3b8bae,_0x1a5869),this[_0x4c9c6a(0x875)](_0x3b8bae,_0x1a5869),this[_0x4c9c6a(0x2ac)](_0x3b8bae,_0x1a5869);}},Window_ActorCommand[_0x534c3a(0x53c)]['commandNameWindowDrawBackground']=function(_0x59f9c1,_0x2273e8){},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x875)]=function(_0x53c9e2,_0x8cf422){const _0x5156bf=_0x534c3a,_0x2545ec=this[_0x5156bf(0xa67)];_0x2545ec['drawText'](_0x53c9e2,0x0,_0x8cf422['y'],_0x2545ec[_0x5156bf(0xa40)],_0x5156bf(0x585));},Window_ActorCommand['prototype'][_0x534c3a(0x2ac)]=function(_0x57403a,_0xe080ab){const _0x9873c=_0x534c3a,_0x1a9851=this[_0x9873c(0xa67)],_0x9e2dbf=$gameSystem[_0x9873c(0x836)](),_0x6396bf=_0xe080ab['x']+Math[_0x9873c(0x922)](_0xe080ab['width']/0x2)+_0x9e2dbf;_0x1a9851['x']=_0x1a9851[_0x9873c(0x456)]/-0x2+_0x6396bf,_0x1a9851['y']=Math[_0x9873c(0x922)](_0xe080ab['height']/0x2);},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x1f6)]=function(){const _0x12c6a6=_0x534c3a;if(!this[_0x12c6a6(0x84f)])return;const _0xb0c685=this[_0x12c6a6(0x84f)][_0x12c6a6(0xa1e)]();for(const _0x408cbc of _0xb0c685){this[_0x12c6a6(0x9cb)](_0x408cbc['toUpperCase']()['trim']());}},Window_ActorCommand['prototype'][_0x534c3a(0x9cb)]=function(_0x587cbd){const _0xa29694=_0x534c3a;if(_0x587cbd===_0xa29694(0x93a)){if(_0xa29694(0x5c9)!==_0xa29694(0x175))this['addAttackCommand']();else{function _0x57712b(){const _0x5604c7=_0xa29694;this[_0x5604c7(0x184)]=null;}}}if([_0xa29694(0x320),_0xa29694(0x108)][_0xa29694(0x96f)](_0x587cbd)){if(_0xa29694(0x8f8)!==_0xa29694(0x8f8)){function _0x307b75(){const _0xccb183=_0xa29694,_0x27b046=this[_0xccb183(0x7cc)][_0xccb183(0x90e)][_0xccb183(0x437)](new _0x4ab0c8(0x0,0x0)),_0x26a383=this['_cursorArea'][_0xccb183(0x892)];_0x26a383['x']=_0x27b046['x']+this[_0xccb183(0x521)]['x'],_0x26a383['y']=_0x27b046['y']+this[_0xccb183(0x521)]['y'],_0x26a383[_0xccb183(0x456)]=this['innerWidth'],_0x26a383[_0xccb183(0x363)]=this[_0xccb183(0x9ac)];}}else this['addSkillCommands']();}_0x587cbd==='GUARD'&&this[_0xa29694(0xda)]();_0x587cbd===_0xa29694(0x73d)&&this[_0xa29694(0x5d6)]();_0x587cbd===_0xa29694(0x3b0)&&this[_0xa29694(0x331)]();_0x587cbd===_0xa29694(0x453)&&this[_0xa29694(0x810)]();if(_0x587cbd['match'](/STYPE: (\d+)/i)){if(_0xa29694(0x398)===_0xa29694(0x13e)){function _0x5cb8c8(){const _0x30057e=_0xa29694;this[_0x30057e(0xa94)]=_0x1c8d34||0x0;}}else{const _0x2f9a95=Number(RegExp['$1']);this[_0xa29694(0x799)](_0x2f9a95);}}else{if(_0x587cbd[_0xa29694(0x5ed)](/STYPE: (.*)/i)){const _0x2f1547=DataManager['getStypeIdWithName'](RegExp['$1']);this[_0xa29694(0x799)](_0x2f1547);}}if(_0x587cbd==='ALL\x20SKILLS'){if('jRZNw'!=='jRZNw'){function _0x192cfe(){const _0x5032d0=_0xa29694;if(this[_0x5032d0(0x7c4)]())this[_0x5032d0(0x7c4)]()['refreshMotion']();}}else this['addSingleSkillCommands']();}if(_0x587cbd[_0xa29694(0x5ed)](/SKILL: (\d+)/i)){const _0x393f93=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x393f93]);}else{if(_0x587cbd[_0xa29694(0x5ed)](/SKILL: (.*)/i)){const _0x11968b=DataManager['getSkillIdWithName'](RegExp['$1']);this[_0xa29694(0x514)]($dataSkills[_0x11968b]);}}if(_0x587cbd==='PARTY'&&Imported[_0xa29694(0x4c3)]){if('esxuf'===_0xa29694(0x212)){function _0x4ad1c2(){const _0x59560d=_0xa29694;_0x574fcc['_spriteset'][_0x59560d(0x20e)]();}}else this[_0xa29694(0x6db)]();}if([_0xa29694(0x937),_0xa29694(0x8f7)][_0xa29694(0x96f)](_0x587cbd)&&Imported[_0xa29694(0x176)]){if(_0xa29694(0x6c7)===_0xa29694(0x6c7))this[_0xa29694(0x702)]();else{function _0xb3b49a(){const _0x2470ec=_0xa29694;if(!_0x2e4db9[_0x2470ec(0xa8a)]())return;if(!this[_0x2470ec(0x1e1)])this['clearDamagePopup']();this[_0x2470ec(0x6a5)]();const _0xb240d0=this['battler']();if(_0xb240d0)_0xb240d0[_0x2470ec(0xa7d)]();}}}_0x587cbd==='WEAPON\x20SWAP'&&Imported['VisuMZ_2_WeaponSwapSystem']&&this[_0xa29694(0x1bb)](!![]);},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x226)]=function(){const _0x30e9a8=_0x534c3a,_0x308a01=$dataSkills[this[_0x30e9a8(0x84f)][_0x30e9a8(0xf4)]()];if(!_0x308a01)return;if(!this[_0x30e9a8(0x49b)](_0x308a01))return;const _0x260606=this[_0x30e9a8(0x31e)](),_0x2d89a0=DataManager[_0x30e9a8(0x307)](_0x308a01),_0x2078f2=DataManager[_0x30e9a8(0x80c)](_0x308a01),_0x2cfd4d=_0x260606===_0x30e9a8(0x357)?_0x2d89a0:_0x30e9a8(0x35b)[_0x30e9a8(0x8e9)](_0x2078f2,_0x2d89a0);this[_0x30e9a8(0x5c6)](_0x2cfd4d,_0x30e9a8(0x439),this['_actor'][_0x30e9a8(0x99b)]());},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0xda)]=function(){const _0x1ccc1a=_0x534c3a,_0x5e3d7c=$dataSkills[this[_0x1ccc1a(0x84f)][_0x1ccc1a(0x608)]()];if(!_0x5e3d7c)return;if(!this['canAddSkillCommand'](_0x5e3d7c))return;const _0x4c64eb=this[_0x1ccc1a(0x31e)](),_0x4caab8=DataManager[_0x1ccc1a(0x307)](_0x5e3d7c),_0x174200=DataManager['battleCommandIcon'](_0x5e3d7c),_0x57a7a2=_0x4c64eb===_0x1ccc1a(0x357)?_0x4caab8:_0x1ccc1a(0x35b)[_0x1ccc1a(0x8e9)](_0x174200,_0x4caab8);this[_0x1ccc1a(0x5c6)](_0x57a7a2,_0x1ccc1a(0x7d6),this[_0x1ccc1a(0x84f)][_0x1ccc1a(0x364)]());},Window_ActorCommand['prototype'][_0x534c3a(0x5d6)]=function(){const _0x1f0509=_0x534c3a,_0x4d1d72=this[_0x1f0509(0x31e)](),_0x1e8ceb=VisuMZ[_0x1f0509(0x99e)]['Settings'][_0x1f0509(0x67e)][_0x1f0509(0x706)],_0x2598b1=_0x4d1d72==='text'?TextManager[_0x1f0509(0x464)]:_0x1f0509(0x35b)[_0x1f0509(0x8e9)](_0x1e8ceb,TextManager['item']),_0x2917d7=this['isItemCommandEnabled']();this[_0x1f0509(0x5c6)](_0x2598b1,'item',_0x2917d7);},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x974)]=function(){const _0x5b1e05=_0x534c3a;return this[_0x5b1e05(0x84f)]&&this[_0x5b1e05(0x84f)]['canUseItemCommand']();},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0xa86)]=function(){const _0x869475=_0x534c3a,_0x2f6a18=this['_actor']['skillTypes']();for(const _0x1736a0 of _0x2f6a18){if(_0x869475(0x75a)!==_0x869475(0x372))this[_0x869475(0x799)](_0x1736a0);else{function _0x8a7d1d(){const _0x565109=_0x869475;return _0x3424be[_0x565109(0x99e)][_0x565109(0x795)][_0x565109(0x871)][_0x565109(0x4ff)];}}}},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x799)]=function(_0x2f5746){const _0x3e0352=_0x534c3a;let _0x3040d9=$dataSystem[_0x3e0352(0x2d6)][_0x2f5746];if(!_0x3040d9)return;let _0x313fc5=_0x3040d9;const _0x596e6e=this[_0x3e0352(0x31e)]();if(_0x596e6e==='text'){if('xYdNK'!==_0x3e0352(0xa2b)){function _0x39d43f(){const _0x56e33a=_0x3e0352;_0x56191e['BattleCore'][_0x56e33a(0x795)][_0x56e33a(0x2a0)][_0x56e33a(0xa04)]?_0xc3a8be[_0x56e33a(0x99e)][_0x56e33a(0x795)][_0x56e33a(0x2a0)][_0x56e33a(0xa04)][_0x56e33a(0x63a)](this,_0x5dd82c):_0x1818e3[_0x56e33a(0x99e)][_0x56e33a(0x9fa)]['call'](this,_0x5e2281);}}else _0x313fc5=_0x313fc5[_0x3e0352(0x283)](/\x1I\[(\d+)\]/gi,''),_0x313fc5=_0x313fc5[_0x3e0352(0x283)](/\\I\[(\d+)\]/gi,'');}else{if(!_0x3040d9[_0x3e0352(0x5ed)](/\\I\[(\d+)\]/i)){const _0x2803b6=Imported[_0x3e0352(0x1b6)]?VisuMZ['SkillsStatesCore'][_0x3e0352(0x795)][_0x3e0352(0x67c)]:VisuMZ[_0x3e0352(0x99e)]['Settings'][_0x3e0352(0x67e)],_0x28ce11=$dataSystem[_0x3e0352(0x1a6)][_0x3e0352(0x96f)](_0x2f5746),_0x5154a0=_0x28ce11?_0x2803b6['IconStypeMagic']:_0x2803b6['IconStypeNorm'];_0x313fc5='\x5cI[%1]%2'[_0x3e0352(0x8e9)](_0x5154a0,_0x3040d9);}}this[_0x3e0352(0x5c6)](_0x313fc5,_0x3e0352(0x979),!![],_0x2f5746);},Window_ActorCommand['prototype']['addSingleSkillCommands']=function(){const _0x1ed7be=_0x534c3a,_0x74dbc8=this[_0x1ed7be(0x84f)]['skillTypes'](),_0x4fd6e7=this[_0x1ed7be(0x84f)][_0x1ed7be(0x310)]();for(const _0x35e768 of _0x4fd6e7){if(!_0x35e768)continue;if(Imported[_0x1ed7be(0x1b6)]){if(_0x1ed7be(0x313)===_0x1ed7be(0x313)){if(this[_0x1ed7be(0x1df)](_0x35e768))continue;if(this['isHiddenSkill'](_0x35e768))continue;}else{function _0x19db35(){const _0xdc01a3=_0x1ed7be,_0x2839e5=this['_forcedBattlers'][_0xdc01a3(0x8bc)](),_0x986c19=_0x2839e5[0x0];return _0x986c19['_actions']=_0x986c19[_0xdc01a3(0xaa0)]||[],_0x986c19[_0xdc01a3(0xaa0)][0x0]=_0x2839e5[0x1],_0x986c19;}}}else{if(!_0x74dbc8[_0x1ed7be(0x96f)](_0x35e768[_0x1ed7be(0x237)]))continue;}this['addSingleSkillCommand'](_0x35e768);}},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x1df)]=function(_0x2fb9ba){const _0x2d67a3=_0x534c3a,_0x43ec76=this[_0x2d67a3(0x84f)][_0x2d67a3(0x2d6)](),_0x15f233=_0x43ec76[_0x2d67a3(0x193)](_0x116f57=>DataManager[_0x2d67a3(0x41e)](_0x2fb9ba)['includes'](_0x116f57));return _0x15f233[_0x2d67a3(0x4a2)]<=0x0;},Window_ActorCommand[_0x534c3a(0x53c)]['isHiddenSkill']=function(_0x3fd739){const _0xb621fb=_0x534c3a;if(!Window_SkillList[_0xb621fb(0x53c)][_0xb621fb(0x769)][_0xb621fb(0x63a)](this,_0x3fd739))return!![];if(!Window_SkillList[_0xb621fb(0x53c)][_0xb621fb(0x24b)]['call'](this,_0x3fd739))return!![];if(!Window_SkillList[_0xb621fb(0x53c)][_0xb621fb(0x1c8)][_0xb621fb(0x63a)](this,_0x3fd739))return!![];return![];},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x514)]=function(_0x93b795){const _0x1aa03a=_0x534c3a;if(!_0x93b795)return;if(!this['canAddSkillCommand'](_0x93b795))return;const _0x27339e=this[_0x1aa03a(0x31e)](),_0x1ce613=DataManager[_0x1aa03a(0x307)](_0x93b795),_0x337f24=DataManager['battleCommandIcon'](_0x93b795),_0x58e6e3=_0x27339e===_0x1aa03a(0x357)?_0x1ce613:_0x1aa03a(0x35b)['format'](_0x337f24,_0x1ce613),_0x30c97f=this[_0x1aa03a(0x84f)]['canUse'](_0x93b795);this[_0x1aa03a(0x5c6)](_0x58e6e3,_0x1aa03a(0x167),_0x30c97f,_0x93b795['id']);},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x49b)]=function(_0x5ea71f){const _0x4b100f=_0x534c3a,_0x7818b7=_0x5ea71f[_0x4b100f(0x650)];if(_0x7818b7[_0x4b100f(0x5ed)](/<COMMAND REQUIRE LEARN>/i)){if(_0x4b100f(0x694)!==_0x4b100f(0x694)){function _0x112dab(){this['startWeaponAnimation'](_0x27e97f['weaponImageId']);}}else{if(!this['_actor'][_0x4b100f(0x794)](_0x5ea71f['id']))return![];}}if(_0x7818b7[_0x4b100f(0x5ed)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x4b100f(0x84f)]['hasSkill'](_0x5ea71f['id']))return![];}const _0x4899a5=VisuMZ['BattleCore'][_0x4b100f(0x512)](_0x5ea71f,_0x4b100f(0x3a8));if(VisuMZ['BattleCore']['JS'][_0x4899a5]){if(!VisuMZ['BattleCore']['JS'][_0x4899a5]['call'](this,this[_0x4b100f(0x84f)],_0x5ea71f))return![];}return VisuMZ[_0x4b100f(0x99e)][_0x4b100f(0x837)](_0x5ea71f);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x837)]=function(_0x33593e){const _0x447d82=_0x534c3a,_0x55a468=_0x33593e['note'];if(_0x55a468[_0x447d82(0x5ed)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x344156=JSON[_0x447d82(0x610)]('['+RegExp['$1'][_0x447d82(0x5ed)](/\d+/g)+']');for(const _0x2a19ce of _0x344156){if(!$gameSwitches[_0x447d82(0x2bd)](_0x2a19ce))return![];}return!![];}if(_0x55a468[_0x447d82(0x5ed)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('onnnD'===_0x447d82(0x981)){function _0x23dcfe(){const _0x16b145=_0x447d82;return this[_0x16b145(0x77b)]()&&!this[_0x16b145(0xd0)]()?this['isForFriendBattleCore']():_0x25fd64[_0x16b145(0x99e)][_0x16b145(0x11a)]['call'](this);}}else{const _0x6f070c=JSON['parse']('['+RegExp['$1'][_0x447d82(0x5ed)](/\d+/g)+']');for(const _0x17e25b of _0x6f070c){if(_0x447d82(0x40b)==='upkgg'){if(!$gameSwitches[_0x447d82(0x2bd)](_0x17e25b))return![];}else{function _0x481ecf(){const _0x19b9b6=_0x447d82;_0x3a88bf=_0x3925ec['x']+_0xb8e2ca[_0x19b9b6(0x959)]+0x8;}}}return!![];}}if(_0x55a468['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x34247b=JSON[_0x447d82(0x610)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x15e980 of _0x34247b){if($gameSwitches[_0x447d82(0x2bd)](_0x15e980))return!![];}return![];}if(_0x55a468['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x30ca09=JSON[_0x447d82(0x610)]('['+RegExp['$1'][_0x447d82(0x5ed)](/\d+/g)+']');for(const _0x3ef584 of _0x30ca09){if(!$gameSwitches[_0x447d82(0x2bd)](_0x3ef584))return!![];}return![];}if(_0x55a468[_0x447d82(0x5ed)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x447d82(0x595)==='atzYM'){function _0x340ea8(){const _0x60a417=_0x447d82;this[_0x60a417(0x387)](_0x60a417(0x52c));}}else{const _0x42c5a2=JSON[_0x447d82(0x610)]('['+RegExp['$1'][_0x447d82(0x5ed)](/\d+/g)+']');for(const _0x422410 of _0x42c5a2){if(_0x447d82(0x25b)!=='zWPAd'){if(!$gameSwitches[_0x447d82(0x2bd)](_0x422410))return!![];}else{function _0x5da77c(){_0x4c283e=(_0x214455+_0x2f035f)/0x2;}}}return![];}}if(_0x55a468[_0x447d82(0x5ed)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5d34f9=JSON[_0x447d82(0x610)]('['+RegExp['$1'][_0x447d82(0x5ed)](/\d+/g)+']');for(const _0x336fa7 of _0x5d34f9){if('HqoNE'!==_0x447d82(0x83d)){if($gameSwitches[_0x447d82(0x2bd)](_0x336fa7))return![];}else{function _0x36f41e(){const _0x301284=_0x447d82;this[_0x301284(0x7b5)](_0x49820e)[_0x301284(0x5ed)](/\\I\[(\d+)\]/i);const _0xee2f1c=_0xa96ca1(_0x1801d7['$1'])||0x0,_0x17cba0=this[_0x301284(0x586)](_0x5a1d8a),_0x440bb4=_0x17cba0['x']+_0x585fa8[_0x301284(0x922)]((_0x17cba0[_0x301284(0x456)]-_0x144247[_0x301284(0x9a9)])/0x2),_0x5a547a=_0x17cba0['y']+(_0x17cba0[_0x301284(0x363)]-_0x11c308[_0x301284(0x726)])/0x2;this[_0x301284(0x336)](_0xee2f1c,_0x440bb4,_0x5a547a);}}}return!![];}return!![];},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x331)]=function(){const _0x40c288=_0x534c3a,_0x5dc5f8=this[_0x40c288(0x31e)](),_0x58657f=VisuMZ[_0x40c288(0x99e)][_0x40c288(0x795)][_0x40c288(0x5d9)][_0x40c288(0x99d)],_0x3216d8=_0x5dc5f8===_0x40c288(0x357)?TextManager[_0x40c288(0x61f)]:_0x40c288(0x35b)['format'](_0x58657f,TextManager[_0x40c288(0x61f)]),_0x10bc49=this[_0x40c288(0x440)]();this[_0x40c288(0x5c6)](_0x3216d8,_0x40c288(0x61f),_0x10bc49);},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x440)]=function(){const _0x564cb9=_0x534c3a;return BattleManager[_0x564cb9(0x7d7)]();},Window_ActorCommand['prototype'][_0x534c3a(0x810)]=function(){const _0x3adb88=_0x534c3a,_0x464511=this[_0x3adb88(0x31e)](),_0x2480ee=VisuMZ[_0x3adb88(0x99e)]['Settings'][_0x3adb88(0x5d9)][_0x3adb88(0xa8e)],_0x168933=_0x464511===_0x3adb88(0x357)?TextManager['autoBattle']:_0x3adb88(0x35b)['format'](_0x2480ee,TextManager['autoBattle']),_0x4f51be=this[_0x3adb88(0x487)]();this['addCommand'](_0x168933,_0x3adb88(0x764),_0x4f51be);},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x487)]=function(){return!![];},Window_ActorCommand[_0x534c3a(0x53c)]['itemTextAlign']=function(){const _0x2814a7=_0x534c3a;return VisuMZ[_0x2814a7(0x99e)][_0x2814a7(0x795)]['ActorCmd'][_0x2814a7(0x37e)];},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0xf1)]=function(_0x95d947){const _0x279441=_0x534c3a,_0x5005a5=this[_0x279441(0x24d)](_0x95d947);if(_0x5005a5===_0x279441(0x68a))this['drawItemStyleIconText'](_0x95d947);else _0x5005a5===_0x279441(0x92c)?this[_0x279441(0x208)](_0x95d947):Window_Command['prototype']['drawItem'][_0x279441(0x63a)](this,_0x95d947);this['drawSingleSkillCost'](_0x95d947);},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x31e)]=function(){const _0x332787=_0x534c3a;return VisuMZ[_0x332787(0x99e)]['Settings'][_0x332787(0x67e)][_0x332787(0x4e6)];},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x24d)]=function(_0x34e317){const _0x1a8e43=_0x534c3a;if(_0x34e317<0x0)return _0x1a8e43(0x357);const _0x5cbdc0=this[_0x1a8e43(0x31e)]();if(_0x5cbdc0!==_0x1a8e43(0x425)){if(_0x1a8e43(0x9f1)===_0x1a8e43(0x9f1))return _0x5cbdc0;else{function _0x16b5ed(){const _0x2e3a39=_0x1a8e43;this[_0x2e3a39(0x667)](),this['_requestRefresh']=![],_0x38b821[_0x2e3a39(0x1c4)]();}}}else{if(this[_0x1a8e43(0x76f)]()>0x0){const _0x141e47=this[_0x1a8e43(0x7b5)](_0x34e317);if(_0x141e47[_0x1a8e43(0x5ed)](/\\I\[(\d+)\]/i)){if(_0x1a8e43(0x400)!=='TqbPo'){const _0x3fabe7=this[_0x1a8e43(0x586)](_0x34e317),_0x5ef027=this[_0x1a8e43(0x7eb)](_0x141e47)[_0x1a8e43(0x456)];if(_0x5ef027<=_0x3fabe7[_0x1a8e43(0x456)])return _0x1a8e43(0x68a);else{if(_0x1a8e43(0x596)===_0x1a8e43(0x596))return _0x1a8e43(0x92c);else{function _0x5ce0ac(){const _0x4838d2=_0x1a8e43;return _0x4569bd[_0x4838d2(0x2b8)]()[_0x4838d2(0x193)](_0x52dfb0=>_0x52dfb0!==_0x693de8);}}}}else{function _0x5ef9b7(){const _0x297848=_0x1a8e43;if(!_0x5ecd39['isSideView']())return;const _0xea94af=this[_0x297848(0x7c4)]();if(!_0xea94af)return;_0x1f8cc1=_0x3f4015||0x0;if(_0x5af2d8>0x0){if(_0xea94af[_0x297848(0x674)]>_0x12e217)_0x39181a+=_0xea94af['width']/0x2+_0x34749d;if(_0xea94af['_baseX']<_0x1a80f2)_0x2ec9a7-=_0xea94af[_0x297848(0x456)]/0x2+_0x18a365;}if(_0x1b455e)this[_0x297848(0x379)](_0x14340f,_0x55c0c7,![]);_0x295d56-=_0xea94af[_0x297848(0x97e)],_0x1e7976-=_0xea94af['_homeY'],_0xea94af['startMove'](_0x4c7345,_0x4b7186,_0x108999);if(_0x19e016[_0x297848(0x9fc)])_0xea94af[_0x297848(0x939)](_0x143d53||_0x297848(0x6a4));}}}}}return _0x1a8e43(0x357);},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x844)]=function(_0x5c1b59){const _0xf408a0=_0x534c3a,_0x2288c9=this[_0xf408a0(0x586)](_0x5c1b59),_0x4dcf4b=this[_0xf408a0(0x7b5)](_0x5c1b59),_0x4a061b=this['textSizeEx'](_0x4dcf4b)[_0xf408a0(0x456)];this['changePaintOpacity'](this[_0xf408a0(0x9ec)](_0x5c1b59));const _0x3858ad=this[_0xf408a0(0x8e7)]();if(_0x3858ad===_0xf408a0(0xd6))this[_0xf408a0(0x986)](_0x4dcf4b,_0x2288c9['x']+_0x2288c9['width']-_0x4a061b,_0x2288c9['y'],_0x4a061b);else{if(_0x3858ad===_0xf408a0(0x585)){if(_0xf408a0(0x29e)!==_0xf408a0(0x187)){const _0x5d0422=_0x2288c9['x']+Math['floor']((_0x2288c9[_0xf408a0(0x456)]-_0x4a061b)/0x2);this['drawTextEx'](_0x4dcf4b,_0x5d0422,_0x2288c9['y'],_0x4a061b);}else{function _0x26ad64(){const _0x1b6100=_0xf408a0;this[_0x1b6100(0x3ba)]('addText',this[_0x1b6100(0x9c0)](_0xe138fc));}}}else this[_0xf408a0(0x986)](_0x4dcf4b,_0x2288c9['x'],_0x2288c9['y'],_0x4a061b);}},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x208)]=function(_0x57d6ce){const _0x51d92e=_0x534c3a;this[_0x51d92e(0x7b5)](_0x57d6ce)[_0x51d92e(0x5ed)](/\\I\[(\d+)\]/i);const _0x1c2559=Number(RegExp['$1'])||0x0,_0x538d0a=this['itemLineRect'](_0x57d6ce),_0x14b981=_0x538d0a['x']+Math[_0x51d92e(0x922)]((_0x538d0a[_0x51d92e(0x456)]-ImageManager[_0x51d92e(0x9a9)])/0x2),_0x5e1091=_0x538d0a['y']+(_0x538d0a[_0x51d92e(0x363)]-ImageManager[_0x51d92e(0x726)])/0x2;this[_0x51d92e(0x336)](_0x1c2559,_0x14b981,_0x5e1091);},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x9c1)]=function(_0x69d302){const _0x557147=_0x534c3a;if(!(VisuMZ[_0x557147(0x99e)][_0x557147(0x795)][_0x557147(0x67e)][_0x557147(0x418)]??!![]))return;const _0x304de7=this[_0x557147(0x3d1)](_0x69d302);if(![_0x557147(0x439),_0x557147(0x7d6),'singleSkill'][_0x557147(0x96f)](_0x304de7))return;const _0xcc5509=this[_0x557147(0x586)](_0x69d302);let _0x121bcc=null;if(_0x304de7===_0x557147(0x439)){if(_0x557147(0x7ca)===_0x557147(0x824)){function _0x49be0c(){const _0x3a682d=_0x557147;this['_shadowSprite']=new _0x2ed812(),this[_0x3a682d(0x5d7)][_0x3a682d(0xa72)]=_0x436a95[_0x3a682d(0x534)](_0x3a682d(0x9e7)),this[_0x3a682d(0x5d7)]['bitmap']['smooth']=_0x13079a[_0x3a682d(0x99e)][_0x3a682d(0x795)][_0x3a682d(0x2a0)]['SmoothImage'],this[_0x3a682d(0x5d7)][_0x3a682d(0x409)]['x']=0.5,this['_shadowSprite'][_0x3a682d(0x409)]['y']=0.5,this[_0x3a682d(0x5d7)]['y']=-0x2,this['_shadowSprite']['visible']=![],this[_0x3a682d(0x2cf)](this[_0x3a682d(0x5d7)]);}}else _0x121bcc=$dataSkills[this[_0x557147(0x84f)][_0x557147(0xf4)]()];}else _0x304de7===_0x557147(0x7d6)?_0x121bcc=$dataSkills[this[_0x557147(0x84f)]['guardSkillId']()]:_0x121bcc=$dataSkills[this[_0x557147(0x142)][_0x69d302][_0x557147(0x66e)]];this['drawSkillCost'](this['_actor'],_0x121bcc,_0xcc5509['x'],_0xcc5509['y'],_0xcc5509[_0x557147(0x456)]);},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x611)]=function(_0x41ec34,_0x56ae28,_0x5a0a02,_0x25e9f4,_0x4f6369){const _0x5eb292=_0x534c3a;if(!_0x56ae28)return;if(Imported[_0x5eb292(0x1b6)]){if('wyqXm'==='wyqXm')Window_Command[_0x5eb292(0x53c)][_0x5eb292(0x611)]['call'](this,_0x41ec34,_0x56ae28,_0x5a0a02,_0x25e9f4,_0x4f6369);else{function _0x32cb2f(){const _0x20a7b0=_0x5eb292;_0x4ff5b4=_0x2ac286[_0x20a7b0(0x99e)]['Game_Action_makeTargets'][_0x20a7b0(0x63a)](this);}}}else Window_SkillList[_0x5eb292(0x53c)]['drawSkillCost'][_0x5eb292(0x63a)](this,_0x56ae28,_0x5a0a02,_0x25e9f4,_0x4f6369);},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x1d9)]=function(){},Window_ActorCommand[_0x534c3a(0x53c)]['activate']=function(){const _0x47b54c=_0x534c3a;Window_Command[_0x47b54c(0x53c)][_0x47b54c(0x4e3)][_0x47b54c(0x63a)](this);const _0x3e2234=this['battleLayoutStyle']();_0x3e2234===_0x47b54c(0x4a4)&&this[_0x47b54c(0x2f0)]();},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x1d5)]=function(){const _0x2dba94=_0x534c3a;if(this['_battleLayoutStyle'])return this[_0x2dba94(0x564)];return this[_0x2dba94(0x564)]=SceneManager[_0x2dba94(0x76b)]['battleLayoutStyle'](),this['_battleLayoutStyle'];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x1c0)]=Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x627)],Window_ActorCommand['prototype']['setup']=function(_0x509396){const _0xcc024d=_0x534c3a,_0x49fd7d=this[_0xcc024d(0x1d5)]();if(_0x509396&&['xp','portrait'][_0xcc024d(0x96f)](_0x49fd7d))this['resizeWindowXPStyle'](_0x509396);else _0x509396&&[_0xcc024d(0x4a4)][_0xcc024d(0x96f)](_0x49fd7d)&&(this['resizeWindowBorderStyle'](_0x509396),this[_0xcc024d(0x2f0)]());VisuMZ[_0xcc024d(0x99e)]['Window_ActorCommand_setup'][_0xcc024d(0x63a)](this,_0x509396),_0x509396&&$gameTroop[_0xcc024d(0x2b8)]()[_0xcc024d(0x4a2)]>0x0&&_0x509396['battler']()&&_0x509396['battler']()[_0xcc024d(0x604)]();},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x347)]=function(_0x2f5456){const _0x4a37e5=_0x534c3a,_0x3f4ba2=Math['round'](Graphics[_0x4a37e5(0x29c)]/0x3),_0x2fe15b=Math[_0x4a37e5(0x8d4)](Graphics[_0x4a37e5(0x29c)]/$gameParty['battleMembers']()[_0x4a37e5(0x4a2)]),_0x343a67=Math['min'](_0x3f4ba2,_0x2fe15b),_0x206d4f=this[_0x4a37e5(0x35e)](VisuMZ[_0x4a37e5(0x99e)][_0x4a37e5(0x795)][_0x4a37e5(0x27b)][_0x4a37e5(0x6b5)]),_0x12ace4=_0x2fe15b*_0x2f5456[_0x4a37e5(0x6d2)]()+(_0x2fe15b-_0x343a67)/0x2,_0xe4a52e=SceneManager['_scene']['_statusWindow']['y']-_0x206d4f;this[_0x4a37e5(0x9e6)](_0x12ace4,_0xe4a52e,_0x343a67,_0x206d4f),this['createContents'](),this['setBackgroundType'](0x1);},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x97b)]=function(_0xfbe804){const _0x3962b2=_0x534c3a,_0x22ffa3=SceneManager[_0x3962b2(0x76b)]['partyCommandWindowRectBorderStyle']();this[_0x3962b2(0x9e6)](_0x22ffa3['x'],_0x22ffa3['y'],_0x22ffa3[_0x3962b2(0x456)],_0x22ffa3[_0x3962b2(0x363)]),this[_0x3962b2(0x5fa)](),this[_0x3962b2(0x7f0)](0x0);},Window_ActorCommand['prototype']['refreshDimmerBitmap']=function(){const _0x1fd850=_0x534c3a;if(this[_0x1fd850(0x5d3)]){if('tuLEi'!=='XKEsw'){const _0x1214e8=this[_0x1fd850(0x5d3)][_0x1fd850(0xa72)],_0x37a33b=this[_0x1fd850(0x456)]-0x8,_0x29af97=this[_0x1fd850(0x363)],_0x5b8a92=this[_0x1fd850(0x849)],_0x1c029e=ColorManager[_0x1fd850(0x7c1)](),_0x27976b=ColorManager['dimColor2']();this['_dimmerSprite']['x']=0x4,_0x1214e8[_0x1fd850(0x56a)](_0x37a33b,_0x29af97),_0x1214e8[_0x1fd850(0x5ab)](0x0,0x0,_0x37a33b,_0x5b8a92,_0x27976b,_0x1c029e,!![]),_0x1214e8[_0x1fd850(0x1b1)](0x0,_0x5b8a92,_0x37a33b,_0x29af97-_0x5b8a92*0x2,_0x1c029e),_0x1214e8[_0x1fd850(0x5ab)](0x0,_0x29af97-_0x5b8a92,_0x37a33b,_0x5b8a92,_0x1c029e,_0x27976b,!![]),this[_0x1fd850(0x5d3)][_0x1fd850(0x819)](0x0,0x0,_0x37a33b,_0x29af97);}else{function _0x758842(){const _0x5313f0=_0x1fd850;if(!_0x54572c)return![];return _0x136108[_0x5313f0(0x621)]()===this['friendsUnit']();}}}},Window_ActorCommand[_0x534c3a(0x53c)][_0x534c3a(0x744)]=function(){const _0x27d023=_0x534c3a;if(!this['_actor'])return;const _0xe34749=VisuMZ[_0x27d023(0x99e)]['Settings']['ActorCmd'],_0x53b101=this[_0x27d023(0x199)]();switch(_0x53b101){case _0x27d023(0x439):this[_0x27d023(0x8d6)]($dataSkills[this[_0x27d023(0x84f)][_0x27d023(0xf4)]()]);break;case'guard':this[_0x27d023(0x8d6)]($dataSkills[this[_0x27d023(0x84f)]['guardSkillId']()]);break;case _0x27d023(0x979):const _0xbc199a=_0xe34749['HelpSkillType'],_0x949f1a=_0xbc199a['format']($dataSystem[_0x27d023(0x2d6)][this[_0x27d023(0x9bf)]()]);this['_helpWindow'][_0x27d023(0x3c7)](_0x949f1a);break;case _0x27d023(0x167):this['setHelpWindowItem']($dataSkills[this[_0x27d023(0x9bf)]()]);break;case _0x27d023(0x464):this[_0x27d023(0x4cd)][_0x27d023(0x3c7)](_0xe34749[_0x27d023(0x236)]);break;case _0x27d023(0x61f):this[_0x27d023(0x4cd)][_0x27d023(0x3c7)](_0xe34749[_0x27d023(0x2cc)]);break;case _0x27d023(0x764):this[_0x27d023(0x4cd)][_0x27d023(0x3c7)](_0xe34749['HelpAutoBattle']);break;default:this[_0x27d023(0x4cd)]['setText']('');break;}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x7fd)]=Window_BattleStatus['prototype'][_0x534c3a(0x96e)],Window_BattleStatus['prototype']['initialize']=function(_0x3eeb6e){const _0x529d65=_0x534c3a;VisuMZ[_0x529d65(0x99e)][_0x529d65(0x7fd)][_0x529d65(0x63a)](this,_0x3eeb6e),this[_0x529d65(0x5ef)](),this['createAttachmentSprites']();},Window_BattleStatus[_0x534c3a(0x53c)]['battleLayoutStyle']=function(){const _0x3dee17=_0x534c3a;if(this[_0x3dee17(0x564)])return this[_0x3dee17(0x564)];return this[_0x3dee17(0x564)]=SceneManager[_0x3dee17(0x76b)][_0x3dee17(0x1d5)](),this[_0x3dee17(0x564)];},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x5ef)]=function(){const _0x5d7dfb=_0x534c3a;this['frameVisible']=this['isFrameVisible']();const _0x4e1615=VisuMZ[_0x5d7dfb(0x99e)][_0x5d7dfb(0x795)][_0x5d7dfb(0x27b)];_0x4e1615['StatusWindowSkinHide']&&(this[_0x5d7dfb(0x52c)]=0x0);},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x150)]=function(){const _0x4306e3=_0x534c3a,_0x16180d=VisuMZ['BattleCore'][_0x4306e3(0x795)][_0x4306e3(0x27b)];if(_0x16180d[_0x4306e3(0x73b)])return!![];const _0x20d1da=this[_0x4306e3(0x1d5)]();switch(_0x20d1da){case'list':case _0x4306e3(0x4a4):return!![];break;case _0x4306e3(0x7a2):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x2cd)]=function(){const _0x412d17=_0x534c3a;if(this[_0x412d17(0x150)]()){if(_0x412d17(0xa63)!=='HCUDm'){function _0x3ac55d(){return _0x5cc1d0[_0xab3dbc];}}else return 0x0;}else return 0xa;},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x22a)]=function(){const _0x58f89b=_0x534c3a,_0x11955b=this['battleLayoutStyle']();switch(_0x11955b){case'list':return 0x1;break;case'xp':case _0x58f89b(0x1ab):return $gameParty[_0x58f89b(0x668)]()[_0x58f89b(0x4a2)];break;case _0x58f89b(0x7a2):default:return $gameParty[_0x58f89b(0x8ac)]();break;}},Window_BattleStatus['prototype'][_0x534c3a(0x412)]=function(){const _0x22ed83=_0x534c3a,_0x14a6c2=this[_0x22ed83(0x1d5)]();switch(_0x14a6c2){case'list':return Window_StatusBase['prototype'][_0x22ed83(0x412)][_0x22ed83(0x63a)](this);break;case _0x22ed83(0x7a2):case'xp':case'portrait':default:return this['innerHeight'];break;}},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x9fd)]=function(){const _0x38846a=_0x534c3a,_0xbfed8=this[_0x38846a(0x1d5)]();switch(_0xbfed8){case _0x38846a(0xaa4):return Window_StatusBase[_0x38846a(0x53c)][_0x38846a(0x9fd)]['call'](this);break;case _0x38846a(0x7a2):case'xp':case _0x38846a(0x1ab):default:return 0x0;break;}},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x6d1)]=function(){const _0x255390=_0x534c3a;this[_0x255390(0x150)]()?Window_StatusBase['prototype']['updatePadding'][_0x255390(0x63a)](this):this[_0x255390(0x849)]=0x8;},Window_BattleStatus[_0x534c3a(0x53c)]['loadWindowskin']=function(){const _0x46cf1f=_0x534c3a,_0x49166d=VisuMZ[_0x46cf1f(0x99e)]['Settings'][_0x46cf1f(0x27b)];if(_0x49166d[_0x46cf1f(0x73b)])this[_0x46cf1f(0x4c2)]=ImageManager[_0x46cf1f(0x534)](_0x49166d['StatusWindowSkinFilename']);else{if(_0x46cf1f(0x30a)!==_0x46cf1f(0x248))Window_StatusBase['prototype']['loadWindowskin']['call'](this);else{function _0xa94b42(){const _0x46b7df=_0x46cf1f,_0xe184a5=_0x2f5057['BattleCore']['Settings'][_0x46b7df(0x871)],_0x1c53fe=_0xe184a5['BattleStartEvent'],_0x5a19e1=_0x426c39[_0x1c53fe];if(_0x5a19e1&&_0x5bc3ac[_0x46b7df(0x99e)][_0x46b7df(0x72a)](_0x1c53fe)){const _0x794f0b=this[_0x46b7df(0x325)]()?this[_0x46b7df(0x7f6)]:0x0,_0x3b2049=_0x5a19e1[_0x46b7df(0xaa4)];this[_0x46b7df(0x8d8)](_0x3b2049,_0x794f0b),this[_0x46b7df(0x142)]=_0x5ede78[_0x46b7df(0x537)](this[_0x46b7df(0x142)]);const _0x54405b={'code':0xbc3,'indent':this[_0x46b7df(0x170)],'parameters':_0x265293[_0x46b7df(0x537)](_0x5b02cd)};return this[_0x46b7df(0x142)]['splice'](this[_0x46b7df(0x71f)]+0x1,0x0,_0x54405b),!![];}else return _0x222b5b[_0x46b7df(0x99e)][_0x46b7df(0x1c7)]['call'](this,_0x3bb0e1);}}}},Window_BattleStatus[_0x534c3a(0x53c)]['drawItemBackground']=function(_0x160473){const _0x3170b5=_0x534c3a,_0x3d4ad2=VisuMZ['BattleCore'][_0x3170b5(0x795)][_0x3170b5(0x27b)];if(_0x3d4ad2[_0x3170b5(0x343)])return;Window_StatusBase[_0x3170b5(0x53c)][_0x3170b5(0x704)][_0x3170b5(0x63a)](this,_0x160473);},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x758)]=function(){const _0x43c7c7=_0x534c3a;this[_0x43c7c7(0x7e2)]=!![];},Window_BattleStatus['prototype'][_0x534c3a(0x59d)]=function(){const _0x215b0a=_0x534c3a;Window_StatusBase[_0x215b0a(0x53c)][_0x215b0a(0x59d)][_0x215b0a(0x63a)](this),this[_0x215b0a(0x807)](),this[_0x215b0a(0x7bc)]();if(this[_0x215b0a(0x1d5)]()==='border')this[_0x215b0a(0x3c6)]();},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x807)]=function(){const _0x143bf5=_0x534c3a;if($gameTemp[_0x143bf5(0xa53)]())this[_0x143bf5(0x667)](),this[_0x143bf5(0x7e2)]=![],$gameTemp['clearBattleRefreshRequest']();else{if(this[_0x143bf5(0x7e2)]){if(_0x143bf5(0x983)!==_0x143bf5(0x983)){function _0x49d66d(){this['addCombatLogCommand']();}}else this[_0x143bf5(0x7e2)]=![],this[_0x143bf5(0x9b7)](),this['updateAttachmentSprites']();}}},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x97d)]=function(){const _0x12d06a=_0x534c3a;Window_StatusBase[_0x12d06a(0x53c)][_0x12d06a(0x97d)]['call'](this);if(!$gameSystem[_0x12d06a(0x4d6)]())this[_0x12d06a(0x9b7)]();},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x1d9)]=function(){const _0x3dd984=_0x534c3a;if(this[_0x3dd984(0x1d7)]===Window_BattleStatus)return;Window_StatusBase[_0x3dd984(0x53c)]['hide'][_0x3dd984(0x63a)](this);},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0xa64)]=function(_0x157629){const _0x6aa806=_0x534c3a,_0x3460f1=this[_0x6aa806(0x1d5)]();switch(_0x3460f1){case'xp':case _0x6aa806(0x1ab):break;case _0x6aa806(0x7a2):case _0x6aa806(0xaa4):case'border':default:return Window_StatusBase[_0x6aa806(0x53c)][_0x6aa806(0xa64)][_0x6aa806(0x63a)](this,_0x157629);break;}},VisuMZ[_0x534c3a(0x99e)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus[_0x534c3a(0x53c)]['drawItemImage'],Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x156)]=function(_0x42324c){const _0x12f4ff=_0x534c3a,_0x5eb126=this[_0x12f4ff(0x1d5)]();switch(_0x5eb126){case _0x12f4ff(0xaa4):this[_0x12f4ff(0x222)](_0x42324c);break;case'xp':this[_0x12f4ff(0x8e5)](_0x42324c);break;case _0x12f4ff(0x1ab):this[_0x12f4ff(0x61d)](_0x42324c);break;case'default':case _0x12f4ff(0x4a4):default:VisuMZ['BattleCore']['Window_BattleStatus_drawItemImage'][_0x12f4ff(0x63a)](this,_0x42324c);break;}},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x7ce)]=function(_0x163605){const _0x446253=_0x534c3a,_0x3690db=this['battleLayoutStyle']();if(!$gameSystem[_0x446253(0x4d6)]())this[_0x446253(0x700)](_0x163605);switch(_0x3690db){case _0x446253(0xaa4):this[_0x446253(0x377)](_0x163605);break;case'xp':case _0x446253(0x1ab):case _0x446253(0x7a2):case _0x446253(0x4a4):default:this['drawItemStatusXPStyle'](_0x163605);break;}},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0xaa3)]=function(){const _0x1ab073=_0x534c3a,_0x145337=this[_0x1ab073(0x1d5)]();if(['xp'][_0x1ab073(0x96f)](_0x145337)&&!$gameSystem['isSideView']()){if(_0x1ab073(0xdc)!=='aMNbu'){function _0x4d350a(){const _0x148bf4=_0x1ab073;_0x59e2ea['BattleCore'][_0x148bf4(0x51a)]['call'](this,_0x4407fe),this[_0x148bf4(0xa0b)](),this[_0x148bf4(0x81b)]();const _0x416ff8=this[_0x148bf4(0x7c4)]();if(_0x416ff8)_0x416ff8['setBattler'](this);}}else{this['setCursorRect'](0x0,0x0,0x0,0x0);return;}}Window_StatusBase[_0x1ab073(0x53c)][_0x1ab073(0xaa3)][_0x1ab073(0x63a)](this);},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x700)]=function(_0x15a9db){const _0x966c75=_0x534c3a,_0x2351f5=this[_0x966c75(0x4c5)](_0x15a9db)[_0x966c75(0x7c4)]();if(!_0x2351f5)return;const _0xd27bb5=this[_0x966c75(0x1d5)](),_0x44d627=this[_0x966c75(0x334)](_0x15a9db);let _0x16d765=Math[_0x966c75(0x8d4)](_0x44d627['x']+_0x44d627[_0x966c75(0x456)]/0x2)+this[_0x966c75(0x849)];[_0x966c75(0xaa4)][_0x966c75(0x96f)](_0xd27bb5)&&(_0x16d765=_0x44d627[_0x966c75(0x456)]/$gameParty[_0x966c75(0x668)]()[_0x966c75(0x4a2)],_0x16d765*=_0x15a9db,_0x16d765+=_0x44d627['width']/$gameParty[_0x966c75(0x668)]()[_0x966c75(0x4a2)]/0x2);let _0x3cea69=Math[_0x966c75(0x8d4)](this[_0x966c75(0x40e)](_0x15a9db,_0x2351f5,_0x44d627));_0x2351f5[_0x966c75(0x1f2)](_0x16d765,_0x3cea69),this[_0x966c75(0x5dc)](_0x2351f5,0x1),_0x2351f5[_0x966c75(0x97d)]();},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x40e)]=function(_0x3a0a32,_0x5c87a3,_0x48c397){const _0xe20508=_0x534c3a,_0x15696b=VisuMZ[_0xe20508(0x99e)]['Settings']['BattleLayout'],_0x349da5=this[_0xe20508(0x1d5)]();if(_0x349da5==='xp'){if(_0xe20508(0x5f0)!==_0xe20508(0x5f0)){function _0x4ddb93(){const _0x105e2c=_0xe20508;_0x4c0146[_0x105e2c(0x99e)]['Game_Action_clear'][_0x105e2c(0x63a)](this),this[_0x105e2c(0x845)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x105e2c(0x3a0)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0x105e2c(0x7a2);}}else{const _0x5b8a1a=_0x15696b[_0xe20508(0x3b5)];switch(_0x5b8a1a[_0xe20508(0x6c5)]()['trim']()){case _0xe20508(0x968):return _0x48c397[_0xe20508(0x363)]-_0x5c87a3[_0xe20508(0x5d7)][_0xe20508(0x363)]/0x4;break;case _0xe20508(0x585):const _0x1829b2=_0x15696b['XPActorDefaultHeight'];return(_0x48c397[_0xe20508(0x363)]+(_0x5c87a3[_0xe20508(0x363)]||_0x1829b2))/0x2;break;case'top':return 0x0;case _0xe20508(0x180):default:return this[_0xe20508(0x83b)](_0x48c397);break;}}}else{if(_0x349da5===_0xe20508(0x1ab)){}}return _0x5c87a3[_0xe20508(0x363)];},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x222)]=function(_0x3846a3){const _0x3848c3=_0x534c3a;if(!VisuMZ['BattleCore'][_0x3848c3(0x795)][_0x3848c3(0x27b)][_0x3848c3(0x461)])return;const _0x1bfd51=this[_0x3848c3(0x4c5)](_0x3846a3),_0x4bc4e9=this[_0x3848c3(0x334)](_0x3846a3);_0x4bc4e9[_0x3848c3(0x456)]=ImageManager[_0x3848c3(0x959)],_0x4bc4e9[_0x3848c3(0x363)]-=0x2,this[_0x3848c3(0x43b)](_0x1bfd51,_0x4bc4e9['x']+0x1,_0x4bc4e9['y']+0x1,_0x4bc4e9['width'],_0x4bc4e9['height']);},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x377)]=function(_0x242e73){const _0x113638=_0x534c3a,_0x3c2386=VisuMZ[_0x113638(0x99e)][_0x113638(0x795)][_0x113638(0x27b)],_0x327eba=$dataSystem[_0x113638(0x16b)]?0x4:0x3,_0x567b1d=_0x327eba*0x80+(_0x327eba-0x1)*0x8+0x4,_0x230a0f=this['actor'](_0x242e73),_0x15169e=this[_0x113638(0x334)](_0x242e73);let _0x4883fe=_0x15169e['x']+this[_0x113638(0x849)];_0x3c2386['ShowFacesListStyle']?_0x4883fe=_0x15169e['x']+ImageManager[_0x113638(0x959)]+0x8:_0x4883fe+=ImageManager[_0x113638(0x9a9)];const _0x1a375e=Math[_0x113638(0x8d4)](Math['min'](_0x15169e['x']+_0x15169e[_0x113638(0x456)]-_0x567b1d,_0x4883fe)),_0x17af95=Math[_0x113638(0x8d4)](_0x15169e['y']+(_0x15169e[_0x113638(0x363)]-Sprite_Name[_0x113638(0x53c)][_0x113638(0x823)]())/0x2),_0x288d28=Math[_0x113638(0x8d4)](_0x1a375e-ImageManager[_0x113638(0x9a9)]/0x2-0x4),_0x2d9cf4=Math[_0x113638(0x8d4)](_0x15169e['y']+(_0x15169e[_0x113638(0x363)]-ImageManager[_0x113638(0x726)])/0x2+ImageManager[_0x113638(0x726)]/0x2);let _0x556e6b=_0x1a375e+0x88;const _0x41e887=_0x17af95;this[_0x113638(0x28b)](_0x230a0f,_0x1a375e-0x4+(_0x3c2386[_0x113638(0x46e)]||0x0),_0x17af95+(_0x3c2386[_0x113638(0x9ba)]||0x0)),this['placeActorName'](_0x230a0f,_0x1a375e+(_0x3c2386['NameOffsetX']||0x0),_0x17af95+(_0x3c2386[_0x113638(0x3a7)]||0x0)),this['placeStateIcon'](_0x230a0f,_0x288d28+(_0x3c2386['StateIconOffsetX']||0x0),_0x2d9cf4+(_0x3c2386['StateIconOffsetY']||0x0)),this[_0x113638(0x7a8)](_0x230a0f,'hp',_0x556e6b+0x88*0x0+(_0x3c2386[_0x113638(0x8c0)]||0x0),_0x41e887+(_0x3c2386[_0x113638(0x7e0)]||0x0)),this[_0x113638(0x7a8)](_0x230a0f,'mp',_0x556e6b+0x88*0x1+(_0x3c2386[_0x113638(0x976)]||0x0),_0x41e887+(_0x3c2386['MpGaugeOffsetY']||0x0)),$dataSystem[_0x113638(0x16b)]&&this[_0x113638(0x7a8)](_0x230a0f,'tp',_0x556e6b+0x88*0x2+(_0x3c2386[_0x113638(0xd1)]||0x0),_0x41e887+(_0x3c2386[_0x113638(0xa15)]||0x0));},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x8e5)]=function(_0x4b59fb){const _0xf8e784=_0x534c3a;if(!$gameSystem['isSideView']())return;VisuMZ[_0xf8e784(0x99e)][_0xf8e784(0x40f)][_0xf8e784(0x63a)](this,_0x4b59fb);},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x1a2)]=function(_0x111f3c){const _0x17dab2=_0x534c3a,_0x1f0a4d=VisuMZ[_0x17dab2(0x99e)][_0x17dab2(0x795)][_0x17dab2(0x27b)],_0x24c0d8=this['actor'](_0x111f3c),_0x26dc47=this[_0x17dab2(0x334)](_0x111f3c),_0x4b4775=Math[_0x17dab2(0x8d4)](_0x26dc47['x']+(_0x26dc47[_0x17dab2(0x456)]-0x80)/0x2),_0x3ca512=this[_0x17dab2(0x83b)](_0x26dc47);let _0x597b28=_0x4b4775-ImageManager[_0x17dab2(0x9a9)]/0x2-0x4,_0x3d0d33=_0x3ca512+ImageManager[_0x17dab2(0x726)]/0x2;_0x597b28-ImageManager['iconWidth']/0x2<_0x26dc47['x']&&(_0x597b28=_0x4b4775+ImageManager[_0x17dab2(0x9a9)]/0x2-0x4,_0x3d0d33=_0x3ca512-ImageManager[_0x17dab2(0x726)]/0x2);const _0x4c7aae=_0x4b4775,_0x18038c=this['basicGaugesY'](_0x26dc47);this[_0x17dab2(0x28b)](_0x24c0d8,_0x4b4775+(_0x1f0a4d['TpbGaugeOffsetX']||0x0),_0x3ca512+(_0x1f0a4d[_0x17dab2(0x9ba)]||0x0)),this['placeActorName'](_0x24c0d8,_0x4b4775+(_0x1f0a4d['NameOffsetX']||0x0),_0x3ca512+(_0x1f0a4d[_0x17dab2(0x3a7)]||0x0)),this[_0x17dab2(0x653)](_0x24c0d8,_0x597b28+(_0x1f0a4d[_0x17dab2(0xa89)]||0x0),_0x3d0d33+(_0x1f0a4d[_0x17dab2(0x9cf)]||0x0)),this[_0x17dab2(0x7a8)](_0x24c0d8,'hp',_0x4c7aae+(_0x1f0a4d['HpGaugeOffsetX']||0x0),_0x18038c+(_0x1f0a4d['HpGaugeOffsetY']||0x0)),this[_0x17dab2(0x7a8)](_0x24c0d8,'mp',_0x4c7aae+(_0x1f0a4d[_0x17dab2(0x976)]||0x0),_0x18038c+this[_0x17dab2(0x196)]()+(_0x1f0a4d[_0x17dab2(0x1cd)]||0x0));if($dataSystem[_0x17dab2(0x16b)]){if(_0x17dab2(0x78c)!==_0x17dab2(0x4d7))this[_0x17dab2(0x7a8)](_0x24c0d8,'tp',_0x4c7aae+(_0x1f0a4d[_0x17dab2(0xd1)]||0x0),_0x18038c+this[_0x17dab2(0x196)]()*0x2+(_0x1f0a4d[_0x17dab2(0xa15)]||0x0));else{function _0x2439da(){const _0x39911f=_0x17dab2;this[_0x39911f(0x870)]=this[_0x39911f(0x177)],this[_0x39911f(0x4db)]=this[_0x39911f(0x92f)];}}}},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x2a8)]=function(_0x18453e){const _0x171b2b=_0x534c3a;if(!VisuMZ[_0x171b2b(0x99e)]['Settings']['BattleLayout'][_0x171b2b(0x215)])return![];if(_0x18453e[_0x171b2b(0x457)]())return!![];return Imported[_0x171b2b(0x881)]&&_0x18453e['getMenuImage']();},Game_Actor[_0x534c3a(0x53c)]['getBattlePortraitOffsetX']=function(){const _0x378455=_0x534c3a;if(this[_0x378455(0x4c5)]()[_0x378455(0x650)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x378455(0x4c5)]()[_0x378455(0x650)][_0x378455(0x5ed)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x378455(0xf3)!==_0x378455(0x256))return Number(RegExp['$1']);else{function _0xbee68b(){const _0x40b2f5=_0x378455;if(!_0x50ff0e[_0x40b2f5(0x9fc)])return;if(!_0x4bfc79[_0x40b2f5(0xa8a)]())return;if(this['isDead']())return;if(this['isHidden']())return;if(_0x2e5d78[_0x40b2f5(0x650)][_0x40b2f5(0x5ed)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x79accb=_0x126199(_0x429366['$1']);_0x451b7c[_0x40b2f5(0x1ac)]([this],_0x79accb,![],![]);}}}}}return 0x0;},Game_Actor[_0x534c3a(0x53c)][_0x534c3a(0x558)]=function(){const _0x1bc4e0=_0x534c3a;if(this['actor']()[_0x1bc4e0(0x650)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x1bc4e0(0x650)][_0x1bc4e0(0x5ed)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if('EAZdc'!==_0x1bc4e0(0x6d3)){function _0x2344fc(){const _0x44262c=_0x1bc4e0;return _0x7834ef[_0x44262c(0x588)]['call'](this,_0x5e7388);}}else return Number(RegExp['$2']);}}return 0x0;},Window_BattleStatus['prototype'][_0x534c3a(0x61d)]=function(_0x162560){const _0x41a1ee=_0x534c3a,_0x231cdf=this[_0x41a1ee(0x4c5)](_0x162560);if(this[_0x41a1ee(0x2a8)](_0x231cdf)){if('vxfbO'!==_0x41a1ee(0x66d)){function _0x3fa2e1(){const _0x52cf9a=_0x41a1ee;this[_0x52cf9a(0x12b)]&&this[_0x52cf9a(0x12b)][_0x52cf9a(0x848)](_0x3bfa9a);}}else{const _0x5bb44e=_0x41a1ee(0x677)[_0x41a1ee(0x8e9)](_0x231cdf[_0x41a1ee(0x980)]()),_0x10da38=this['createInnerPortrait'](_0x5bb44e,Sprite),_0x397d43=_0x231cdf[_0x41a1ee(0x6e6)]();if(_0x397d43!==''){if(_0x41a1ee(0x577)!=='CzmtO')_0x10da38['bitmap']=ImageManager[_0x41a1ee(0x3c3)](_0x397d43);else{function _0x24dc18(){const _0x45b579=_0x41a1ee;_0x2de7a3[_0x45b579(0x157)](![]);}}}else{if(_0x41a1ee(0x410)!==_0x41a1ee(0x410)){function _0xb2c5df(){return[_0x465852];}}else _0x10da38[_0x41a1ee(0xa72)]=ImageManager[_0x41a1ee(0xa8b)];}const _0x4a3cdf=this[_0x41a1ee(0x334)](_0x162560);_0x10da38[_0x41a1ee(0x409)]['x']=0.5,_0x10da38['anchor']['y']=0x1;let _0x592a80=Math[_0x41a1ee(0x8d4)](_0x4a3cdf['x']+_0x4a3cdf['width']/0x2)+this['padding'];_0x592a80+=_0x231cdf[_0x41a1ee(0x9b2)]();let _0x1b959d=Math[_0x41a1ee(0x8d4)](this[_0x41a1ee(0x363)]);_0x1b959d+=_0x231cdf[_0x41a1ee(0x558)](),_0x10da38[_0x41a1ee(0x9e6)](_0x592a80,_0x1b959d);const _0x4e5802=VisuMZ['BattleCore'][_0x41a1ee(0x795)]['BattleLayout'][_0x41a1ee(0xa16)];_0x10da38[_0x41a1ee(0x43e)]['x']=_0x4e5802,_0x10da38[_0x41a1ee(0x43e)]['y']=_0x4e5802,_0x10da38[_0x41a1ee(0x97d)]();}}else{const _0x3c3bc8=this['faceRect'](_0x162560);this[_0x41a1ee(0x43b)](_0x231cdf,_0x3c3bc8['x'],_0x3c3bc8['y'],_0x3c3bc8[_0x41a1ee(0x456)],_0x3c3bc8['height']);}},Window_BattleStatus['prototype'][_0x534c3a(0x6d9)]=function(_0x5e4d98,_0x4d6dad){const _0x50d260=_0x534c3a,_0x5db73d=this['_additionalSprites'];if(_0x5db73d[_0x5e4d98]){if(_0x50d260(0x6b4)==='RxfRq')return _0x5db73d[_0x5e4d98];else{function _0x3bdd4b(){const _0x111149=_0x50d260;if(this[_0x111149(0x778)]<0xff)this[_0x111149(0x778)]+=0x10;}}}else{const _0x3c78f5=new _0x4d6dad();return _0x5db73d[_0x5e4d98]=_0x3c78f5,this['addChildToBack'](_0x3c78f5),this['addChildToBack'](this[_0x50d260(0x7cc)]),_0x3c78f5;}},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x1f3)]=function(){const _0xa50e54=_0x534c3a;this[_0xa50e54(0x6cb)](),this[_0xa50e54(0x20b)](),Window_StatusBase[_0xa50e54(0x53c)][_0xa50e54(0x1f3)]['call'](this),this[_0xa50e54(0x79e)]();},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x6cb)]=function(){const _0x47085b=_0x534c3a;this['_cursorArea']=new Sprite(),this[_0x47085b(0x7cc)][_0x47085b(0x47d)]=[new PIXI[(_0x47085b(0x47d))][(_0x47085b(0x355))]()],this['_cursorArea']['filterArea']=new Rectangle(),this[_0x47085b(0x7cc)][_0x47085b(0x9e6)](this[_0x47085b(0x3a9)],this['_padding']),this['addChild'](this[_0x47085b(0x7cc)]);},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x20b)]=function(){const _0x224b49=_0x534c3a;this[_0x224b49(0x8d1)]=new Sprite(),this['addChild'](this[_0x224b49(0x8d1)]);},Window_BattleStatus[_0x534c3a(0x53c)]['_createDamageContainer']=function(){const _0x2c2467=_0x534c3a;this[_0x2c2467(0x39d)]=new Sprite(),this['addChild'](this['_damageContainer']);},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x681)]=function(){const _0x15cbfb=_0x534c3a;this[_0x15cbfb(0x393)]=new Sprite();for(let _0x34a95f=0x0;_0x34a95f<0x9;_0x34a95f++){this[_0x15cbfb(0x393)][_0x15cbfb(0x2cf)](new Sprite());}this[_0x15cbfb(0x7cc)][_0x15cbfb(0x2cf)](this[_0x15cbfb(0x393)]);},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x5a0)]=function(){const _0x2bfa51=_0x534c3a;Window_StatusBase[_0x2bfa51(0x53c)][_0x2bfa51(0x5a0)][_0x2bfa51(0x63a)](this),this[_0x2bfa51(0x2d9)]();},Window_BattleStatus[_0x534c3a(0x53c)]['_updateCursorArea']=function(){const _0x4bdc31=_0x534c3a,_0x25b69f=this[_0x4bdc31(0x3a9)];this[_0x4bdc31(0x7cc)]['move'](_0x25b69f,_0x25b69f),this[_0x4bdc31(0x7cc)]['x']=_0x25b69f-this['origin']['x'],this[_0x4bdc31(0x7cc)]['y']=_0x25b69f-this[_0x4bdc31(0x521)]['y'];if(this[_0x4bdc31(0xa40)]>0x0&&this[_0x4bdc31(0x9ac)]>0x0){if(_0x4bdc31(0x9fb)!==_0x4bdc31(0x685))this[_0x4bdc31(0x7cc)][_0x4bdc31(0x94d)]=this[_0x4bdc31(0x145)]();else{function _0x5aa231(){const _0x18a004=_0x4bdc31;return this[_0x18a004(0x5a1)]()?_0x3871eb[_0x18a004(0x99e)]['Settings']['Actor'][_0x18a004(0x365)]:_0x197966[_0x18a004(0x99e)][_0x18a004(0x795)][_0x18a004(0x53f)]['SmoothImage'];}}}else{if(_0x4bdc31(0x553)==='lVZwt')this['_cursorArea'][_0x4bdc31(0x94d)]=![];else{function _0x1df400(){const _0x207c10=_0x4bdc31;if(this['_currentActor'][_0x207c10(0x14e)]())return;this[_0x207c10(0x96c)](),this['checkTpbInputClose'](),!this['_subject']&&!this['_currentActor']&&_0x225346['_scene'][_0x207c10(0x1ca)]();}}}},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x275)]=function(){const _0x15fbc8=_0x534c3a;Window_StatusBase[_0x15fbc8(0x53c)][_0x15fbc8(0x275)][_0x15fbc8(0x63a)](this),this[_0x15fbc8(0x4ba)]();},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x4ba)]=function(){const _0x3c43e8=_0x534c3a,_0x193f08=this[_0x3c43e8(0x7cc)][_0x3c43e8(0x90e)][_0x3c43e8(0x437)](new Point(0x0,0x0)),_0x3d4a00=this[_0x3c43e8(0x7cc)][_0x3c43e8(0x892)];_0x3d4a00['x']=_0x193f08['x']+this['origin']['x'],_0x3d4a00['y']=_0x193f08['y']+this[_0x3c43e8(0x521)]['y'],_0x3d4a00[_0x3c43e8(0x456)]=this['innerWidth'],_0x3d4a00['height']=this['innerHeight'];},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x99f)]=function(_0x156711){const _0x3ea330=_0x534c3a;if(this['battleLayoutStyle']()!=='portrait')return;this['drawItemImagePortraitStyle'](_0x156711[_0x3ea330(0x6d2)]());},Window_BattleStatus[_0x534c3a(0x53c)]['addDamageSprite']=function(_0x1a0274,_0x1e018c){const _0x6f5e66=_0x534c3a;if(!this[_0x6f5e66(0x39d)])return;if(!_0x1a0274)return;if(!_0x1e018c)return;const _0x584789=this[_0x6f5e66(0x334)](_0x1e018c['index']());_0x584789['x']+=_0x584789['width']/0x2+this[_0x6f5e66(0x849)],_0x1a0274['x']=_0x584789['x'],_0x1a0274['y']=_0x584789['y'],this[_0x6f5e66(0x39d)]['addChild'](_0x1a0274);},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x4fd)]=function(_0x159b3d){const _0x278062=_0x534c3a;if(!this['_damageContainer'])return;if(!_0x159b3d)return;this[_0x278062(0x39d)][_0x278062(0x5b7)](_0x159b3d);},Window_BattleStatus['prototype'][_0x534c3a(0x3c6)]=function(){const _0x21dd15=_0x534c3a;if(!this['isBorderStylePortraitShown']())return;if(!this[_0x21dd15(0x6be)])this['createBorderStylePortraitSprite']();this['prepareBorderActor'](),this['updateBorderSprite']();},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x486)]=function(){const _0x22bb9e=_0x534c3a;if(this[_0x22bb9e(0x1d7)]!==Window_BattleStatus)return![];if(!SceneManager[_0x22bb9e(0xa8a)]())return![];return VisuMZ['BattleCore'][_0x22bb9e(0x795)][_0x22bb9e(0x27b)][_0x22bb9e(0x3f7)];},Window_BattleStatus['prototype']['createBorderStylePortraitSprite']=function(){const _0x2af812=_0x534c3a;this[_0x2af812(0x6be)]=new Sprite();const _0x2df0f6=SceneManager[_0x2af812(0x76b)],_0x54436a=_0x2df0f6[_0x2af812(0x4f3)][_0x2af812(0xaa8)](_0x2df0f6['_windowLayer']);_0x2df0f6['addChildAt'](this[_0x2af812(0x6be)],_0x54436a),this['_borderPortraitSprite'][_0x2af812(0x409)]['x']=0.5,this[_0x2af812(0x6be)]['anchor']['y']=0x1;const _0x4f7b0b=VisuMZ['BattleCore'][_0x2af812(0x795)][_0x2af812(0x27b)][_0x2af812(0x581)];this['_borderPortraitSprite'][_0x2af812(0x43e)]['x']=_0x4f7b0b,this['_borderPortraitSprite'][_0x2af812(0x43e)]['y']=_0x4f7b0b,this['_borderPortraitSprite']['y']=this['y']+this[_0x2af812(0x363)],this[_0x2af812(0xaa7)]=0x0;},Window_BattleStatus[_0x534c3a(0x53c)]['prepareBorderActor']=function(){const _0x22d4d2=_0x534c3a;this[_0x22d4d2(0x6be)][_0x22d4d2(0x94d)]=BattleManager[_0x22d4d2(0x3e3)]();const _0x3fb60a=BattleManager[_0x22d4d2(0x4c5)]();if(_0x3fb60a===this['_borderPortraitSprite']['actor'])return;this[_0x22d4d2(0x6be)]['actor']=_0x3fb60a||this[_0x22d4d2(0x6be)][_0x22d4d2(0x4c5)];if(!_0x3fb60a)return;else{if(_0x3fb60a[_0x22d4d2(0x6e6)]()===''){this[_0x22d4d2(0x6be)][_0x22d4d2(0xa72)]=ImageManager[_0x22d4d2(0xa8b)];return;}else{if(_0x22d4d2(0x181)!==_0x22d4d2(0x96a)){const _0x50d8c8=ImageManager['loadPicture'](_0x3fb60a[_0x22d4d2(0x6e6)]());_0x50d8c8['addLoadListener'](this[_0x22d4d2(0x1db)][_0x22d4d2(0x15a)](this,_0x50d8c8));}else{function _0x564f70(){this['updateStateIconSprite']();}}}}},Window_BattleStatus[_0x534c3a(0x53c)]['processBorderActor']=function(_0x463c2c){const _0x515b82=_0x534c3a;this[_0x515b82(0xaa7)]=0x14,this[_0x515b82(0x6be)]['bitmap']=_0x463c2c;SceneManager[_0x515b82(0x76b)][_0x515b82(0x7ae)]()?(this[_0x515b82(0x6be)]['x']=0x0,this[_0x515b82(0x2de)]=Math[_0x515b82(0x8b7)](_0x463c2c[_0x515b82(0x456)]/0x2)):(this[_0x515b82(0x6be)]['x']=this[_0x515b82(0x456)],this['_borderPortraitTargetX']=this[_0x515b82(0x456)]*0x3/0x4);this['_borderPortraitSprite'][_0x515b82(0x52c)]=0x0,this[_0x515b82(0x6be)]['y']=this['y']+this[_0x515b82(0x363)];const _0x1fac76=BattleManager[_0x515b82(0x4c5)]();if(_0x1fac76){if(_0x515b82(0x7e4)===_0x515b82(0x10a)){function _0x4494e9(){const _0x19c124=_0x515b82;if(this[_0x19c124(0x970)]<=0x0)return;const _0x4a7f4d=this[_0x19c124(0x468)]-this[_0x19c124(0x970)],_0x3cc730=this[_0x19c124(0x468)]/0x2,_0xbde5df=this[_0x19c124(0x1be)],_0x4dbc82=-_0xbde5df/_0x475d76[_0x19c124(0x23c)](_0x3cc730,0x2);this['_jumpHeight']=_0x4dbc82*_0x5c7ae1[_0x19c124(0x23c)](_0x4a7f4d-_0x3cc730,0x2)+_0xbde5df,this[_0x19c124(0x970)]--;if(this['_jumpDuration']<=0x0)return this[_0x19c124(0xa14)]();}}else this[_0x515b82(0x2de)]+=_0x1fac76[_0x515b82(0x9b2)](),this['_borderPortraitSprite']['y']+=_0x1fac76[_0x515b82(0x558)]();}},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x498)]=function(){const _0xa3c725=_0x534c3a;if(this['_borderPortraitDuration']>0x0){if(_0xa3c725(0x194)===_0xa3c725(0x194)){const _0x38ca4b=this[_0xa3c725(0xaa7)],_0x13fe83=this[_0xa3c725(0x6be)];_0x13fe83['x']=(_0x13fe83['x']*(_0x38ca4b-0x1)+this[_0xa3c725(0x2de)])/_0x38ca4b,_0x13fe83[_0xa3c725(0x52c)]=(_0x13fe83['opacity']*(_0x38ca4b-0x1)+0xff)/_0x38ca4b,this['_borderPortraitDuration']--;}else{function _0x3c4493(){const _0x270fdd=_0xa3c725;this[_0x270fdd(0x64e)](_0x3bbc3a)?this[_0x270fdd(0x628)]()[_0x270fdd(0x2cf)](_0x300d94):this['_animationContainer'][_0x270fdd(0x2cf)](_0x5a414c),this['_animationSprites'][_0x270fdd(0x3ba)](_0x4681e8);}}}},Window_BattleStatus['prototype'][_0x534c3a(0x7bc)]=function(){const _0x305190=_0x534c3a;return;this['_effectsContainer']&&(this[_0x305190(0x8d1)]['x']=this['x'],this[_0x305190(0x8d1)]['y']=this['y']);if(this['_damageContainer']){if(_0x305190(0x6a1)!==_0x305190(0x7b7))this[_0x305190(0x39d)]['x']=this['x'],this[_0x305190(0x39d)]['y']=this['y'];else{function _0x1c9d78(){const _0x5af984=_0x305190;return _0x4aea79[_0x5af984(0x99e)][_0x5af984(0x795)][_0x5af984(0x2a0)][_0x5af984(0x365)];}}}},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x7d3)]=function(){const _0x1ee672=_0x534c3a,_0x3dde05=VisuMZ['BattleCore'][_0x1ee672(0x795)][_0x1ee672(0x27b)];if(_0x3dde05['StatusWindowAttachmentBack']){const _0x216da7=new Sprite();_0x216da7[_0x1ee672(0xa72)]=ImageManager['loadSystem'](_0x3dde05[_0x1ee672(0x4ef)]),_0x216da7['x']=_0x3dde05[_0x1ee672(0x496)]||0x0,_0x216da7['y']=_0x3dde05['StatusWindowAttachmentBackOffsetY']||0x0,this[_0x1ee672(0x4a9)](_0x216da7),this['_backAttachmentSprite']=_0x216da7;}if(_0x3dde05['StatusWindowAttachmentFront']){if(_0x1ee672(0x43d)===_0x1ee672(0x938)){function _0x3421e5(){_0x4b329a=_0x5e2d52(_0x377e3d['$1']);}}else{const _0x51f038=new Sprite();_0x51f038[_0x1ee672(0xa72)]=ImageManager[_0x1ee672(0x534)](_0x3dde05[_0x1ee672(0x5b5)]),_0x51f038['x']=_0x3dde05[_0x1ee672(0x9ee)]||0x0,_0x51f038['y']=_0x3dde05[_0x1ee672(0xa3e)]||0x0,this['addChild'](_0x51f038),this[_0x1ee672(0x683)]=_0x51f038;}}},Window_BattleStatus[_0x534c3a(0x53c)][_0x534c3a(0x62a)]=function(){const _0x3d5ad1=_0x534c3a;this['_frontAttachmentSprite']&&this[_0x3d5ad1(0x2cf)](this['_frontAttachmentSprite']);},Window_BattleActor[_0x534c3a(0x53c)]['isOkEnabled']=function(){const _0x107e92=_0x534c3a;return Window_BattleStatus[_0x107e92(0x53c)][_0x107e92(0x662)][_0x107e92(0x63a)](this)&&this['isActionSelectionValid']();},Window_BattleActor[_0x534c3a(0x53c)][_0x534c3a(0x322)]=function(){const _0x2b7432=_0x534c3a,_0x5269c9=BattleManager[_0x2b7432(0x516)](),_0x3b77a0=this[_0x2b7432(0x4c5)](this[_0x2b7432(0x6d2)]());if(!_0x5269c9)return!![];if(!_0x5269c9['item']())return!![];const _0x522b3e=_0x5269c9[_0x2b7432(0x464)]()[_0x2b7432(0x650)];if(_0x522b3e[_0x2b7432(0x5ed)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x2b7432(0x6c2)===_0x2b7432(0x421)){function _0x196f6f(){return this['_opacityDuration']>0x0;}}else{if(_0x3b77a0===BattleManager[_0x2b7432(0x4c5)]())return![];}}return!![];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x2bf)]=Window_BattleEnemy[_0x534c3a(0x53c)][_0x534c3a(0x96e)],Window_BattleEnemy[_0x534c3a(0x53c)]['initialize']=function(_0x5dc247){const _0x119753=_0x534c3a;this[_0x119753(0x74e)]=null,VisuMZ[_0x119753(0x99e)]['Window_BattleEnemy_initialize'][_0x119753(0x63a)](this,_0x5dc247);},Window_BattleEnemy[_0x534c3a(0x53c)]['maxCols']=function(){const _0x577475=_0x534c3a;return this[_0x577475(0x76f)]();},VisuMZ[_0x534c3a(0x99e)]['Window_BattleEnemy_show']=Window_BattleEnemy[_0x534c3a(0x53c)]['show'],Window_BattleEnemy['prototype']['show']=function(){const _0x58e13e=_0x534c3a;VisuMZ[_0x58e13e(0x99e)][_0x58e13e(0x163)]['call'](this),this['y']=Graphics[_0x58e13e(0x363)]*0xa;},Window_BattleEnemy[_0x534c3a(0x53c)][_0x534c3a(0x134)]=function(){const _0x441a8c=_0x534c3a;return $gameTroop[_0x441a8c(0x2b8)]()[_0x441a8c(0x5d8)](0x0);},Window_BattleEnemy['prototype'][_0x534c3a(0x9b7)]=function(){const _0x31582a=_0x534c3a;this[_0x31582a(0x629)]=this[_0x31582a(0x134)](),this['sortEnemies'](),Window_Selectable['prototype'][_0x31582a(0x9b7)]['call'](this);},Window_BattleEnemy[_0x534c3a(0x53c)][_0x534c3a(0x2dc)]=function(){const _0x29dcd2=_0x534c3a;this[_0x29dcd2(0x629)]['sort']((_0x271cd6,_0x3fe3a8)=>{const _0x198215=_0x29dcd2;if(_0x271cd6[_0x198215(0x7c4)]()['_baseX']===_0x3fe3a8[_0x198215(0x7c4)]()['_baseX'])return _0x271cd6[_0x198215(0x7c4)]()[_0x198215(0x2df)]-_0x3fe3a8[_0x198215(0x7c4)]()[_0x198215(0x2df)];else{if(_0x198215(0x8c7)===_0x198215(0x8c7))return _0x271cd6[_0x198215(0x7c4)]()[_0x198215(0x674)]-_0x3fe3a8['battler']()[_0x198215(0x674)];else{function _0x5c2633(){const _0x3fbddd=_0x198215;this[_0x3fbddd(0x5d6)]();}}}}),SceneManager['isBattleFlipped']()&&this[_0x29dcd2(0x629)]['reverse']();},Window_BattleEnemy['prototype'][_0x534c3a(0x743)]=function(){const _0x739096=_0x534c3a,_0x171870=VisuMZ[_0x739096(0x99e)][_0x739096(0x795)][_0x739096(0x53f)];_0x171870[_0x739096(0x529)]?this[_0x739096(0x4e8)]():this[_0x739096(0x79d)]();},Window_BattleEnemy['prototype'][_0x534c3a(0x4e8)]=function(){const _0x327962=_0x534c3a;if(this[_0x327962(0x74e)]&&this[_0x327962(0x629)][_0x327962(0x96f)](this[_0x327962(0x74e)])){if(_0x327962(0x229)!=='hVzOR'){function _0x21fda3(){const _0x2dcc71=_0x327962;this[_0x2dcc71(0xa5d)]=![];}}else{const _0x471d1d=this['_enemies']['indexOf'](this[_0x327962(0x74e)]);this[_0x327962(0x736)](_0x471d1d);}}else this['autoSelectPriority']();},Window_BattleEnemy[_0x534c3a(0x53c)][_0x534c3a(0x79d)]=function(){const _0x32a497=_0x534c3a,_0x59cd31=VisuMZ[_0x32a497(0x99e)][_0x32a497(0x795)][_0x32a497(0x53f)];let _0x496c82=![];if($gameSystem[_0x32a497(0x4d6)]())_0x496c82=_0x59cd31[_0x32a497(0x9b3)];else{if(_0x32a497(0x696)===_0x32a497(0x696))_0x496c82=_0x59cd31[_0x32a497(0x1dd)];else{function _0x33667a(){return _0x147804(_0xb85fdf['$1'])/0x64;}}}this['forceSelect'](_0x496c82?this[_0x32a497(0x76f)]()-0x1:0x0);},Window_BattleEnemy[_0x534c3a(0x53c)][_0x534c3a(0x10d)]=function(){const _0x1cbd4c=_0x534c3a;Window_Selectable[_0x1cbd4c(0x53c)][_0x1cbd4c(0x10d)][_0x1cbd4c(0x63a)](this),this['_lastEnemy']=this[_0x1cbd4c(0x602)]();},Window_BattleItem[_0x534c3a(0x53c)][_0x534c3a(0x96f)]=function(_0x59a0b4){const _0x237bda=_0x534c3a;if(!_0x59a0b4)return![];return _0x59a0b4['occasion']===0x0||_0x59a0b4[_0x237bda(0xa3a)]===0x1;};function Window_AutoBattleCancel(){const _0x29f318=_0x534c3a;this[_0x29f318(0x96e)](...arguments);}function _0xdbc5(_0x3996fb,_0x1469a6){_0x3996fb=_0x3996fb-0xc8;let _0x28c1f1=_0x28c1[_0x3996fb];return _0x28c1f1;}Window_AutoBattleCancel[_0x534c3a(0x53c)]=Object[_0x534c3a(0x7f8)](Window_Base[_0x534c3a(0x53c)]),Window_AutoBattleCancel[_0x534c3a(0x53c)][_0x534c3a(0x1d7)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x534c3a(0x53c)][_0x534c3a(0x96e)]=function(_0x2759c8){const _0x4a5f5c=_0x534c3a;Window_Base['prototype'][_0x4a5f5c(0x96e)][_0x4a5f5c(0x63a)](this,_0x2759c8),this[_0x4a5f5c(0x7f0)](this[_0x4a5f5c(0x225)]()),this[_0x4a5f5c(0x9b7)]();},Window_AutoBattleCancel['prototype']['bgType']=function(){const _0xacbb7e=_0x534c3a;return VisuMZ[_0xacbb7e(0x99e)][_0xacbb7e(0x795)]['AutoBattle'][_0xacbb7e(0x94e)];},Window_AutoBattleCancel[_0x534c3a(0x53c)][_0x534c3a(0x9b7)]=function(){const _0x42f98a=_0x534c3a;this[_0x42f98a(0x3d6)][_0x42f98a(0x48e)]();const _0x2362ab=VisuMZ[_0x42f98a(0x99e)][_0x42f98a(0x795)][_0x42f98a(0x52b)][_0x42f98a(0x2f8)],_0x330880=_0x2362ab[_0x42f98a(0x8e9)](this[_0x42f98a(0x30d)](),this[_0x42f98a(0x5ff)]()),_0x13fc53=this[_0x42f98a(0x7eb)](_0x330880)[_0x42f98a(0x456)],_0x5d27ef=Math[_0x42f98a(0x922)]((this[_0x42f98a(0xa40)]-_0x13fc53)/0x2);this['drawTextEx'](_0x330880,_0x5d27ef,0x0,_0x13fc53);},Window_AutoBattleCancel[_0x534c3a(0x53c)][_0x534c3a(0x30d)]=function(){const _0x4b72b1=_0x534c3a;if(Imported[_0x4b72b1(0x9fc)]){if('IWOcr'===_0x4b72b1(0x580))return TextManager[_0x4b72b1(0xa81)]('ok');else{function _0x52a2e5(){const _0x17bce1=_0x4b72b1;if(this[_0x17bce1(0x5a1)]())this['_svBattlerSprite'][_0x17bce1(0x198)](_0xc18f36);}}}else return VisuMZ[_0x4b72b1(0x99e)][_0x4b72b1(0x795)][_0x4b72b1(0x52b)]['AutoBattleOK'];},Window_AutoBattleCancel[_0x534c3a(0x53c)][_0x534c3a(0x5ff)]=function(){const _0x417fd2=_0x534c3a;return Imported[_0x417fd2(0x9fc)]?TextManager[_0x417fd2(0xa81)](_0x417fd2(0x366)):VisuMZ['BattleCore'][_0x417fd2(0x795)][_0x417fd2(0x52b)][_0x417fd2(0x279)];},Window_AutoBattleCancel[_0x534c3a(0x53c)][_0x534c3a(0x59d)]=function(){const _0x531b0b=_0x534c3a;Window_Base[_0x531b0b(0x53c)]['update'][_0x531b0b(0x63a)](this),this[_0x531b0b(0x463)](),this[_0x531b0b(0x33f)]();},Window_AutoBattleCancel[_0x534c3a(0x53c)][_0x534c3a(0x463)]=function(){const _0x2a90fb=_0x534c3a;this[_0x2a90fb(0x94d)]=BattleManager[_0x2a90fb(0x253)];},Window_AutoBattleCancel[_0x534c3a(0x53c)][_0x534c3a(0x33f)]=function(){const _0x94826=_0x534c3a;if(!BattleManager[_0x94826(0x253)])return;(Input[_0x94826(0x599)]('ok')||Input[_0x94826(0x599)]('cancel')||TouchInput[_0x94826(0x3cc)]()||TouchInput[_0x94826(0x4b4)]())&&(SoundManager[_0x94826(0x131)](),BattleManager[_0x94826(0x253)]=![],Input[_0x94826(0x48e)](),TouchInput['clear']());};function Window_EnemyName(){const _0x3048bf=_0x534c3a;this[_0x3048bf(0x96e)](...arguments);}Window_EnemyName[_0x534c3a(0x53c)]=Object['create'](Window_StatusBase[_0x534c3a(0x53c)]),Window_EnemyName[_0x534c3a(0x53c)][_0x534c3a(0x1d7)]=Window_EnemyName,Window_EnemyName[_0x534c3a(0x53c)][_0x534c3a(0x96e)]=function(_0x5577a5){const _0x2bbb18=_0x534c3a;this[_0x2bbb18(0x750)]=_0x5577a5,this[_0x2bbb18(0xcb)]='';const _0x52b38d=new Rectangle(0x0,0x0,Graphics[_0x2bbb18(0x29c)],this['lineHeight']()*0x4);Window_StatusBase[_0x2bbb18(0x53c)][_0x2bbb18(0x96e)][_0x2bbb18(0x63a)](this,_0x52b38d),this[_0x2bbb18(0x7f0)](0x2),this['contentsOpacity']=0x0;},Window_EnemyName[_0x534c3a(0x53c)][_0x534c3a(0x6d1)]=function(){const _0x4ed886=_0x534c3a;this[_0x4ed886(0x849)]=0x0;},Window_EnemyName[_0x534c3a(0x53c)][_0x534c3a(0x602)]=function(){const _0x3d04cf=_0x534c3a;return $gameTroop[_0x3d04cf(0x8a8)]()[this[_0x3d04cf(0x750)]];},Window_EnemyName['prototype'][_0x534c3a(0x59d)]=function(){const _0x1d83be=_0x534c3a;Window_StatusBase[_0x1d83be(0x53c)][_0x1d83be(0x59d)]['call'](this);if(this[_0x1d83be(0x602)]()&&this['enemy']()[_0x1d83be(0x180)]()!==this['_text']){if(_0x1d83be(0x1c3)!==_0x1d83be(0x115))this['_text']=this[_0x1d83be(0x602)]()[_0x1d83be(0x180)](),this[_0x1d83be(0x9b7)]();else{function _0x2105ef(){const _0x25d508=_0x1d83be;if(!_0x2932ad[_0x25d508(0xa8a)]())return;_0x5cffb6[_0x25d508(0x96b)](_0x9679ac,_0xd4dfe9),_0x40274b['_scene'][_0x25d508(0x168)](_0x106f0e['ShowHide']);}}}this[_0x1d83be(0x9ff)](),this[_0x1d83be(0x36e)]();},Window_EnemyName[_0x534c3a(0x53c)][_0x534c3a(0x9ff)]=function(){const _0x4efc6f=_0x534c3a;if(!this[_0x4efc6f(0x602)]()){if('mExnO'!==_0x4efc6f(0x44c)){if(this[_0x4efc6f(0x778)]>0x0)this['contentsOpacity']-=0x10;}else{function _0x4640f6(){const _0x37e93b=_0x4efc6f;if(!_0x4b28c2[_0x37e93b(0xa8a)]())return;_0x5c2706[_0x37e93b(0x96b)](_0x557827,_0x37aab1);const _0x26ae54=_0xbcbacf[_0x37e93b(0xa1d)](),_0x3f0230=_0x7f56b0[_0x37e93b(0x46a)],_0x331ce7=_0x1f4dbc[_0x37e93b(0x90c)],_0x331c45=_0x238f87[_0x37e93b(0xa73)]?_0x57b21e[_0x37e93b(0xa73)]['slice'](0x0):[],_0x3322fa=_0x4834be[_0x37e93b(0xa5c)];if(!_0x26ae54||!_0x3f0230||!_0x331ce7)return;if(!_0x3f0230[_0x37e93b(0x464)]())return;if(_0x20c1a6[_0x37e93b(0x942)])_0x3322fa[_0x37e93b(0x17b)](_0x331ce7,_0x3f0230['item']());_0x2e19ff['ApplyImmortal']&&_0x3322fa[_0x37e93b(0x3ba)](_0x37e93b(0x36c),_0x331ce7,_0x331c45,!![]);if(_0x566d57['ActionStart'])_0x3322fa[_0x37e93b(0x3ba)]('performActionStart',_0x331ce7,_0x3f0230);if(_0x56ab9e[_0x37e93b(0x8f2)])_0x3322fa[_0x37e93b(0x3ba)](_0x37e93b(0xd9));if(_0x196f7d[_0x37e93b(0x84c)])_0x3322fa[_0x37e93b(0x3ba)]('performCastAnimation',_0x331ce7,_0x3f0230);if(_0xb1b072['WaitForAnimation'])_0x3322fa[_0x37e93b(0x3ba)](_0x37e93b(0x2b2));_0x26ae54[_0x37e93b(0x387)](_0x37e93b(0x2d4));}}}else{if(this[_0x4efc6f(0x602)]()[_0x4efc6f(0x43f)]()){if(this[_0x4efc6f(0x778)]>0x0)this[_0x4efc6f(0x778)]-=0x10;}else{if(SceneManager['_scene'][_0x4efc6f(0xa6f)]&&SceneManager[_0x4efc6f(0x76b)][_0x4efc6f(0xa6f)][_0x4efc6f(0x433)]&&SceneManager['_scene'][_0x4efc6f(0xa6f)][_0x4efc6f(0x629)]['includes'](this[_0x4efc6f(0x602)]())){if(this['contentsOpacity']<0xff)this[_0x4efc6f(0x778)]+=0x10;}else this[_0x4efc6f(0x778)]>0x0&&(this[_0x4efc6f(0x778)]-=0x10);}}},Window_EnemyName[_0x534c3a(0x53c)]['updatePosition']=function(){const _0x5d04f6=_0x534c3a;if(!this[_0x5d04f6(0x602)]())return;if(SceneManager['isBattleFlipped']()){if(_0x5d04f6(0x576)!=='WReAt')this['x']=Graphics[_0x5d04f6(0x29c)]-this['enemy']()[_0x5d04f6(0x7c4)]()[_0x5d04f6(0x674)];else{function _0x271381(){const _0x1700dd=_0x5d04f6,_0x2ab243=_0x2fa2c7[_0x1700dd(0x99e)][_0x1700dd(0x795)][_0x1700dd(0x189)],_0x35e91c=_0x2ab243[_0x1700dd(0x542)],_0x53e5de=_0x2ab243[_0x1700dd(0x16f)],_0x1b49af=_0x2ab243[_0x1700dd(0x141)];this['startMove'](_0x35e91c,_0x53e5de,_0x1b49af);}}}else this['x']=this['enemy']()[_0x5d04f6(0x7c4)]()[_0x5d04f6(0x674)];this['x']-=Math[_0x5d04f6(0x8d4)](this['width']/0x2),this['y']=this['enemy']()[_0x5d04f6(0x7c4)]()[_0x5d04f6(0x2df)]-Math[_0x5d04f6(0x8d4)](this[_0x5d04f6(0x952)]()*1.5);const _0x583c06=VisuMZ[_0x5d04f6(0x99e)][_0x5d04f6(0x795)][_0x5d04f6(0x53f)];this['x']+=_0x583c06[_0x5d04f6(0x658)]||0x0,this['y']+=_0x583c06['NameOffsetY']||0x0;},Window_EnemyName[_0x534c3a(0x53c)]['resetFontSettings']=function(){const _0x1fb48a=_0x534c3a;Window_Base[_0x1fb48a(0x53c)][_0x1fb48a(0x27f)][_0x1fb48a(0x63a)](this),this[_0x1fb48a(0x3d6)]['fontSize']=VisuMZ[_0x1fb48a(0x99e)][_0x1fb48a(0x795)]['Enemy'][_0x1fb48a(0x441)];},Window_EnemyName[_0x534c3a(0x53c)]['refresh']=function(){const _0x12669b=_0x534c3a;Window_StatusBase[_0x12669b(0x53c)][_0x12669b(0x9b7)]['call'](this),this[_0x12669b(0x3d6)]['clear']();if(!this[_0x12669b(0x602)]())return;this[_0x12669b(0x557)]();},Window_EnemyName[_0x534c3a(0x53c)][_0x534c3a(0x557)]=function(){const _0x45272f=_0x534c3a;this[_0x45272f(0xcb)]=this['enemy']()[_0x45272f(0x180)]();const _0x40f06a=this[_0x45272f(0x7eb)](this['_text'])[_0x45272f(0x456)],_0x323489=Math[_0x45272f(0x8d4)]((this[_0x45272f(0xa40)]-_0x40f06a)/0x2);this[_0x45272f(0x986)](this[_0x45272f(0xcb)],_0x323489,0x0,_0x40f06a+0x8);},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x9d1)]=function(){const _0x539d9d=_0x534c3a;return VisuMZ[_0x539d9d(0x99e)][_0x539d9d(0x795)][_0x539d9d(0xa01)]['MaxLines'];},Window_BattleLog[_0x534c3a(0x53c)]['messageSpeed']=function(){const _0xd75fe1=_0x534c3a;return VisuMZ['BattleCore']['Settings']['BattleLog'][_0xd75fe1(0x442)];},Window_BattleLog[_0x534c3a(0x53c)]['backColor']=function(){const _0x2dca8f=_0x534c3a;return VisuMZ[_0x2dca8f(0x99e)][_0x2dca8f(0x795)]['BattleLog'][_0x2dca8f(0x857)];},Window_BattleLog['prototype'][_0x534c3a(0x87d)]=function(){return![];},Window_BattleLog[_0x534c3a(0x53c)]['actionEffect']=function(_0xa4c20,_0x791c5){const _0x5df815=_0x534c3a;this[_0x5df815(0x7d5)](_0x5df815(0x455)),BattleManager[_0x5df815(0x8df)](_0xa4c20,_0x791c5),this[_0x5df815(0x10c)]();},Window_BattleLog[_0x534c3a(0x53c)]['actionSplicePoint']=function(){const _0x1adf0c=_0x534c3a;this[_0x1adf0c(0x10c)]();},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x3ba)]=function(_0x21d943){const _0x106c28=_0x534c3a,_0x31da0b=Array[_0x106c28(0x53c)][_0x106c28(0x5d8)][_0x106c28(0x63a)](arguments,0x1),_0x134314={'name':_0x21d943,'params':_0x31da0b},_0xd3c3a7=this['_methods']['map'](_0x18cb45=>_0x18cb45[_0x106c28(0x180)])[_0x106c28(0xaa8)](_0x106c28(0x455));if(_0xd3c3a7>=0x0){if(_0x106c28(0x3e5)!==_0x106c28(0x4d2))this[_0x106c28(0x7ac)][_0x106c28(0xa96)](_0xd3c3a7,0x0,_0x134314);else{function _0x1063cb(){const _0x1e5011=_0x106c28,_0x194118=_0x33728e(_0x1b6c46['$1'])[_0x1e5011(0x5a9)](),_0x123602=_0x5e6ac1(_0x5c1140['$2']);_0x1997de[_0x194118]=_0x123602,_0x3384ca+=_0x123602;}}}else{if('WaZEp'!==_0x106c28(0x287))this[_0x106c28(0x7ac)][_0x106c28(0x3ba)](_0x134314);else{function _0x547a9f(){const _0x10d5dc=_0x106c28;_0xc71e45['performCastAnimation'](_0xe4201c),this[_0x10d5dc(0x10c)]();}}}},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x7d5)]=function(_0x1ea223){const _0x1059ed=_0x534c3a,_0x4b4493=Array[_0x1059ed(0x53c)][_0x1059ed(0x5d8)][_0x1059ed(0x63a)](arguments,0x1);this[_0x1059ed(0x7ac)][_0x1059ed(0x7d5)]({'name':_0x1ea223,'params':_0x4b4493});},Window_BattleLog['prototype']['logActionList']=function(){const _0x2da76c=_0x534c3a;if(!$gameTemp['isPlaytest']())return;console[_0x2da76c(0x8aa)](this[_0x2da76c(0x7ac)][_0x2da76c(0x406)](_0x4cbd2a=>_0x4cbd2a[_0x2da76c(0x180)])['join']('\x0a'));},VisuMZ['BattleCore']['Window_BattleLog_refresh']=Window_BattleLog['prototype']['refresh'],Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x9b7)]=function(){const _0xc698c1=_0x534c3a;this[_0xc698c1(0x7e2)]=!![];},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x6eb)]=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x59d)],Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x59d)]=function(){const _0x588418=_0x534c3a;VisuMZ[_0x588418(0x99e)]['Window_BattleLog_update'][_0x588418(0x63a)](this);if(this[_0x588418(0x7e2)])this[_0x588418(0x33d)]();},Window_BattleLog['prototype'][_0x534c3a(0x33d)]=function(){const _0x1877a4=_0x534c3a;this['_requestRefresh']=![],VisuMZ[_0x1877a4(0x99e)][_0x1877a4(0x783)][_0x1877a4(0x63a)](this);},Window_BattleLog['prototype'][_0x534c3a(0xa7a)]=function(_0x58fd37){const _0x52cce8=_0x534c3a;let _0x549b32=VisuMZ[_0x52cce8(0x99e)]['Settings'][_0x52cce8(0xa01)][_0x52cce8(0x246)][_0x52cce8(0x6c5)]()[_0x52cce8(0x5a9)](),_0x49ef10=this[_0x52cce8(0xfd)][_0x58fd37];if(_0x49ef10[_0x52cce8(0x5ed)](/<LEFT>/i))_0x549b32=_0x52cce8(0x3a4);else{if(_0x49ef10[_0x52cce8(0x5ed)](/<CENTER>/i)){if(_0x52cce8(0x227)==='YjqPC')_0x549b32='center';else{function _0x4bc7cd(){const _0xdedd2c=_0x52cce8,_0xd5b234=_0x48d8e5[_0xdedd2c(0x3b8)]();this[_0xdedd2c(0x3fe)]()[_0xdedd2c(0x7b8)]()['includes'](_0x2f83ae[_0xdedd2c(0x36f)]())&&_0x12c007[_0xdedd2c(0x157)](![]),_0x40eb64[_0xdedd2c(0x99e)][_0xdedd2c(0x36a)]['call'](this,_0xf86f3a,_0x115a63),_0x33550c[_0xdedd2c(0x157)](_0xd5b234);}}}else _0x49ef10['match'](/<RIGHT>/i)&&(_0x549b32=_0x52cce8(0xd6));}_0x49ef10=_0x49ef10[_0x52cce8(0x283)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x49ef10=_0x49ef10[_0x52cce8(0x283)](/\\I\[0\]/gi,'');const _0x4d6704=this[_0x52cce8(0x95e)](_0x58fd37);this[_0x52cce8(0x3d6)][_0x52cce8(0x6b1)](_0x4d6704['x'],_0x4d6704['y'],_0x4d6704[_0x52cce8(0x456)],_0x4d6704[_0x52cce8(0x363)]);const _0x4260a9=this[_0x52cce8(0x7eb)](_0x49ef10)[_0x52cce8(0x456)];let _0x2dafa7=_0x4d6704['x'];if(_0x549b32==='center'){if(_0x52cce8(0x45f)!=='jeANd')_0x2dafa7+=(_0x4d6704['width']-_0x4260a9)/0x2;else{function _0x3225c8(){let _0x1dd880=0x0;return _0x1dd880;}}}else _0x549b32===_0x52cce8(0xd6)&&(_0x2dafa7+=_0x4d6704[_0x52cce8(0x456)]-_0x4260a9);this[_0x52cce8(0x986)](_0x49ef10,_0x2dafa7,_0x4d6704['y'],_0x4260a9+0x8);},Window_BattleLog['prototype'][_0x534c3a(0x87c)]=function(_0x206f04){const _0x356d01=_0x534c3a;this[_0x356d01(0xfd)]['push'](_0x206f04),this[_0x356d01(0x9b7)](),this['callNextMethod']();},Window_BattleLog[_0x534c3a(0x53c)]['updateWaitMode']=function(){const _0x271068=_0x534c3a;let _0x17903b=![];switch(this[_0x271068(0x772)]){case _0x271068(0x914):_0x17903b=this['_spriteset']['isEffecting']();break;case'movement':_0x17903b=this[_0x271068(0x6bf)]['isAnyoneMoving']();break;case'animation':_0x17903b=this[_0x271068(0x6bf)]['isAnimationPlaying']();break;case _0x271068(0x1d0):_0x17903b=this['_spriteset'][_0x271068(0x37f)]();break;case _0x271068(0x9b8):_0x17903b=this[_0x271068(0x6bf)][_0x271068(0x90f)]();break;case _0x271068(0x52c):_0x17903b=this[_0x271068(0x6bf)][_0x271068(0x6fe)]();break;}if(!_0x17903b){if('pOLDF'!=='pOLDF'){function _0x1a3f83(){const _0x50ccfc=_0x271068;this[_0x50ccfc(0x86e)]=0x0,this['_currentAngle']=0x0;}}else this['_waitMode']='';}return _0x17903b;},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x2b2)]=function(){const _0x34f3d0=_0x534c3a;this[_0x34f3d0(0x387)](_0x34f3d0(0x460));},Window_BattleLog[_0x534c3a(0x53c)]['waitForFloat']=function(){const _0x42a5a7=_0x534c3a;this[_0x42a5a7(0x387)](_0x42a5a7(0x1d0));},Window_BattleLog['prototype'][_0x534c3a(0x18b)]=function(){const _0x5b9d03=_0x534c3a;this[_0x5b9d03(0x387)]('jump');},Window_BattleLog[_0x534c3a(0x53c)]['waitForOpacity']=function(){const _0x29d615=_0x534c3a;this['setWaitMode'](_0x29d615(0x52c));},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x5d4)]=function(){const _0xc4a850=_0x534c3a,_0x43880c=VisuMZ[_0xc4a850(0x99e)][_0xc4a850(0x795)]['BattleLog'];if(!_0x43880c['StartTurnShow'])return;this[_0xc4a850(0x3ba)](_0xc4a850(0x87c),_0x43880c[_0xc4a850(0x77c)][_0xc4a850(0x8e9)]($gameTroop[_0xc4a850(0x43c)]())),this['push'](_0xc4a850(0x438),_0x43880c['StartTurnWait']),this[_0xc4a850(0x3ba)](_0xc4a850(0x48e));},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x1f1)]=function(_0x542b77,_0x474d40,_0x379b4d){const _0x32341f=_0x534c3a;if(this[_0x32341f(0x86c)](_0x474d40)){if(_0x32341f(0x5cc)===_0x32341f(0x781)){function _0x4637b5(){_0x5a4be5+=_0x4019b3,_0xb57f5f+=_0x15c438;}}else BattleManager[_0x32341f(0x9f7)]();}else this[_0x32341f(0x803)](_0x542b77,_0x474d40,_0x379b4d);},Window_BattleLog[_0x534c3a(0x53c)]['isCustomActionSequence']=function(_0x51c53e){const _0x227655=_0x534c3a;if(!SceneManager[_0x227655(0xa8a)]())return![];if(!_0x51c53e)return![];if(!_0x51c53e[_0x227655(0x464)]())return![];if(_0x51c53e[_0x227655(0x464)]()[_0x227655(0x650)][_0x227655(0x5ed)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0x51c53e[_0x227655(0x464)]())){if(_0x227655(0x509)===_0x227655(0x509))return!![];else{function _0x2b4ed4(){const _0x165918=_0x227655;return _0x220558[_0x165918(0x99e)]['Settings']['ActorCmd'][_0x165918(0x7aa)];}}}return![];},Window_BattleLog['prototype'][_0x534c3a(0x803)]=function(_0x53cc37,_0x5a57fe,_0x146531){const _0x5d83ee=_0x534c3a,_0x4b9286=_0x5a57fe['item']();this[_0x5d83ee(0x91c)](_0x53cc37,_0x5a57fe,_0x146531),this[_0x5d83ee(0x149)](_0x53cc37,_0x5a57fe,_0x146531),this[_0x5d83ee(0x6c0)](_0x53cc37,_0x5a57fe,_0x146531);},Window_BattleLog['prototype'][_0x534c3a(0x17b)]=function(_0x1bd1b4,_0x32bbaf){const _0x5d3555=_0x534c3a,_0x4b8c8c=VisuMZ[_0x5d3555(0x99e)]['Settings'][_0x5d3555(0xa01)];if(_0x4b8c8c[_0x5d3555(0x919)]){if(_0x5d3555(0x1e6)!=='hkBtw')this[_0x5d3555(0x3ba)](_0x5d3555(0x87c),_0x5d3555(0x75f)[_0x5d3555(0x8e9)](DataManager[_0x5d3555(0x7ec)](_0x32bbaf)));else{function _0x5e65e3(){const _0x4c1d1a=_0x5d3555;_0x7d8d72[_0x4c1d1a(0x99e)]['JS'][_0x2bed69][_0x4c1d1a(0x63a)](this,this[_0x4c1d1a(0x3fe)](),this['subject'](),_0x111d54,_0x59f20f);}}}if(DataManager[_0x5d3555(0x6a6)](_0x32bbaf)){if(_0x4b8c8c[_0x5d3555(0x607)])this[_0x5d3555(0x17e)](_0x32bbaf[_0x5d3555(0x8b9)],_0x1bd1b4,_0x32bbaf);if(_0x4b8c8c[_0x5d3555(0xe8)])this[_0x5d3555(0x17e)](_0x32bbaf[_0x5d3555(0xaab)],_0x1bd1b4,_0x32bbaf);}else{if(_0x4b8c8c['ActionItemMsg'])this[_0x5d3555(0x17e)](TextManager['useItem'],_0x1bd1b4,_0x32bbaf);}},Window_BattleLog['prototype']['setupActionSet']=function(_0x403ad2,_0x449f87,_0x5dba7b){const _0x48362c=_0x534c3a,_0x3d416e=_0x449f87[_0x48362c(0x464)]();this['displayAction'](_0x403ad2,_0x3d416e),this[_0x48362c(0x3ba)](_0x48362c(0x36c),_0x403ad2,_0x5dba7b,!![]),this[_0x48362c(0x3ba)](_0x48362c(0x110),_0x403ad2,_0x449f87),this['push'](_0x48362c(0xd9)),this[_0x48362c(0x3ba)](_0x48362c(0x634),_0x403ad2,_0x449f87),this['push'](_0x48362c(0x2b2));},Window_BattleLog[_0x534c3a(0x53c)]['createEffectActionSet']=function(_0x530fa4,_0xa8cb76,_0x330771){const _0x315be3=_0x534c3a;if(this['isMeleeSingleTargetAction'](_0xa8cb76)){if('nOSPO'!==_0x315be3(0xa5b)){function _0x212c85(){const _0x2b78ae=_0x315be3;this['requestMotion'](_0x2b78ae(0x6ae));}}else this[_0x315be3(0x49a)](_0x530fa4,_0xa8cb76,_0x330771);}else{if(this[_0x315be3(0x9bc)](_0xa8cb76))this[_0x315be3(0x3c0)](_0x530fa4,_0xa8cb76,_0x330771);else _0xa8cb76[_0x315be3(0x38d)]()?this[_0x315be3(0x431)](_0x530fa4,_0xa8cb76,_0x330771):this[_0x315be3(0x95a)](_0x530fa4,_0xa8cb76,_0x330771);}},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x97a)]=function(_0x36549e){const _0x16fad5=_0x534c3a;if(!_0x36549e[_0x16fad5(0x28c)]())return![];if(!_0x36549e[_0x16fad5(0x292)]())return![];if(!_0x36549e['isForOpponent']())return![];return VisuMZ['BattleCore'][_0x16fad5(0x795)][_0x16fad5(0x189)][_0x16fad5(0x370)];},Window_BattleLog[_0x534c3a(0x53c)]['autoMeleeSingleTargetActionSet']=function(_0x586117,_0x40758c,_0x10ae0e){const _0x2ad395=_0x534c3a,_0x458ab0=_0x586117[_0x2ad395(0x6ba)]()[_0x2ad395(0x88f)]<0x2,_0x57e7db=0x14,_0x62fbe5=0x30;if(_0x458ab0){if(_0x2ad395(0x77d)===_0x2ad395(0x77d))this['push']('performJump',[_0x586117],_0x62fbe5,_0x57e7db),this[_0x2ad395(0x3ba)](_0x2ad395(0x332),_0x586117,_0x10ae0e,_0x2ad395(0x12a),_0x57e7db,!![],'Linear',!![]),this[_0x2ad395(0x3ba)](_0x2ad395(0x961),[_0x586117],_0x2ad395(0x4b7)),this['push'](_0x2ad395(0xd9));else{function _0x49d514(){const _0x4ab0b5=_0x2ad395;if(!_0x3f0078[_0x4ab0b5(0xa8a)]())return;if(!this[_0x4ab0b5(0x7c4)]())return;if(_0x1d63be['length']<=0x0)return;_0x197b59=_0x30ab1a||{},_0x3efdfe[_0x4ab0b5(0x678)]=_0x1769c3[_0x4ab0b5(0x678)]||_0x4ab0b5(0x858),_0x1f445a[_0x4ab0b5(0x1de)]=_0xa38db3[_0x4ab0b5(0x1de)]||[0x0,0x0,0x0,0x0],_0x304b9a[_0x4ab0b5(0x563)]=_0x13d7ea[_0x4ab0b5(0x563)]||0x0,this[_0x4ab0b5(0x7c4)]()[_0x4ab0b5(0x207)](_0x463e38,_0x51bf76);}}}let _0x5ce590=_0x40758c[_0x2ad395(0x7a4)]()?this[_0x2ad395(0x565)](_0x586117):0x1;for(let _0x3c2b68=0x0;_0x3c2b68<_0x5ce590;_0x3c2b68++){if(_0x40758c[_0x2ad395(0x7a4)]()&&_0x586117[_0x2ad395(0x1e7)]()){if(_0x2ad395(0x7e5)!=='VtVBu'){function _0x522fd4(){const _0x2cd66f=_0x2ad395;_0x1cca73[_0x2cd66f(0x99e)][_0x2cd66f(0x771)][_0x2cd66f(0x63a)](this),this[_0x2cd66f(0x2c6)]();}}else this[_0x2ad395(0x3ba)](_0x2ad395(0x1c6),_0x586117,_0x3c2b68);}if(_0x40758c[_0x2ad395(0x464)]()[_0x2ad395(0xf6)]<0x0){if('sFfXL'===_0x2ad395(0x7af))this[_0x2ad395(0x431)](_0x586117,_0x40758c,_0x10ae0e);else{function _0x22eeb5(){const _0x2c258f=_0x2ad395;this[_0x2c258f(0x1bc)](_0x2c258f(0x4b7));}}}else this[_0x2ad395(0x95a)](_0x586117,_0x40758c,_0x10ae0e);}if(_0x40758c['isAttack']()&&_0x586117[_0x2ad395(0x1e7)]()){if(_0x2ad395(0x977)===_0x2ad395(0x977))this[_0x2ad395(0x3ba)](_0x2ad395(0x64c),_0x586117);else{function _0x509f13(){const _0x32c462=_0x2ad395;this[_0x32c462(0x14a)](),this[_0x32c462(0x890)]=null,this[_0x32c462(0x10e)]=![];}}}this[_0x2ad395(0x3ba)](_0x2ad395(0x36c),_0x586117,_0x10ae0e,![]);if(_0x458ab0){if('eHmfW'===_0x2ad395(0x7ee)){function _0x17f89e(){const _0x444dff=_0x2ad395;this['_mainSprite'][_0x444dff(0x848)](_0x44737b);}}else{const _0x446f14=_0x586117[_0x2ad395(0x7c4)]();this[_0x2ad395(0x3ba)](_0x2ad395(0x22e),[_0x586117],_0x62fbe5,_0x57e7db),this[_0x2ad395(0x3ba)](_0x2ad395(0x8d3),_0x586117,_0x446f14[_0x2ad395(0x97e)],_0x446f14[_0x2ad395(0x5c2)],_0x57e7db,![],'Linear'),this['push'](_0x2ad395(0x961),[_0x586117],_0x2ad395(0x7e8)),this[_0x2ad395(0x3ba)](_0x2ad395(0xd9)),this[_0x2ad395(0x3ba)](_0x2ad395(0x961),[_0x586117],_0x2ad395(0x4b7));}}},Window_BattleLog[_0x534c3a(0x53c)]['isMeleeMultiTargetAction']=function(_0x101e0f){const _0x26247c=_0x534c3a;if(!_0x101e0f[_0x26247c(0x28c)]())return![];if(!_0x101e0f['isForAll']())return![];if(!_0x101e0f[_0x26247c(0x60e)]())return![];return VisuMZ[_0x26247c(0x99e)][_0x26247c(0x795)]['ActionSequence'][_0x26247c(0x13d)];},Window_BattleLog['prototype']['autoMeleeMultiTargetActionSet']=function(_0x570dc0,_0x2ac56b,_0x70ad86){const _0x353ad2=_0x534c3a,_0x44fa3f=_0x570dc0[_0x353ad2(0x6ba)]()['type']<0x2,_0x428f6c=0x14,_0x269b1b=0x30;_0x44fa3f&&(this[_0x353ad2(0x3ba)](_0x353ad2(0x22e),[_0x570dc0],_0x269b1b,_0x428f6c),this[_0x353ad2(0x3ba)](_0x353ad2(0x332),_0x570dc0,_0x70ad86,'front\x20center',_0x428f6c,!![],'Linear',!![]),this[_0x353ad2(0x3ba)](_0x353ad2(0x961),[_0x570dc0],_0x353ad2(0x4b7)),this[_0x353ad2(0x3ba)](_0x353ad2(0xd9)));let _0x22d8d9=_0x2ac56b[_0x353ad2(0x7a4)]()?this[_0x353ad2(0x565)](_0x570dc0):0x1;for(let _0x5ad098=0x0;_0x5ad098<_0x22d8d9;_0x5ad098++){if(_0x353ad2(0x86b)!=='SomXx'){function _0x1e3dcb(){const _0x431fe7=_0x353ad2,_0x1d3bd8=_0x12b7b7[_0x431fe7(0x8eb)](_0x116d67['$1']);this['addSingleSkillCommand'](_0x1767c1[_0x1d3bd8]);}}else _0x2ac56b[_0x353ad2(0x7a4)]()&&_0x570dc0['isActor']()&&this[_0x353ad2(0x3ba)]('setActiveWeaponSet',_0x570dc0,_0x5ad098),this['wholeActionSet'](_0x570dc0,_0x2ac56b,_0x70ad86);}_0x2ac56b[_0x353ad2(0x7a4)]()&&_0x570dc0[_0x353ad2(0x1e7)]()&&this['push']('clearActiveWeaponSet',_0x570dc0);this[_0x353ad2(0x3ba)](_0x353ad2(0x36c),_0x570dc0,_0x70ad86,![]);if(_0x44fa3f){const _0x5dc5c6=_0x570dc0[_0x353ad2(0x7c4)]();this[_0x353ad2(0x3ba)]('performJump',[_0x570dc0],_0x269b1b,_0x428f6c),this[_0x353ad2(0x3ba)](_0x353ad2(0x8d3),_0x570dc0,_0x5dc5c6[_0x353ad2(0x97e)],_0x5dc5c6[_0x353ad2(0x5c2)],_0x428f6c,![],_0x353ad2(0x6a4)),this[_0x353ad2(0x3ba)](_0x353ad2(0x961),[_0x570dc0],_0x353ad2(0x7e8)),this['push'](_0x353ad2(0xd9)),this[_0x353ad2(0x3ba)](_0x353ad2(0x961),[_0x570dc0],_0x353ad2(0x4b7));}},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x431)]=function(_0x577ea0,_0x5481ae,_0x4fa320){const _0x53a630=_0x534c3a,_0x52d49a=_0x5481ae[_0x53a630(0x464)]();for(const _0x5aacc1 of _0x4fa320){if(_0x53a630(0x6d7)===_0x53a630(0x6d7)){if(!_0x5aacc1)continue;this[_0x53a630(0x3ba)](_0x53a630(0xa80),_0x577ea0,_0x5481ae),this['push']('waitCount',Sprite_Battler[_0x53a630(0xa1f)]),this[_0x53a630(0x3ba)]('showAnimation',_0x577ea0,[_0x5aacc1],_0x52d49a['animationId']),this[_0x53a630(0x3ba)](_0x53a630(0x438),0x18),this[_0x53a630(0x3ba)](_0x53a630(0x3d3),_0x577ea0,_0x5aacc1);}else{function _0x40850e(){const _0x456e91=_0x53a630;_0x4c8390[_0x456e91(0x53c)][_0x456e91(0x9b7)][_0x456e91(0x63a)](this),this[_0x456e91(0x3d6)][_0x456e91(0x48e)]();if(!this[_0x456e91(0x602)]())return;this[_0x456e91(0x557)]();}}}},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x95a)]=function(_0x5ccd3d,_0x10f0b4,_0x27dbf7){const _0x8454ac=_0x534c3a,_0x5b7e4f=_0x10f0b4[_0x8454ac(0x464)]();this[_0x8454ac(0x3ba)](_0x8454ac(0xa80),_0x5ccd3d,_0x10f0b4),this[_0x8454ac(0x3ba)](_0x8454ac(0x438),Sprite_Battler['_motionSpeed']),this[_0x8454ac(0x3ba)](_0x8454ac(0x126),_0x5ccd3d,_0x27dbf7[_0x8454ac(0xa21)](),_0x5b7e4f[_0x8454ac(0xf6)]),this[_0x8454ac(0x3ba)]('waitForAnimation');for(const _0x5c88b0 of _0x27dbf7){if(!_0x5c88b0)continue;this[_0x8454ac(0x3ba)]('actionEffect',_0x5ccd3d,_0x5c88b0);}},Window_BattleLog['prototype'][_0x534c3a(0x6c0)]=function(_0x255f38,_0x377d76,_0x26e5a3){const _0x3c6e5a=_0x534c3a,_0x91680c=_0x377d76[_0x3c6e5a(0x464)]();this['push'](_0x3c6e5a(0x36c),_0x255f38,_0x26e5a3,![]),this[_0x3c6e5a(0x3ba)](_0x3c6e5a(0x4e2)),this[_0x3c6e5a(0x3ba)](_0x3c6e5a(0x51d)),this[_0x3c6e5a(0x3ba)](_0x3c6e5a(0x48e)),this[_0x3c6e5a(0x3ba)](_0x3c6e5a(0x4ad),_0x255f38),this[_0x3c6e5a(0x3ba)]('waitForMovement');},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x3f6)]=function(_0x55ed17){},VisuMZ[_0x534c3a(0x99e)]['Window_BattleLog_displayCurrentState']=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x2a2)],Window_BattleLog['prototype'][_0x534c3a(0x2a2)]=function(_0x638ae2){const _0x3a835b=_0x534c3a;if(!VisuMZ['BattleCore']['Settings'][_0x3a835b(0xa01)][_0x3a835b(0x519)])return;VisuMZ[_0x3a835b(0x99e)][_0x3a835b(0x69c)][_0x3a835b(0x63a)](this,_0x638ae2);},Window_BattleLog['prototype'][_0x534c3a(0x9c5)]=function(_0x2c2030){const _0x1ba666=_0x534c3a;this[_0x1ba666(0x3ba)]('performCounter',_0x2c2030);VisuMZ[_0x1ba666(0x99e)][_0x1ba666(0x795)]['ActionSequence'][_0x1ba666(0x8dd)]&&this[_0x1ba666(0x3ba)](_0x1ba666(0x126),_0x2c2030,[BattleManager[_0x1ba666(0x90c)]],-0x1);if(!VisuMZ[_0x1ba666(0x99e)][_0x1ba666(0x795)][_0x1ba666(0xa01)]['ShowCounter'])return;this[_0x1ba666(0x3ba)](_0x1ba666(0x87c),TextManager[_0x1ba666(0x95d)]['format'](_0x2c2030[_0x1ba666(0x180)]()));},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x949)]=function(_0x582378){const _0xdac6a4=_0x534c3a;this[_0xdac6a4(0x3ba)]('performReflection',_0x582378);if(!VisuMZ['BattleCore'][_0xdac6a4(0x795)][_0xdac6a4(0xa01)][_0xdac6a4(0x71e)])return;this['push'](_0xdac6a4(0x87c),TextManager[_0xdac6a4(0x47a)][_0xdac6a4(0x8e9)](_0x582378['name']()));},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0xa7b)]=function(_0x3dad33,_0x37add6){const _0x397ec5=_0x534c3a;if(VisuMZ[_0x397ec5(0x99e)][_0x397ec5(0x795)][_0x397ec5(0x189)][_0x397ec5(0x6e2)]){const _0x12807c=_0x37add6['item']();this[_0x397ec5(0x3ba)](_0x397ec5(0x126),_0x3dad33,[_0x3dad33],_0x12807c[_0x397ec5(0xf6)]);}},Window_BattleLog[_0x534c3a(0x53c)]['displaySubstitute']=function(_0x55afe5,_0x59d90b){const _0x150596=_0x534c3a;this['push'](_0x150596(0x273),_0x55afe5,_0x59d90b);if(!VisuMZ[_0x150596(0x99e)][_0x150596(0x795)][_0x150596(0xa01)][_0x150596(0x16c)])return;const _0x38aad9=_0x55afe5['name'](),_0x42263f=TextManager[_0x150596(0x6e0)][_0x150596(0x8e9)](_0x38aad9,_0x59d90b[_0x150596(0x180)]());this['push'](_0x150596(0x87c),_0x42263f);},VisuMZ[_0x534c3a(0x99e)]['Window_BattleLog_displayFailure']=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x58a)],Window_BattleLog['prototype'][_0x534c3a(0x58a)]=function(_0x5f12d9){const _0x24d196=_0x534c3a;if(!VisuMZ[_0x24d196(0x99e)][_0x24d196(0x795)]['BattleLog'][_0x24d196(0x148)])return;VisuMZ[_0x24d196(0x99e)][_0x24d196(0x7a7)]['call'](this,_0x5f12d9);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x709)]=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x755)],Window_BattleLog['prototype'][_0x534c3a(0x755)]=function(_0x1916ee){const _0x1eaadf=_0x534c3a;if(!VisuMZ[_0x1eaadf(0x99e)][_0x1eaadf(0x795)]['BattleLog'][_0x1eaadf(0x50c)])return;VisuMZ['BattleCore'][_0x1eaadf(0x709)][_0x1eaadf(0x63a)](this,_0x1916ee);},VisuMZ[_0x534c3a(0x99e)]['Window_BattleLog_displayMiss']=Window_BattleLog['prototype'][_0x534c3a(0x79c)],Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x79c)]=function(_0x5104dc){const _0x5d1a1c=_0x534c3a;!VisuMZ['BattleCore'][_0x5d1a1c(0x795)][_0x5d1a1c(0xa01)][_0x5d1a1c(0x34e)]?this['push'](_0x5d1a1c(0x311),_0x5104dc):VisuMZ[_0x5d1a1c(0x99e)][_0x5d1a1c(0x8ab)][_0x5d1a1c(0x63a)](this,_0x5104dc);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x2ad)]=Window_BattleLog['prototype'][_0x534c3a(0xa9d)],Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0xa9d)]=function(_0x55791f){const _0x480b24=_0x534c3a;!VisuMZ['BattleCore'][_0x480b24(0x795)][_0x480b24(0xa01)][_0x480b24(0x34e)]?_0x55791f[_0x480b24(0x8db)]()['physical']?this['push'](_0x480b24(0x85c),_0x55791f):this[_0x480b24(0x3ba)]('performMagicEvasion',_0x55791f):VisuMZ['BattleCore'][_0x480b24(0x2ad)][_0x480b24(0x63a)](this,_0x55791f);},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x2f6)]=function(_0x16f86b){const _0x11ec13=_0x534c3a;if(_0x16f86b['result']()['hpAffected']){if(_0x16f86b[_0x11ec13(0x8db)]()[_0x11ec13(0x973)]>0x0&&!_0x16f86b[_0x11ec13(0x8db)]()[_0x11ec13(0x228)]){if(_0x11ec13(0xa0d)==='esCYv'){function _0x3494a8(){return 0x0;}}else this[_0x11ec13(0x3ba)](_0x11ec13(0x622),_0x16f86b);}if(_0x16f86b[_0x11ec13(0x8db)]()[_0x11ec13(0x973)]<0x0){if(_0x11ec13(0x902)!==_0x11ec13(0x902)){function _0x58fc35(){const _0x50c33d=_0x11ec13;if(_0x4b9890[_0x50c33d(0xa53)]())this[_0x50c33d(0x667)](),this[_0x50c33d(0x7e2)]=![],_0x3002c0[_0x50c33d(0x1c4)]();else this[_0x50c33d(0x7e2)]&&(this[_0x50c33d(0x7e2)]=![],this[_0x50c33d(0x9b7)](),this[_0x50c33d(0x62a)]());}}else this['push'](_0x11ec13(0x135),_0x16f86b);}if(VisuMZ[_0x11ec13(0x99e)][_0x11ec13(0x795)][_0x11ec13(0xa01)][_0x11ec13(0x2c0)]){if(_0x11ec13(0x8b0)===_0x11ec13(0x8b0))this[_0x11ec13(0x3ba)](_0x11ec13(0x87c),this[_0x11ec13(0x9c0)](_0x16f86b));else{function _0x4ed933(){const _0x3b6dc2=_0x11ec13;this[_0x3b6dc2(0x6be)]['x']=0x0,this[_0x3b6dc2(0x2de)]=_0x89e703['ceil'](_0x14ea79[_0x3b6dc2(0x456)]/0x2);}}}}},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x9dc)]=Window_BattleLog['prototype'][_0x534c3a(0x1e2)],Window_BattleLog[_0x534c3a(0x53c)]['displayMpDamage']=function(_0x23858e){const _0x2970bc=_0x534c3a;if(!VisuMZ[_0x2970bc(0x99e)]['Settings'][_0x2970bc(0xa01)][_0x2970bc(0x34f)])return;VisuMZ[_0x2970bc(0x99e)][_0x2970bc(0x9dc)][_0x2970bc(0x63a)](this,_0x23858e);},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x82a)]=Window_BattleLog['prototype'][_0x534c3a(0x8d9)],Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x8d9)]=function(_0x1a3f88){const _0x36e3bc=_0x534c3a;if(!VisuMZ[_0x36e3bc(0x99e)][_0x36e3bc(0x795)]['BattleLog'][_0x36e3bc(0x53b)])return;VisuMZ[_0x36e3bc(0x99e)][_0x36e3bc(0x82a)]['call'](this,_0x1a3f88);},Window_BattleLog['prototype'][_0x534c3a(0x862)]=function(_0x1cc84a){const _0x55b0aa=_0x534c3a,_0x28f64b=_0x1cc84a[_0x55b0aa(0x8db)](),_0x5ec2e1=_0x28f64b['addedStateObjects']();for(const _0x43d48a of _0x5ec2e1){const _0x1886f8=_0x1cc84a[_0x55b0aa(0x1e7)]()?_0x43d48a[_0x55b0aa(0x8b9)]:_0x43d48a[_0x55b0aa(0xaab)];if(_0x1886f8&&VisuMZ[_0x55b0aa(0x99e)][_0x55b0aa(0x795)][_0x55b0aa(0xa01)][_0x55b0aa(0x99c)]){if(_0x55b0aa(0x2c7)!==_0x55b0aa(0x2c7)){function _0x267545(){const _0x3992fc=_0x55b0aa,_0x224924=_0x4a83a4['indexOf'](_0x3b8f8e[_0x3992fc(0x2ca)]()[_0x3992fc(0x5a9)]());_0x224924>=0x0&&_0x224924<=0x7&&_0x40fb68[_0x3992fc(0x300)](_0x224924)&&_0x1ac054[_0x3992fc(0x299)](_0x224924);}}else this[_0x55b0aa(0x3ba)](_0x55b0aa(0xa17)),this[_0x55b0aa(0x3ba)]('pushBaseLine'),this[_0x55b0aa(0x3ba)](_0x55b0aa(0x87c),_0x1886f8[_0x55b0aa(0x8e9)](_0x1cc84a[_0x55b0aa(0x180)]())),this[_0x55b0aa(0x3ba)](_0x55b0aa(0x41c));}_0x43d48a['id']===_0x1cc84a[_0x55b0aa(0x36f)]()&&this['push']('performCollapse',_0x1cc84a);}},Window_BattleLog['prototype'][_0x534c3a(0x295)]=function(_0xfd0c1a){const _0x58f674=_0x534c3a;if(!VisuMZ[_0x58f674(0x99e)]['Settings'][_0x58f674(0xa01)]['ShowRemovedState'])return;const _0x288a9b=_0xfd0c1a['result'](),_0x236b9f=_0x288a9b[_0x58f674(0x3b9)]();for(const _0xbaa4b2 of _0x236b9f){if(_0xbaa4b2[_0x58f674(0x15e)]){if(_0x58f674(0xa06)!==_0x58f674(0xa06)){function _0x5cfd73(){const _0x261a54=_0x58f674;this[_0x261a54(0x5d1)]()[_0x261a54(0x5b7)](_0x4c9865),this['_damages'][_0x261a54(0x46f)](_0xdd2018),_0x39c445[_0x261a54(0x806)]();}}else this[_0x58f674(0x3ba)](_0x58f674(0xa17)),this[_0x58f674(0x3ba)](_0x58f674(0x83a)),this['push'](_0x58f674(0x87c),_0xbaa4b2['message4']['format'](_0xfd0c1a[_0x58f674(0x180)]())),this[_0x58f674(0x3ba)](_0x58f674(0x41c));}}},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x98c)]=function(_0xbd001f){const _0x4da957=_0x534c3a,_0x3bd8a8=VisuMZ['BattleCore']['Settings']['BattleLog'],_0x4b5607=_0xbd001f['result']();if(_0x3bd8a8[_0x4da957(0x9c2)])this[_0x4da957(0x641)](_0xbd001f,_0x4b5607[_0x4da957(0xa29)],TextManager[_0x4da957(0x314)]);if(_0x3bd8a8[_0x4da957(0xa03)])this[_0x4da957(0x641)](_0xbd001f,_0x4b5607[_0x4da957(0x319)],TextManager['debuffAdd']);if(_0x3bd8a8['ShowRemovedBuff'])this['displayBuffs'](_0xbd001f,_0x4b5607['removedBuffs'],TextManager['buffRemove']);},Window_BattleLog['prototype'][_0x534c3a(0x641)]=function(_0x3be679,_0x538970,_0x3570dd){const _0x220708=_0x534c3a;for(const _0x47cd55 of _0x538970){if(_0x220708(0x7db)!==_0x220708(0x843)){const _0x3f5b22=_0x3570dd[_0x220708(0x8e9)](_0x3be679[_0x220708(0x180)](),TextManager[_0x220708(0x8f1)](_0x47cd55));this[_0x220708(0x3ba)]('popBaseLine'),this[_0x220708(0x3ba)](_0x220708(0x83a)),this['push']('addText',_0x3f5b22),this['push'](_0x220708(0x41c));}else{function _0x1af777(){const _0x4b6cbb=_0x220708;this[_0x4b6cbb(0x961)](_0x4b6cbb(0x948));}}}},VisuMZ['BattleCore'][_0x534c3a(0x324)]=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x48e)],Window_BattleLog['prototype']['clear']=function(){const _0x3d01bb=_0x534c3a;VisuMZ[_0x3d01bb(0x99e)][_0x3d01bb(0x324)]['call'](this),this[_0x3d01bb(0x10c)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x4d9)]=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x83a)],Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x83a)]=function(){const _0x4f35be=_0x534c3a;VisuMZ[_0x4f35be(0x99e)][_0x4f35be(0x4d9)][_0x4f35be(0x63a)](this),this[_0x4f35be(0x10c)]();},VisuMZ[_0x534c3a(0x99e)]['Window_BattleLog_popBaseLine']=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0xa17)],Window_BattleLog['prototype'][_0x534c3a(0xa17)]=function(){const _0x2d61fb=_0x534c3a;VisuMZ[_0x2d61fb(0x99e)][_0x2d61fb(0x5e2)][_0x2d61fb(0x63a)](this),this[_0x2d61fb(0x9b7)](),this['callNextMethod']();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0xa6c)]=Window_BattleLog[_0x534c3a(0x53c)]['popupDamage'],Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x4cf)]=function(_0x3b91bb){const _0xdd5aa1=_0x534c3a;VisuMZ[_0xdd5aa1(0x99e)][_0xdd5aa1(0xa6c)][_0xdd5aa1(0x63a)](this,_0x3b91bb),this['callNextMethod']();},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x4e2)]=function(){const _0x4a27b5=_0x534c3a;let _0x44467e=0x0;this['_baseLineStack'][_0x4a27b5(0x4a2)]>0x0&&(_0x44467e=this[_0x4a27b5(0x4de)][this['_baseLineStack'][_0x4a27b5(0x4a2)]-0x1]),this[_0x4a27b5(0xfd)]['length']>_0x44467e?this[_0x4a27b5(0x41c)]():this[_0x4a27b5(0x10c)]();},VisuMZ[_0x534c3a(0x99e)]['Window_BattleLog_performActionStart']=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x110)],Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x110)]=function(_0xc0f53e,_0x4f4ac9){const _0x4284fc=_0x534c3a;VisuMZ['BattleCore']['Window_BattleLog_performActionStart'][_0x4284fc(0x63a)](this,_0xc0f53e,_0x4f4ac9),this['callNextMethod']();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x897)]=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0xa80)],Window_BattleLog[_0x534c3a(0x53c)]['performAction']=function(_0x2eab64,_0x2b7e0d){const _0x1ce1ac=_0x534c3a;VisuMZ[_0x1ce1ac(0x99e)][_0x1ce1ac(0x897)][_0x1ce1ac(0x63a)](this,_0x2eab64,_0x2b7e0d),this[_0x1ce1ac(0x10c)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x294)]=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x4ad)],Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x4ad)]=function(_0x2d7166){const _0x5798db=_0x534c3a;VisuMZ['BattleCore'][_0x5798db(0x294)][_0x5798db(0x63a)](this,_0x2d7166);for(const _0x54867f of BattleManager[_0x5798db(0x120)]()){if(!_0x54867f)continue;if(_0x54867f[_0x5798db(0x43f)]())continue;_0x54867f[_0x5798db(0x33b)]();}this[_0x5798db(0x10c)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x927)]=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x622)],Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x622)]=function(_0x50c2){const _0x4d4488=_0x534c3a;VisuMZ['BattleCore'][_0x4d4488(0x927)][_0x4d4488(0x63a)](this,_0x50c2),this[_0x4d4488(0x10c)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0xcc)]=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x311)],Window_BattleLog[_0x534c3a(0x53c)]['performMiss']=function(_0x21fcf3){const _0x250ebf=_0x534c3a;VisuMZ[_0x250ebf(0x99e)][_0x250ebf(0xcc)][_0x250ebf(0x63a)](this,_0x21fcf3),this[_0x250ebf(0x10c)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x40a)]=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x135)],Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x135)]=function(_0x1de59f){const _0xf2be4a=_0x534c3a;VisuMZ['BattleCore'][_0xf2be4a(0x40a)][_0xf2be4a(0x63a)](this,_0x1de59f),this[_0xf2be4a(0x10c)]();},VisuMZ[_0x534c3a(0x99e)]['Window_BattleLog_performEvasion']=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x85c)],Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x85c)]=function(_0x461306){const _0x1d0d4d=_0x534c3a;VisuMZ['BattleCore']['Window_BattleLog_performEvasion'][_0x1d0d4d(0x63a)](this,_0x461306),this['callNextMethod']();},VisuMZ[_0x534c3a(0x99e)]['Window_BattleLog_performMagicEvasion']=Window_BattleLog[_0x534c3a(0x53c)]['performMagicEvasion'],Window_BattleLog['prototype'][_0x534c3a(0x5f7)]=function(_0x1e6054){const _0x552fb9=_0x534c3a;VisuMZ[_0x552fb9(0x99e)][_0x552fb9(0x826)][_0x552fb9(0x63a)](this,_0x1e6054),this[_0x552fb9(0x10c)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x2f7)]=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x774)],Window_BattleLog[_0x534c3a(0x53c)]['performCounter']=function(_0x1d7d2f){const _0x595c3f=_0x534c3a;VisuMZ[_0x595c3f(0x99e)][_0x595c3f(0x2f7)][_0x595c3f(0x63a)](this,_0x1d7d2f),this[_0x595c3f(0x10c)]();},VisuMZ['BattleCore'][_0x534c3a(0x83c)]=Window_BattleLog[_0x534c3a(0x53c)]['performReflection'],Window_BattleLog['prototype']['performReflection']=function(_0xe33db9){const _0x31e521=_0x534c3a;VisuMZ[_0x31e521(0x99e)][_0x31e521(0x83c)][_0x31e521(0x63a)](this,_0xe33db9),this[_0x31e521(0x10c)]();},VisuMZ[_0x534c3a(0x99e)][_0x534c3a(0x231)]=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x273)],Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x273)]=function(_0x273556,_0x1d03ca){const _0xacfae9=_0x534c3a;VisuMZ['BattleCore']['Window_BattleLog_performSubstitute'][_0xacfae9(0x63a)](this,_0x273556,_0x1d03ca),this['callNextMethod']();},VisuMZ[_0x534c3a(0x99e)]['Window_BattleLog_performCollapse']=Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x330)],Window_BattleLog[_0x534c3a(0x53c)]['performCollapse']=function(_0x23e291){const _0x31e0e8=_0x534c3a;VisuMZ[_0x31e0e8(0x99e)][_0x31e0e8(0x636)]['call'](this,_0x23e291),this[_0x31e0e8(0x10c)]();},Window_BattleLog[_0x534c3a(0x53c)]['performCastAnimation']=function(_0x29d67c,_0x2f4677){const _0xfe7143=_0x534c3a;_0x29d67c[_0xfe7143(0x634)](_0x2f4677),this['callNextMethod']();},Window_BattleLog['prototype'][_0x534c3a(0x523)]=function(_0x438cf1,_0x560817){const _0x4bfd2e=_0x534c3a,_0xe0e301=_0x438cf1[_0x4bfd2e(0x618)]();if(_0xe0e301<=0x0)SoundManager[_0x4bfd2e(0x789)]();else{if('ihnvL'!==_0x4bfd2e(0x4dd)){function _0x573a15(){const _0x47339f=_0x4bfd2e;this[_0x47339f(0x393)]=new _0x3b6468();for(let _0x14fc24=0x0;_0x14fc24<0x9;_0x14fc24++){this[_0x47339f(0x393)][_0x47339f(0x2cf)](new _0x23f0ea());}this[_0x47339f(0x7cc)]['addChild'](this[_0x47339f(0x393)]);}}else this['showNormalAnimation'](_0x560817,_0xe0e301);}},Window_BattleLog['prototype']['applyImmortal']=function(_0x3683ea,_0x3f8d20,_0x3a7eba){const _0x5e8469=_0x534c3a,_0x27707d=[_0x3683ea]['concat'](_0x3f8d20);for(const _0x28a292 of _0x27707d){if(!_0x28a292)continue;_0x28a292[_0x5e8469(0x157)](_0x3a7eba);}this[_0x5e8469(0x10c)]();},Window_BattleLog['prototype'][_0x534c3a(0x438)]=function(_0x5cdf16){const _0x5147f5=_0x534c3a;this[_0x5147f5(0x7ed)]=_0x5cdf16;},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x961)]=function(_0x51d88a,_0x3d4496){const _0x44f9c6=_0x534c3a;for(const _0x2de112 of _0x51d88a){if(!_0x2de112)continue;_0x2de112[_0x44f9c6(0x961)](_0x3d4496);}this[_0x44f9c6(0x10c)]();},Window_BattleLog[_0x534c3a(0x53c)][_0x534c3a(0x8d3)]=function(_0x192bbf,_0x38e1e6,_0x2de7ec,_0x584bc5,_0x5b987e,_0x3d6ea8){const _0x5cd75c=_0x534c3a;_0x192bbf[_0x5cd75c(0xa42)](_0x38e1e6,_0x2de7ec,_0x584bc5,_0x5b987e,_0x3d6ea8,-0x1),this[_0x5cd75c(0x10c)]();},Window_BattleLog['prototype']['performMoveToTargets']=function(_0x33d5a6,_0x47441a,_0x4d458a,_0x4224e3,_0x1e481c,_0x4ca309,_0x2e2d18){const _0x4be700=_0x534c3a,_0x116b91=Math[_0x4be700(0x623)](..._0x47441a['map'](_0xdda49e=>_0xdda49e[_0x4be700(0x7c4)]()[_0x4be700(0x674)]-_0xdda49e[_0x4be700(0x7c4)]()[_0x4be700(0x7f5)]()/0x2)),_0x6abed7=Math['max'](..._0x47441a[_0x4be700(0x406)](_0x5a42c5=>_0x5a42c5[_0x4be700(0x7c4)]()[_0x4be700(0x674)]+_0x5a42c5['battler']()[_0x4be700(0x7f5)]()/0x2)),_0x5df8e3=Math[_0x4be700(0x623)](..._0x47441a[_0x4be700(0x406)](_0x54260c=>_0x54260c[_0x4be700(0x7c4)]()[_0x4be700(0x2df)]-_0x54260c['battler']()[_0x4be700(0x8fd)]())),_0x5c8b7d=Math[_0x4be700(0x9a7)](..._0x47441a[_0x4be700(0x406)](_0x2535f9=>_0x2535f9[_0x4be700(0x7c4)]()[_0x4be700(0x2df)])),_0x9215b1=_0x47441a['filter'](_0x191789=>_0x191789[_0x4be700(0x1e7)]())[_0x4be700(0x4a2)],_0x19807e=_0x47441a['filter'](_0x61a7fe=>_0x61a7fe[_0x4be700(0x405)]())[_0x4be700(0x4a2)];let _0x316097=0x0,_0x1f8696=0x0;if(_0x4d458a[_0x4be700(0x5ed)](/front/i))_0x316097=_0x9215b1>=_0x19807e?_0x116b91:_0x6abed7;else{if(_0x4d458a['match'](/middle/i)){if('IHnPY'===_0x4be700(0xff))_0x316097=(_0x116b91+_0x6abed7)/0x2,_0x2e2d18=-0x1;else{function _0x4fcbfa(){return _0x22c420;}}}else _0x4d458a[_0x4be700(0x5ed)](/back/i)&&(_0x316097=_0x9215b1>=_0x19807e?_0x6abed7:_0x116b91);}if(_0x4d458a[_0x4be700(0x5ed)](/head/i)){if(_0x4be700(0x144)!==_0x4be700(0x5b1))_0x1f8696=_0x5df8e3;else{function _0x207657(){const _0xa692ed=_0x4be700;return this[_0xa692ed(0x2e9)]()&&this[_0xa692ed(0x2e9)]()[_0xa692ed(0x464)]()&&this[_0xa692ed(0x2e9)]()[_0xa692ed(0x9cd)]();}}}else{if(_0x4d458a[_0x4be700(0x5ed)](/center/i))_0x1f8696=(_0x5df8e3+_0x5c8b7d)/0x2;else{if(_0x4d458a['match'](/base/i)){if('SrwGa'!==_0x4be700(0x9af))_0x1f8696=_0x5c8b7d;else{function _0x1c98e3(){const _0x2d0d66=_0x4be700;this['_borderPortraitSprite']['bitmap']=_0x31fe7e[_0x2d0d66(0xa8b)];return;}}}}}_0x33d5a6['moveBattlerToPoint'](_0x316097,_0x1f8696,_0x4224e3,_0x1e481c,_0x4ca309,_0x2e2d18),this[_0x4be700(0x10c)]();},Window_BattleLog['prototype'][_0x534c3a(0x22e)]=function(_0x38763b,_0x29db1b,_0x5b6f16){const _0x4a5d81=_0x534c3a;for(const _0x2839c7 of _0x38763b){if(!_0x2839c7)continue;_0x2839c7[_0x4a5d81(0x284)](_0x29db1b,_0x5b6f16);}this[_0x4a5d81(0x10c)]();};